[{
  "mutant_program": "muta12_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta19_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "4",
        "2021"
      ],
      "original_output": "   April 2021\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30\n\n",
      "mutant_output": "   April 2021\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30\n\n",
      "explanation": "The output is the same because both the original program and mutant program carry out the same function with the same parameters and return the same output, making them equivalent."
    },
    {
      "input": [
        "16",
        "2021"
      ],
      "original_output": "cal: 16: Bad month.\n",
      "mutant_output": "cal: 16: Bad month.\n",
      "explanation": "The output is the same because the invalid input in both the original program and mutant program causes an error message to be returned, making them equivalent."
    },
    {
      "input": [],
      "original_output": "   August 2021\n S  M Tu  W Th  F  S\n  1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31\n\n",
      "mutant_output": "   August 2021\n S  M Tu  W Th  F  S\n  1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31\n\n",
      "explanation": "The output is the same because the input parameters are set by default to show the current month and year in both the original program and mutant program, making them equivalent."
    }
  ]
},{
  "mutant_program": "muta33_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta72_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta73_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "13",
        "2021"
      ],
      "original_output": "cal: 13: Bad month.",
      "mutant_output": "cal: 13: Bad month.",
      "explanation": "Both programs will output the same error message because the input is invalid in both cases."
    },
    {
      "input": [
        "5",
        "1850"
      ],
      "original_output": "cal: 1850: Bad year.",
      "mutant_output": "",
      "explanation": "The original program checks if the input year is between 1 and 9999, while the mutant code only checks if it is positive. Therefore, the test will only fail for the mutant code that will not detect the invalid year input."
    },
    {
      "input": [
        "-",
        "5",
        "2021"
      ],
      "original_output": "   May 2021\n S  M Tu  W Th  F  S\n                   1\n  2  3  4  5  6  7  8\n  9 10 11 12 13 14 15\n 16 17 18 19 20 21 22\n 23 24 25 26 27 28 29\n 30 31\n",
      "mutant_output": "   May 2021\n S  M Tu  W Th  F  S\n                   1\n  2  3  4  5  6  7\n  8  9 10 11 12 13 14\n 15 16 17 18 19 20 21\n 22 23 24 25 26 27 28\n 29 30 31\n",
      "explanation": "The mutant code modifies the output by printing a newline at different locations when generating the calendar. The test will fail because the mutant program prints the 'May 2021' line differently."
    }
  ]
},{
  "mutant_program": "muta87_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "6"
      ],
      "original_output": "June 2022\n S  M Tu  W Th  F  S\n     1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30\n",
      "mutant_output": "June 1900\n S  M Tu  W Th  F  S\n                1\n    2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30           \n",
      "explanation": "The mutant code changes the parameter validation of the 'm' variable in dispatch function, with a condition that looks for the parameter to be between 1 and 1900, which is absurd. In this case, the test outputs were different, with incorrect date in the mutant program."
    },
    {
      "input": [
        "-",
        "10"
      ],
      "original_output": "October 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n",
      "mutant_output": "October 1900\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31        \n",
      "explanation": "The test outputs were different, with incorrect date in the mutant program. However, the parameter 'm' was not as absud as the previous example. "
    },
    {
      "input": [
        "-",
        "3"
      ],
      "original_output": "March 2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31        \n",
      "mutant_output": "March 1900\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n",
      "explanation": "The test outputs were different, with incorrect date in the mutant program. The context is different that the original program."
    }
  ]
},{
  "mutant_program": "muta108_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [],
      "original_output": "January 2022\n S  M Tu  W Th  F  S\n                   1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n",
      "mutant_output": "",
      "explanation": "Both programs should display the calender for January 2022. In the original program, dispatch function handles the execution of code for the inputs, but in the mutant the function does not have a valid signature and does not have return statements. So, the mutant code will not produce any output."
    },
    {
      "input": [
        "-",
        "01",
        "2022"
      ],
      "original_output": "   January 2022\n S  M Tu  W Th  F  S\n                   1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n",
      "mutant_output": "",
      "explanation": "Both programs should display the calender for January 2022. In the original program, the driver function handles the execution of calender for input of format - 01 2022. In mutant, the dispatch function has an error in a line resulting in unexpected exit code 2 and thus it will not execute the rest of the code. Hence, the output will be empty."
    },
    {
      "input": [
        "01",
        "2022"
      ],
      "original_output": "   January 2022\n S  M Tu  W Th  F  S\n                   1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n",
      "mutant_output": "",
      "explanation": "Both programs should display the calender for January 2022. In the original program, the driver function handles the execution of calender for input of format 01 2022. In mutant, the dispatch function has an error in the exit code line resulting in unexpected exit code 2 and thus it will not execute the rest of the code. Hence, the output will be empty."
    }
  ]
},{
  "mutant_program": "muta109_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "11",
        "2021"
      ],
      "original_output": "   November 2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30\n\n",
      "mutant_output": "",
      "explanation": "The original program prints the calendar for the month and year passed as arguments in the input, while the mutant program does not print anything and returns an empty string. Therefore, the outputs are not equivalent."
    },
    {
      "input": [
        "4",
        "2022"
      ],
      "original_output": "   April 2022\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n\n",
      "mutant_output": "   April 2022\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n\n",
      "explanation": "The original program and the mutant program print the same calendar for the same input values. Therefore, the outputs are equivalent."
    }
  ]
},{
  "mutant_program": "muta110_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta111_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta112_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "10",
        "2021"
      ],
      "original_output": "   October 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n",
      "mutant_output": "   October 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n                    \n",
      "explanation": "The mutant program gave an empty space at the end of the calendar while the original didn't. This occurred because the mutation added a ';' at the beginning of the program which invalidates the initial include dependencies."
    },
    {
      "input": [
        "15",
        "2022"
      ],
      "original_output": "   March 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31\n",
      "mutant_output": "   March 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31    \n",
      "explanation": "The output looks the same as the original but there is an extra space at the end. It is the same issue as the first test. The semicolon at the beginning invalidates the complete dependency and causes malfunction."
    }
  ]
},{
  "mutant_program": "muta113_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "8"
      ],
      "original_output": "   August 2022\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31         \n\n",
      "mutant_output": "   August 2022\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31         \n\n",
      "explanation": "The mutation does not modify the output of the program"
    },
    {
      "input": [
        "13",
        "2022"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "The mutation does not modify the output of the program"
    },
    {
      "input": [
        "7",
        "10000"
      ],
      "original_output": "cal: 10000: Bad year.\n",
      "mutant_output": "cal: 10000: Bad year.\n",
      "explanation": "The mutation does not modify the output of the program"
    },
    {
      "input": [
        "-",
        "0"
      ],
      "original_output": "   February 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28                  \n\n",
      "mutant_output": "   February 0\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28                  \n\n",
      "explanation": "The mutation changes the year to be 0 and the format of the year is invalid, which can be seen in the output of the mutated program"
    }
  ]
},{
  "mutant_program": "muta114_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "1000"
      ],
      "original_output": "   January 1000\n S  M Tu  W Th  F  S\n                   1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31                      \n\n\n                1000\n\n         April                         May                           June\n S  M Tu  W Th  F  S            S  M Tu  W Th  F  S            S  M Tu  W Th  F  S\n              1  2  3                             1  2                             1\n 4  5  6  7  8  9 10            3  4  5  6  7  8  9            2  3  4  5  6  7  8\n11 12 13 14 15 16 17           10 11 12 13 14 15 16            9 10 11 12 13 14 15\n18 19 20 21 22 23 24           17 18 19 20 21 22 23           16 17 18 19 20 21 22\n25 26 27 28 29 30              24 25 26 27 28 29 30           23 24 25 26 27 28 29\n                                                                30             \n\n\n",
      "mutant_output": "   January 1000\n S  M Tu  W Th  F  S\n                   1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31                      \n\n\n",
      "explanation": "The original program outputs a full year calendar if the argument passed with dispatch equals to chars '-', if not, it outputs only a month. The mutant program forgot the 'goto xlong' statement, that directs the program output to the full calendar (12 months). This difference can be observed in the output of the programs. The input used has the expected output from the original code on 'original_output' field and the output from the mutated code on 'mutant_output' field."
    }
  ]
},{
  "mutant_program": "muta115_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta116_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "6",
        "1970"
      ],
      "original_output": "      June 1970\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30          \n\n                    \n",
      "mutant_output": "     June 1970\n S  M Tu  W Th  F  S\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30  1  2  3  4\n\n                    \n",
      "explanation": "The mutant code changes the format of the calendar output by swapping the day numbers in the last week of June with the first few days of July resulting in a different output. "
    },
    {
      "input": [
        "2",
        "1996"
      ],
      "original_output": "   February 1996\n S  M Tu  W Th  F  S\n          1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29       \n\n                    \n",
      "mutant_output": null,
      "explanation": "The mutant code doesn't have any changes that would impact the month of February so the output of both programs is expected to be the same."
    }
  ]
},{
  "mutant_program": "muta117_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta118_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-"
      ],
      "original_output": "You must supply a month and year or the -y flag, or nothing at all\n",
      "mutant_output": "You must supply a month and year or the -y flag, or nothing at all\n",
      "explanation": "Both programs have equivalent behavior when no arguments are provided, but when '-' flag is used, the original program prints a message requesting a month argument while the mutant program prints nothing and crashes"
    },
    {
      "input": [
        "13",
        "2021"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "Both programs have equivalent behavior when an invalid month argument is provided"
    }
  ]
},{
  "mutant_program": "muta119_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta132_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "2022"
      ],
      "original_output": "   January 2022\n S  M Tu  W Th  F  S\n                        1     2\n   3  4  5  6  7  8  9\n  10 11 12 13 14 15 16\n  17 18 19 20 21 22 23\n  24 25 26 27 28 29 30\n  31                  \n                        \n\n\n",
      "mutant_output": "   January 2022\n S  M Tu  W Th  F  S\n                        1     2\n   3  4  5  6  7  8  9\n  10 11 12 13 14 15 16\n  17 18 19 20 21 22 23\n  24 25 26 27 28 29 30\n  31                  \n                        \n\n\n",
      "explanation": "The original program and the mutant program give the same output for the same input. This happens because there is only one non-deterministic change in the code, which is the modification of an if statement to include an asymmetric boundary "
    },
    {
      "input": [
        "1",
        "99999"
      ],
      "original_output": "cal: 99999: Bad year.\n",
      "mutant_output": "cal: 99999: Bad year.\n",
      "explanation": "The original program and the mutant program give the same output for the same input. This happens because the mutant program only relaxes the lower boundary of the year argument of the calendar for dispatch, but the upper boundary does not change. This is not enough to change the output of the program."
    },
    {
      "input": [
        "-",
        "-1"
      ],
      "original_output": "cal: -1: Bad year.\n",
      "mutant_output": "cal: -1: Bad year.\n",
      "explanation": "The original program and the mutant program give the same output for the same input. This happens because the mutant program only tightens the upper boundary of the year argument of the calendar for dispatch, but the lower boundary does not change. This is not enough to change the output of the program."
    },
    {
      "input": [
        "13",
        "2022"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "The original program and the mutant program give the same output for the same input. This happens because the mutant program does not change how the program handles invalid arguments for the month parameter."
    }
  ]
},{
  "mutant_program": "muta133_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "2022"
      ],
      "original_output": "\n\n\n                                2022\n\n         January               February               March\n S  M Tu  W Th  F  S    S  M Tu  W Th  F  S    S  M Tu  W Th  F  S\n                   1       1  2  3  4  5             1  2  3  4  5\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\n23 24 25 26 27 28     27 28                 27 28 29 30 31\n30 31\n\n\n",
      "mutant_output": "\n\n\n                                \n\n         January               February               March\n S  M Tu  W Th  F  S    S  M Tu  W Th  F  S    S  M Tu  W Th  F  S\n                   1       1  2  3  4  5             1  2  3  4  5\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\n23 24 25 26 27 28     27 28                 27 28 29 30 31\n30 31\n\n\n",
      "explanation": "The original output is for a specific year of 2022. The mutant implementation output is empty. For argument validation, it checks if the year is less than or equal to 9999, which is different than the original that checks a range from 1 to 9999. "
    },
    {
      "input": [
        "-",
        "1894"
      ],
      "original_output": "cal: 1894: Bad year.\n",
      "mutant_output": "cal: 1894: Bad year.\n",
      "explanation": "Both the original program and the mutant implementation outputs are the same and hold true under the given condition."
    },
    {
      "input": [
        "13",
        "2023"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "Both the original program and the mutant implementation outputs are the same and hold true under the given condition."
    }
  ]
},{
  "mutant_program": "muta168_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "3"
      ],
      "original_output": "   March 2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31        \n\n",
      "mutant_output": "",
      "explanation": "In the original program the function stops running if an entered year is greater than 9999, but in the mutant code, the return value for that same input is 0, making it impossible to use the mutant code. "
    },
    {
      "input": [
        "9",
        "1995"
      ],
      "original_output": "   September 1995\n S  M Tu  W Th  F  S\n                1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30     \n\n",
      "mutant_output": "",
      "explanation": "The original program stops running with exit code 2 if an entered year is greater than 9999, but in the mutant code, it does not exit and returns 0 as a return value. The input tested has a valid year but the exit behavior is different so that we cannot use the mutant program. "
    },
    {
      "input": [
        "-",
        "2022"
      ],
      "original_output": "   August 2022\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31        \n\n",
      "mutant_output": "   August 2022\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23d0-0,6 +0,6 24 25 26 27\n28 29 30 31        \n\n",
      "explanation": "The mutant program exchanges an exit statement with a parenthesis, causing the program to try to execute the (exit(0)) as if it were a function, but exit cannot be used as a function in this way, causing the program to continue as if nothing happened, thus changing the output. "
    }
  ]
},{
  "mutant_program": "muta169_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "2",
        "2021"
      ],
      "original_output": "   February 2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28\n\n\n",
      "mutant_output": "dispatch:1: error: Bad option character.\n",
      "explanation": "The mutant program has a syntax error that resulted in a crash of the program when passing an incorrect command line argument."
    },
    {
      "input": [
        "13",
        "2021"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "Both programs detect when a user enters an invalid month and display the same error message."
    },
    {
      "input": [
        "2",
        "10000"
      ],
      "original_output": "cal: 10000: Bad year.\n",
      "mutant_output": "Use 1-9999 for year.\n",
      "explanation": "The original program checks that the year value entered is between 1 and 9999 and displays the same error message as the mutated program, but the wording is different."
    },
    {
      "input": [
        "2021"
      ],
      "original_output": "   August 2021\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31\n\n\n",
      "mutant_output": "   August 2021\n S  M Tu  W Th  F  S\n\n\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31\n\n\n",
      "explanation": "The mutated program omits to print the first line of the month of August in the output resulting in some character variability."
    }
  ]
},{
  "mutant_program": "muta170_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "09",
        "2022"
      ],
      "original_output": "   September 2022\n S  M Tu  W Th  F  S\n            1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30   \n\n",
      "mutant_output": "   September 2022\n S  M Tu  W Th  F  S\n            1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30   \n\n",
      "explanation": "The mutant code is equivalent to the original program code for this test case. Both outputs are the same. "
    },
    {
      "input": [
        "-",
        "13",
        "1751"
      ],
      "original_output": "cal: 1751: Bad year.\n",
      "mutant_output": "cal: 1751: Bad year.\n",
      "explanation": "The mutant code is equivalent to the original program code for this test case. Both outputs are the same. "
    },
    {
      "input": [
        "13",
        "5000"
      ],
      "original_output": "   December 5000\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n\n",
      "mutant_output": "   December 5000\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n\n",
      "explanation": "The mutant code is equivalent to the original program code for this test case. Both outputs are the same. "
    }
  ]
},{
  "mutant_program": "muta171_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "1"
      ],
      "original_output": "   January 2022\n S  M Tu  W Th  F  S\n                        1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31  \n\n",
      "mutant_output": "   January 2022\n S  M Tu  W Th  F  S\n                        1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31  \n\n",
      "explanation": "Both programs should output the same for this input"
    },
    {
      "input": [
        "7",
        "10000"
      ],
      "original_output": "cal: 10000: Bad year.\n",
      "mutant_output": "",
      "explanation": "The mutant program produces no output for this invalid input, while the original program outputs an error message"
    },
    {
      "input": [
        "13",
        "2022"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "",
      "explanation": "The mutant program produces no output for this invalid input, while the original program outputs an error message"
    }
  ]
},{
  "mutant_program": "muta172_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "5",
        "2020"
      ],
      "original_output": "   May 2020\n S  M Tu  W Th  F  S\n                 1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n",
      "mutant_output": "",
      "explanation": "The mutant code changes the exit status from 2 to 9999 when the year input is not valid. This means the program will not successfully terminate and print any output. Therefore, the mutant program is not equivalent to the original program, and an empty string is returned instead of the expected output."
    },
    {
      "input": [
        "12",
        "1999"
      ],
      "original_output": "   December 1999\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31\n\n\n",
      "mutant_output": "  Decemb8r 1999\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31\n\n\n",
      "explanation": "The original program prints the correct output corresponding to December 1999, while the mutated program changes the spelling of 'December' to 'Decemb8r'. This is because the 'e' character in December is replaced by an '8'. As a result, the mutant output is not equivalent to the original output."
    }
  ]
},{
  "mutant_program": "muta173_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "3"
      ],
      "original_output": "   March 2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31\n\n",
      "mutant_output": "",
      "explanation": "Incorrect command line argument detection in mutant code leads to no output"
    },
    {
      "input": [
        "13",
        "2021"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "Both programs return same error message"
    },
    {
      "input": [
        "2",
        "99999"
      ],
      "original_output": "cal: 99999: Bad year.\n",
      "mutant_output": "cal: 99999: Bad year.\n;exit",
      "explanation": "Mutant code has exit(24) which causes an additional print and exit"
    }
  ]
},{
  "mutant_program": "muta174_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "\n   May 2021\n S  M Tu  W Th  F  S\n                    1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n\n",
      "mutant_output": "\n   May 2021\n S  M Tu  W Th  F  S\n                    1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n\n",
      "explanation": "Both the original and the mutant program produce the same output for this input"
    },
    {
      "input": [
        "13",
        "2021"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "Both the original and the mutant program produce the same output for this input"
    },
    {
      "input": [
        "12",
        "10000"
      ],
      "original_output": "cal: 10000: Bad year.\n",
      "mutant_output": "cal: 10000: Bad year.\n",
      "explanation": "Both the original and the mutant program produce the same output for this input"
    },
    {
      "input": [
        "-",
        "13"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "Both the original and the mutant program produce the same output for this input"
    },
    {
      "input": [
        "10",
        "1750"
      ],
      "original_output": "",
      "mutant_output": "cal: 1750: Bad year.\n",
      "explanation": "The mutant program correctly detects a bad year and outputs an error message, while the original program continues executing the program"
    }
  ]
},{
  "mutant_program": "muta175_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta176_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta177_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "01",
        "2018"
      ],
      "original_output": "   January 2018\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31         \n\n",
      "mutant_output": "Bad year.\n",
      "explanation": "The mutant program adds a line that causes the program to exit when the year is invalid, resulting in the incorrect output for invalid years."
    },
    {
      "input": [
        "-",
        "12",
        "2021"
      ],
      "original_output": "   December 2021\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31    \n\n",
      "mutant_output": "   December 2021\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31    \n\n",
      "explanation": "The mutant program introduces a stray semicolon, resulting in the same correct output as the original program."
    }
  ]
},{
  "mutant_program": "muta178_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "   May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31         \n\n",
      "mutant_output": "   May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19  <<  21>>\n22 23 24 25 26 27 28\n29 30 31         \n\n",
      "explanation": "The mutant program has changed the value of april to 19 in line 36, which adds extra positions on May, thus creating a different output."
    },
    {
      "input": [
        "-",
        "2"
      ],
      "original_output": "  February 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28            \n\n",
      "mutant_output": "  February 2022\n S  M Tu  W Th  F  S\n << 1>> << 2>> << 3>> << 4>> << 5>>\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28            \n\n",
      "explanation": "The mutant program is outputting a few 1's before the month starts - it looks like a mutation of the line 24 component with changes on the ternary operator."
    }
  ]
},{
  "mutant_program": "muta179_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "10",
        "2022"
      ],
      "original_output": "   October 2022\n S  M Tu  W Th  F  S\n                1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n\n\n",
      "mutant_output": "",
      "explanation": "The mutant program includes a syntax error in line 39, where instead of executing an exit function, it calls the exit code as a function argument. This causes the program to terminate abruptly when the year entered is bad."
    },
    {
      "input": [
        "-",
        "10"
      ],
      "original_output": "   October 2021\n S  M Tu  W Th  F  S\n                1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n\n\n",
      "mutant_output": "   October 10\n S  M Tu  W Th  F  S\n          1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31\n\n\n",
      "explanation": "The input value - is expecting the year as an argument; however, the mutant program is not skipping the hyphen, which causes atoi to return 0. Therefore the year for October is being interpreted as 0, resulting in a different calendar output."
    }
  ]
},{
  "mutant_program": "muta213_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "   May 2021\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n",
      "mutant_output": "   May 2021\n S  M Tu  W Th  F  S\n  1  2  3  4  5  6  7\n  8  9 1011 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n",
      "explanation": "The mutant code changes the value of i from being initialized to 0 to being initialized to null character '\\0'. This causes the first printed date to be changed to 2 digits instead of one, resulting in the rest of the calendar being misaligned with the days of the week. Test case inputs -5 are accepted in both programs as negative numbers are not considered."
    },
    {
      "input": [
        "3",
        "2022"
      ],
      "original_output": "   March 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31\n",
      "mutant_output": "   March 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31\n",
      "explanation": "Both outputs are equivalent; no changes were made to the code in this case."
    }
  ]
},{
  "mutant_program": "muta238_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta262_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "3"
      ],
      "original_output": "\n   March 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31\n\n",
      "mutant_output": "   March 2022\n S  M Tu  W Th  F  S\n       1  2   23  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31\n\n",
      "explanation": "The mutant function pstr now has the wrong length value. It should be 24 but it is now 23. The output in the days row (line 3) is incorrect."
    },
    {
      "input": [
        "4",
        "2022"
      ],
      "original_output": "   April 2022\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n\n",
      "mutant_output": "   April 2022\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29  \n\n",
      "explanation": "The output is correct for the days' row but the new line character is not printed for april 29."
    }
  ]
},{
  "mutant_program": "muta264_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "1"
      ],
      "original_output": "   January 2022\n S  M Tu  W Th  F  S\n                         1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n",
      "mutant_output": "   January 2022\n S  M Tu  W Th  F  S\n                         1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n",
      "explanation": "The original and the mutant program produce the same output for this test case."
    },
    {
      "input": [
        "-",
        "3"
      ],
      "original_output": "   March 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31\n\n",
      "mutant_output": "   March 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31\n\n",
      "explanation": "The original and the mutant program produce the same output for this test case."
    },
    {
      "input": [
        "-",
        "4"
      ],
      "original_output": "   April 2022\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n\n",
      "mutant_output": "   April 2022\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n\n",
      "explanation": "The original and the mutant program produce the same output for this test case."
    },
    {
      "input": [
        "-",
        "13"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "The original and the mutant program correctly output an error message for an invalid month input."
    },
    {
      "input": [
        "-",
        "4",
        "13000"
      ],
      "original_output": "cal: 13000: Bad year.\n",
      "mutant_output": "cal: 13000: Bad year.\n",
      "explanation": "The original and the mutant program correctly output an error message for an invalid year input."
    }
  ]
},{
  "mutant_program": "muta265_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "5",
        "2022"
      ],
      "original_output": "    May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31           \n\n\n",
      "mutant_output": "    May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31           \n\n\n",
      "explanation": "Both outputs are the same, since the input parameters are correct so that both functions behave in the same way"
    },
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "    May 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31                    \n",
      "mutant_output": null,
      "explanation": "Mutant code has an exit(1) statement in the for loop which causes the program to exit in the middle of the loop"
    }
  ]
},{
  "mutant_program": "muta266_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": null,
      "mutant_output": 1900,
      "explanation": "The original program would execute driver(5,2,[-,5]). The mutant program would execute driver(5,2,[-,5]); however, it would then execute 'exit(1900)', which would return a different value."
    },
    {
      "input": [
        "3",
        "2021"
      ],
      "original_output": "   March 2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31\n\n\n",
      "mutant_output": "   March 2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31  \n\n\n",
      "explanation": "The original program would return a correctly formatted calendar with an extra newline at the end. The mutant program would return the same calendar but without the extra newline, causing the two to differ."
    }
  ]
},{
  "mutant_program": "muta267_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta268_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "10",
        "2022"
      ],
      "original_output": "   October 2022\n S  M Tu  W Th  F  S\n                1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n",
      "mutant_output": "   October 2022\n S  M Tu  W Th  F  S\n                1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n",
      "explanation": "The mutant program only presents a non-reachable statement being it the line 28 (exit(9999)). Therefore the program and the mutant program are equivalent. The test case runs as expected and therefore has the same output."
    },
    {
      "input": [
        "",
        "2015"
      ],
      "original_output": "   November 2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30\n\n\n",
      "mutant_output": "",
      "explanation": "The new mutant program does not identify the case where argc < 2 being it for the current month. It only evaluates only two cases, where argc = 2 and argc > 2. For the case where argc < 2, the output is empty. Therefore this test confirms that the new mutant program is not equivalent."
    }
  ]
},{
  "mutant_program": "muta269_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta270_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta271_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "3"
      ],
      "original_output": "   March 2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31         \n\n",
      "mutant_output": "   March 2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\nBAD 22 23 24 25 26 27\n28 29 30 31         \n\n",
      "explanation": "The mutant introduces the string 'BAD' after a month of 19 days, which is not correct. This test checks that the program can differentiate between a valid and an invalid month of the year."
    },
    {
      "input": [
        "-",
        "2"
      ],
      "original_output": "  February 2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28                  \n\n",
      "mutant_output": "  February 2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16RI 18 19 20\n21 22 23 24 25 26 27\n28                  \n\n",
      "explanation": "The mutant changes the string '16' to '16RI'. This is not a valid day representation and should not be printed. This test checks that the program can correctly identify and remove invalid data."
    },
    {
      "input": [
        "-",
        "15"
      ],
      "original_output": "cal: 15: Bad month.\n",
      "mutant_output": "cal: 15: Bad month.\n",
      "explanation": "Both programs should display the same error message when given an invalid month as input."
    }
  ]
},{
  "mutant_program": "muta272_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta273_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "12",
        "2022"
      ],
      "original_output": "   December 2022\n S  M Tu  W Th  F  S\n\n     1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31  \n\n",
      "mutant_output": "",
      "explanation": "The mutant program is missing an argument for the dispatch function and is not printing anything. Original program printed a calendar for December 2022."
    },
    {
      "input": [
        "2",
        "2022"
      ],
      "original_output": "   February 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28  \n",
      "mutant_output": "",
      "explanation": "The mutant program is missing a closing bracket in the pstr function causing a segmentation fault. Original program printed a calendar for February 2022."
    }
  ]
},{
  "mutant_program": "muta274_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "6"
      ],
      "original_output": "     August 2021\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7 \n 8  9 10 11 12 13 14 \n15 16 17 18 19 20 21 \n22 23 24 25 26 27 28 \n29 30 31 \n\n",
      "mutant_output": "Bad month.\n",
      "explanation": "When the first argument is a dash ('-') and the second argument is an integer (in this case 6), the original program calls the function 'driver' with arguments 6, argc and argv. The mutant program correctly calls the 'driver' function, but it does not handle the case where the first argument is a dash and the second argument is not a valid integer month"
    },
    {
      "input": [
        "13",
        "0"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "When the first argument is greater than 12, both the original and mutated programs generate a 'Bad month' error message."
    },
    {
      "input": [
        "6",
        "10000"
      ],
      "original_output": "cal: 10000: Bad year.\n",
      "mutant_output": "cal: 10000: Bad year.\n",
      "explanation": "When the second argument is greater than 9999, both the original and mutated programs generate a 'Bad year' error message."
    }
  ]
},{
  "mutant_program": "muta275_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "3"
      ],
      "original_output": "   March 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31\n",
      "mutant_output": null,
      "explanation": "The mutant code contains an intentional exit(46) statement that immediately terminates the program. Thus, the mutant program will not produce any output for any input."
    },
    {
      "input": [
        "10",
        "2022"
      ],
      "original_output": "   October 2022\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n",
      "mutant_output": null,
      "explanation": "The mutant code will not produce any output for any input due to the presence of the exit(46) statement."
    }
  ]
},{
  "mutant_program": "muta288_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "10",
        "2022"
      ],
      "original_output": "   October 2022\n S  M Tu  W Th  F  S\n                   1  2  3\n    4  5  6  7  8  9 10\n   11 12 13 14 15 16 17\n   18 19 20 21 22 23 24\n   25 26 27 28 29 30 31\n\n",
      "mutant_output": "cal: 10: Bad year.\n",
      "explanation": "The original program properly handles the input of month and year and prints the calendar for the given month and year, while the mutant program fails to properly handle the input of the year. The mutant program outputs an error message and does not print the calendar."
    },
    {
      "input": [
        "-",
        "12"
      ],
      "original_output": "   February 2022\n S  M Tu  W Th  F  S\n        1  2  3  4  5  6\n    7  8  9 10 11 12 13\n   14 15 16 17 18 19 20\n   21 22 23 24 25 26 27\n   28\n",
      "mutant_output": "   December 2022\n S  M Tu  W Th  F  S\n             1  2  3\n    4  5  6  7  8  9 10\n   11 12 13 14 15 16 17\n   18 19 20 21 22 23 24\n   25 26 27 28 29 30 31\n",
      "explanation": "The original and mutant program handles the argument of '-' correctly and prints the calendar of the current month."
    }
  ]
},{
  "mutant_program": "muta289_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "   May 2021\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n\n\n",
      "mutant_output": "   May 2021\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n\n\n",
      "explanation": "When the mutant's dispatch function is executed, it has a condition on lines 61-63 that will always evaluate to true, since it does not limit the value of input 'y' to 9999. Therefore, this mutant's output and the original's output will be equivalent, and this test verifies that assertion."
    },
    {
      "input": [
        "-",
        "10000"
      ],
      "original_output": "cal: 10000: Bad year.\n",
      "mutant_output": "cal: 10000: Bad year.\n",
      "explanation": "When the mutant's dispatch function receives an input value for 'y' greater than 9999, it will fail to execute correctly and return the error message 'cal: 10000: Bad year.' on the standard error output. This test verifies that the mutant has this behavior and the original does not."
    },
    {
      "input": [
        "0"
      ],
      "original_output": "   June 2021\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30\n\n\n",
      "mutant_output": "   June 2021\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30\n\n\n",
      "explanation": "This test confirms that both the original and the mutant execute correctly when receiving the input parameters '0' and no year, and return the same output for the same parameters."
    }
  ]
},{
  "mutant_program": "muta324_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta325_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "1",
        "2021"
      ],
      "original_output": "   January 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n",
      "mutant_output": "",
      "explanation": "The output is not the expected one. The mutant code has a syntax error at line 54, which results in the program terminating without printing anything. Thus, we do not even need a test set for this case"
    },
    {
      "input": [
        "13",
        "2020"
      ],
      "original_output": "   January 2020\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31\n\n",
      "mutant_output": "   January 2020\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31\n\n",
      "explanation": "The input for this test is for a normal run of the program, which prints the month of January 2020 in the usual cal format. Both the original and the mutant_codes, given this input, provide identitcal output, so they are equivalent."
    },
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "   September 2022\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30\n\n",
      "mutant_output": "   September 2022\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30\n\n",
      "explanation": "The input for this test is for a normal run of the program where the user wants to see the current month. Both the original and the mutant_codes, given this input, provide identitcal output, so they are equivalent."
    }
  ]
},{
  "mutant_program": "muta345_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta373_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "   May 2021\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31                 \n\n\n",
      "mutant_output": "   May 2021\n S  M Tu  W Th  F  S\n       1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31           \n\n\n",
      "explanation": "The mutant code changes the order of the days of the week in the output, which makes it not equivalent to the original program. However, the outputs still display the correct dates for May 2021, just with the weekdays switched around."
    },
    {
      "input": [
        "-",
        "13",
        "2022"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "The input month 13 is invalid for both the mutant and original programs, resulting in the same error message."
    },
    {
      "input": [
        "6",
        "2030"
      ],
      "original_output": "   June 2030\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30                 \n",
      "mutant_output": "   June 2030\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30                 \n",
      "explanation": "The input of June 2030 is valid for both the original and mutant programs, resulting in the same output."
    }
  ]
},{
  "mutant_program": "muta381_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "7"
      ],
      "original_output": "   July 2021\n S  M Tu  W Th  F  S\n              1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n",
      "mutant_output": "   July 2021\n S  M Tu  W Th  F  S\n              1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n",
      "explanation": "Both outputs are equivalent because there is no mutant change in the logic"
    },
    {
      "input": [
        "-",
        "13"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "Both outputs are equivalent because there is no mutant change in the logic"
    },
    {
      "input": [
        "13",
        "19999"
      ],
      "original_output": "cal: 19999: Bad year.\n",
      "mutant_output": "cal: 19999: Bad year.\n",
      "explanation": "Both outputs are equivalent because there is no mutant change in the logic"
    },
    {
      "input": [],
      "original_output": "",
      "mutant_output": "",
      "explanation": "Both outputs are equivalent because there is no mutant change in the logic"
    },
    {
      "input": [
        "-",
        "07"
      ],
      "original_output": "   July 2021\n S  M Tu  W Th  F  S\n              1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n",
      "mutant_output": "   July 2021 \nS  M Tu  W Th  F  S \n              1  2  3 \n 4  5  6  7  8  9 10 \n11 12 13 14 15 16 17 \n18 19 20 21 22 23 24 \n25 26 27 28 29 30 31 \n",
      "explanation": "The mutated program insert extra spaces in the output"
    }
  ]
},{
  "mutant_program": "muta388_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "    May 2021\n S  M Tu  W Th  F  S\n                   1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31              ",
      "mutant_output": "    May 2021\n S  M Tu  W Th  F  S\n                  12 12\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31              ",
      "explanation": "The mutated program changes the values on an array on line 36 from 6*72 to 12*72, as a result, when an argument of '-', '5' is passed to the program, instead of returning the calendar of May 2021, it returns an erroneous output."
    },
    {
      "input": [
        "-",
        "2",
        "2050"
      ],
      "original_output": "  February 2050\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27              ",
      "mutant_output": "  February 2050\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27              ",
      "explanation": "The input parameters do not hit the mutation that exists in the program."
    }
  ]
},{
  "mutant_program": "muta390_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        1,
        2000
      ],
      "original_output": "January 2000\n S  M Tu  W Th  F  S\n                   1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n\n",
      "mutant_output": "January 2000\n S  M Tu  W Th  F  S\n                   1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n\n",
      "explanation": "The input gives correct arguments for calendar and produces the same output for both programs."
    },
    {
      "input": [
        12,
        1950
      ],
      "original_output": "   December 1950\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n\n",
      "mutant_output": "   December 1950\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n\n",
      "explanation": "The input gives correct arguments for calendar and produces the same output for both programs."
    },
    {
      "input": [
        "arg1",
        "arg2"
      ],
      "original_output": "cal: arg1: Bad month.\n",
      "mutant_output": "cal: arg1: Bad month.\n",
      "explanation": "The input gives bad arguments for the months; produces same output for both programs."
    }
  ]
},{
  "mutant_program": "muta394_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta394_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta395_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "5",
        "2021"
      ],
      "original_output": "   May 2021\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31              \n\n",
      "mutant_output": "   May 2021\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31              \n\n",
      "explanation": "The input is a valid argument for both the original and mutant programs, leading to the exact same output, meaning that the mutant program is equivalent to the original."
    },
    {
      "input": [
        "13",
        "2022"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "The input is an invalid argument for both the original and mutant programs, leading to the exact same error message, meaning that the mutant program is equivalent to the original."
    }
  ]
},{
  "mutant_program": "muta409_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta549_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta600_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "5",
        "2021"
      ],
      "original_output": "   May 2021\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n\n",
      "mutant_output": "   May 2021\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n\nabc",
      "explanation": "The original program and the mutant program differ in the last line of the mutant program's output. The mutant program added an 'abc' string. "
    },
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "",
      "mutant_output": "",
      "explanation": "Both programs should output nothing because there is no year provided. "
    },
    {
      "input": [
        "13",
        "2021"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "Both programs should output an error message because 13 is not a valid month."
    }
  ]
},{
  "mutant_program": "muta601_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "2022"
      ],
      "original_output": "   May 2022\n S  M Tu  W Th  F  S\n                   1  2  3  4  5  6\n  7  8  9 10 11 12 13\n 14 15 16 17 18 19 20\n 21 22 23 24 25 26 27\n 28 29 30 31\n",
      "mutant_output": "   May 2022\n S  M Tu  W Th  F  S\n                   1  2  3  4  5  6\n  7  8  9 10 11 12 13\n 14 15 16 17 18 19 20\n 21 22 23 24 25 26 27\n 28 29 :)0\n\n",
      "explanation": "The mutated program has a syntax error on line 99 that corrupts the output. Originally the program printed the calendar for May 2022 but the mutated program printed the calendar for May 2022 with a mistake on the 29th of the month."
    },
    {
      "input": [
        "-",
        "2021"
      ],
      "original_output": "   September 2021\n S  M Tu  W Th  F  S\n          1  2  3  4\n  5  6  7  8  9 10 11\n 12 13 14 15 16 17 18\n 19 20 21 22 23 24 25\n 26 27 28 29 30\n",
      "mutant_output": "   September 2021\n S  M Tu  W Th  F  S\n          1  2  3  4\n  5  6  7  8  9 10 11\n 12 13 14 15 16 17 18\n 19 20 21 22 23 24 25\n26 27 28 29    :)0\n",
      "explanation": "The mutated program has a syntax error in line 99 that corrupts the output. Originally the program printed the calendar for September 2021. The mutated program printed the calendar for September 2021 with a mistake on the 29th of the month."
    }
  ]
},{
  "mutant_program": "muta602_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta603_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "2",
        "2000"
      ],
      "original_output": "   February 2000\n S  M Tu  W Th  F  S\n         1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29\n\n\n",
      "mutant_output": "   February 2000\n S  M Tu  W Th  F  S\n         1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29\n\n\n",
      "explanation": "Both programs produce the same output with this input, so they are equivalent"
    },
    {
      "input": [
        "18",
        "2022"
      ],
      "original_output": "cal: 18: Bad month.\n",
      "mutant_output": "cal: 18: Bad month.\n",
      "explanation": "Both programs produce the same error message with this input, so they are equivalent"
    },
    {
      "input": [
        "-",
        "1"
      ],
      "original_output": "cal: 1: Bad year.\n",
      "mutant_output": "cal: 1: Bad year.\nexit(12) ;\n",
      "explanation": "The mutant program adds an extra exit command after printing the error message, resulting in a different output"
    }
  ]
},{
  "mutant_program": "muta604_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta605_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "1"
      ],
      "original_output": "   January 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n",
      "mutant_output": "   January 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n                     \n",
      "explanation": "The mutant program changes the line 84 from '(exit(0));' to '(exit(24));', so the mutant program always exits with status code 24. In this case, the original program returns successfully, while the mutant program exits with status code 24, producing an empty line after the last day of January."
    }
  ]
},{
  "mutant_program": "muta606_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta607_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "6"
      ],
      "original_output": "   June 2021\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30\n",
      "mutant_output": "   June 2021\n S  M Tu  W Th  F  S\n          1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 \n 13",
      "explanation": "The mutant code has an added semicolon and an added space in one of the lines of the output. The test is to request the output of the calendar on June 2021, when the flag - and 6 are entered. The original output is the correct calendar for June and the mutant output is the incorrect calendar with a space in one of the lines and the extra number 13 below it."
    },
    {
      "input": [
        "-",
        "12"
      ],
      "original_output": "   December 2021\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31\n",
      "mutant_output": "   December 2021\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 17 18 19\n20 21 22 23 24 25\n26 27 28 29 30 31 \n",
      "explanation": "The mutant code has removed the 16th of December from the output. The test is to request the output of the calendar on December 2021, when the flag - and 12 are entered. The original output is the correct calendar for December and the mutant output is missing the 16th of December."
    }
  ]
},{
  "mutant_program": "muta608_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta609_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "4"
      ],
      "original_output": [
        "  February 4",
        " S  M Tu  W Th  F  S",
        " 1  2  3  4  5  6  7",
        " 8  9 10 11 12 13 14",
        "15 16 17 18 19 20 21",
        "22 23 24 25 26 27 28"
      ],
      "mutant_output": [
        "  February 4",
        " S  M Tu  W Th  F  S",
        " 1  2  3  4  0  6 ,,",
        " 8  9 10 11 12 13 l4",
        "15 16 17 18 19 20 21",
        "22 23 24 25 26 27 28",
        ""
      ],
      "explanation": "The mutant changes some values of the cal matrix, changing the number in some cells and even placing commas and other characters. This results in a different output compared to the original program."
    },
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": [
        "     May 2021",
        " S  M Tu  W Th  F  S",
        "                   1",
        " 2  3  4  5  6  7  8",
        " 9 10 11 12 13 14 15",
        "16 17 18 19 20 21 22",
        "23 24 25 26 27 28 29",
        "30 31"
      ],
      "mutant_output": [
        "     May 2021",
        " S  M Tu  W Th  F  S",
        " 1        5  6  7  8",
        " 9 10 11 12 13 14 15",
        "16 17 18 19 20 21 22",
        "23 24 25 26 27 28 29",
        "30 31",
        ""
      ],
      "explanation": "The mutant changes some values of the cal matrix, removing non-important characters and changing its format, this alteration results in a visually different output. However, the information presented is still correct."
    }
  ]
},{
  "mutant_program": "muta610_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "   May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31           \n",
      "mutant_output": "",
      "explanation": "The mutant code contains a non-working statement that forces an exit to the program with code 23, thus stopping any output. This means that there is no output for any input in the mutated program. The original program, when given input ['-','5'], correctly outputs the calendar for May 2022."
    },
    {
      "input": [
        "6",
        "2021"
      ],
      "original_output": "   June 2021\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30        \n",
      "mutant_output": "",
      "explanation": "The mutant code contains a non-working statement that forces an exit to the program with code 23, thus stopping any output. This means that there is no output for any input in the mutated program. The original program, when given input ['6','2021'], correctly outputs the calendar for June 2021."
    }
  ]
},{
  "mutant_program": "muta611_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "2022"
      ],
      "original_output": "   January 2022\n S  M Tu  W Th  F  S\n                   1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31                 \n\n",
      "mutant_output": "   January 2022\n S  M Tu  W Th  F  S\n                   1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31                 \n\n",
      "explanation": "Both programs are equivalent for this input and output combination."
    },
    {
      "input": [
        "13",
        "99999"
      ],
      "original_output": "cal: 99999: Bad year.\n",
      "mutant_output": "cal: 99999: Bad year.\n",
      "explanation": "Both programs are equivalent for this input and output combination."
    },
    {
      "input": [
        "2",
        "0000"
      ],
      "original_output": "cal: Bad year.\n",
      "mutant_output": "cal: Bad year.\n",
      "explanation": "Both programs are equivalent for this input and output combination."
    },
    {
      "input": [
        "-",
        "1800"
      ],
      "original_output": "   January 1800\n S  M Tu  W Th  F  S\n           1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31\n\n",
      "mutant_output": "   January 1800\n S  M Tu  W Th  F  S\n           1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31\n\n                                 ;\n",
      "explanation": "Both programs are not equivalent for this input and output combination. The mutant program adds a semicolon to the last line on the output for the year 1800."
    }
  ]
},{
  "mutant_program": "muta728_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta832_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "2",
        "1000"
      ],
      "original_output": "   February 1000\n S  M Tu  W Th  F  S\n          1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28          \n\n\n",
      "mutant_output": "cal: Bad year.\n",
      "explanation": "The original program correctly displays the calendar of February in the year 1000, while the mutant program fails to handle the input year and outputs an error message."
    },
    {
      "input": [
        "-",
        "1"
      ],
      "original_output": "   October 2022\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31                \n\n\n",
      "mutant_output": "cal: Bad year.\n",
      "explanation": "The original program correctly displays the calendar of October of the current year, while the mutant program fails to handle the input year and outputs an error message."
    }
  ]
},{
  "mutant_program": "muta1482_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "5",
        "2021"
      ],
      "original_output": "     May 2021\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31             \n\n\n",
      "mutant_output": "     May 2021\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31          \n\n\n",
      "explanation": "The mutated code changed the for loop in the dispatch function of the original code. The condition in the for loop of the mutated code, 'i *= 0' instead of 'i=0', results in i being 0 for every iteration of the loop, making it print only the first line of the output instead of all 6 weeks. This test demonstrates that the two programs are not equivalent and generate different outputs."
    },
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "     May 2021\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31             \n\n\n",
      "mutant_output": "     May 2021\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31             \n\n\n",
      "explanation": "The '- 5' flag passed as input in this test prints the calendar for the month of May 2021, which is the same for both original and mutant code. Therefore, the two programs are equivalent."
    }
  ]
},{
  "mutant_program": "muta1492_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        6,
        2021
      ],
      "original_output": "   June 2021\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30\n\n",
      "mutant_output": "6  2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5\n 4  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30\n\n",
      "explanation": "The original program code prints June 2021 and then prints out the calendar of June 2021. The month and year are printed in a specific format, followed by the calendar with dates, set on a grid of 7 days horizontally. The mutant program code mistakenly prints 6 2021 instead of June 2021 and prints irrelevant line offsets in the calendar (4, 6), which causes an entirely different calendar to be printed. Therefore, the mutant program code output is different from the original program code output."
    },
    {
      "input": [
        13,
        2022
      ],
      "original_output": "   January 2022\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n\n",
      "mutant_output": "13  2022\n S  M Tu  W Th  F  S\n          1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31\n\n",
      "explanation": "The original program code prints January 2022 and then prints out the calendar of January 2022. The month and year are printed in a specific format, followed by the calendar with dates set on a grid of 7 days horizontally. The mutant program code mistakenly prints 13 2022 instead of January 2022 and prints irrelevant line offsets in the calendar (5), which causes an entirely different calendar to be printed. Therefore, the mutant program code output is different from the original program code output."
    }
  ]
},{
  "mutant_program": "muta1497_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-"
      ],
      "original_output": "Output of current month calendar",
      "mutant_output": "Output of current month calendar",
      "explanation": "Both original and mutant programs will output the current month's calendar if run without any arguments"
    },
    {
      "input": [
        "-",
        "5",
        "2022"
      ],
      "original_output": "Output of May 2022 calendar",
      "mutant_output": "Output of May 2022 calendar",
      "explanation": "Both original and mutant programs will output the calendar for May 2022 if run with arguments '- 5 2022'"
    },
    {
      "input": [
        "2022"
      ],
      "original_output": "Output of year 2022 calendar",
      "mutant_output": "Mutated output of year 2022 calendar",
      "explanation": "For this test case, the original program will output a calendar of the whole year 2022, while the mutant program will output a slightly different format for the same year"
    }
  ]
},{
  "mutant_program": "muta1502_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta1507_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [],
      "original_output": "   June 2021\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30\n\n",
      "mutant_output": "   June 2021\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n\n",
      "explanation": "The mutant code changes some date values. The original program returns the correct month, dates, and day of the week. However, the mutant code changes some of the dates and the weeks where they fall, which results in a different output."
    },
    {
      "input": [
        "-",
        "12"
      ],
      "original_output": "   June 2021\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30\n\n",
      "mutant_output": "   December 2021\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31\n\n",
      "explanation": "The original program returns the correct month, dates, and day of the week. The mutant program likewise returns the correct values. Both programs are equivalent."
    }
  ]
},{
  "mutant_program": "muta1527_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "   May 2021\n S  M Tu  W Th  F  S\n                         1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31             \n",
      "mutant_output": "",
      "explanation": "The mutant code has a typo in the dispatch function, as there's no initialization for the variable 'i', which causes it to be a random value. This value is then masked with zero at the beginning of the loop statement, executing only once and then falling to the last print statement that doesn't have any data. This causes an empty output, unlike the original program which prints the calendar."
    },
    {
      "input": [
        "2",
        "2021"
      ],
      "original_output": "   February 2021\n S  M Tu  W Th  F  S\n     1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28                  \n",
      "mutant_output": "",
      "explanation": "The input for the test passes normal validation for month and year. Thus, any output is better than no output in this case. As the output would change depending on the random value of 'i' it is not possible to predict it for this test."
    },
    {
      "input": [
        "20",
        "8000"
      ],
      "original_output": "",
      "mutant_output": "",
      "explanation": "The inputs don't pass validation in both original and mutant code, so no output is expected."
    }
  ]
},{
  "mutant_program": "muta1533_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta1536_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "   May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31          \n\n\n",
      "mutant_output": "   May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31          \n\n\n",
      "explanation": "The mutant code didn't change the output of the program."
    },
    {
      "input": [
        "-",
        "13"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "The input for month is out of bounds, so both original and mutant programs output the same error message."
    },
    {
      "input": [
        "13",
        "2022"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "The input for month is out of bounds, so both original and mutant programs output the same error message."
    },
    {
      "input": [
        "May",
        "2022"
      ],
      "original_output": "cal: May: Bad month.\n",
      "mutant_output": "cal: May: Bad month.\n",
      "explanation": "The input for month is non-numeric, so both original and mutant programs output the same error message."
    }
  ]
},{
  "mutant_program": "muta1539_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta1542_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta1568_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [],
      "original_output": "cal: Bad month.\n",
      "mutant_output": "cal: Bad month.\n",
      "explanation": "Both programs output an error message when no arguments are given"
    },
    {
      "input": [
        "13",
        "2020"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "Both programs output an error message when an invalid month argument is given"
    },
    {
      "input": [
        "6",
        "0"
      ],
      "original_output": "cal: 0: Bad year.\n",
      "mutant_output": "cal: 0: Bad year.\n",
      "explanation": "Both programs output an error message when an invalid year argument is given"
    },
    {
      "input": [
        "2",
        "2020"
      ],
      "original_output": "   February 2020\n S  M Tu  W Th  F  S\n                    1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n\n\n",
      "mutant_output": "   February 2020\n S  M Tu  W Th  F  S\n                    1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n\n\n",
      "explanation": "Both programs output the correctly formatted calendar for February 2020"
    }
  ]
},{
  "mutant_program": "muta1569_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "13",
        "2021"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad year.\n",
      "explanation": "The mutant code has a mistake in the if statement that checks if the month is valid or not. Instead of checking if the month is between 1 and 12, the mutant code checks if it's less than 1 and greater than 12, both conditions need to be verified, but the mutant code only verifies if the subtraction between them is 0 or not."
    },
    {
      "input": [
        "9",
        "2022"
      ],
      "original_output": "   September 2022\n S  M Tu  W Th  F  S\n\t\t\t 1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30\n\n\t\t\tOctober           November          December\n S  M Tu  W Th  F  S  S  M Tu  W Th  F  S  S  M Tu  W Th  F  S\n\t\t\t\t\t\t\t1  2  3  4  5  6  7\n 8  9 10 11 12 13 14  6  7  8  9 10 11 12\n13 14 15 16 17 18 19  13 14 15 16 17 18 19\n20 21 22 23 24 25 26  20 21 22 23 24 25 26\n27 28 29 30        27 28 29 30           \n\n\n",
      "mutant_output": "",
      "explanation": "The original program correctly generates the calendar for the month of September and for the last three months in the year, but the mutant program is faulty and outputs nothing. We do not need to predict the result of the mutant code since it does not work correctly."
    }
  ]
},{
  "mutant_program": "muta1573_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "\n   May 2021\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n",
      "mutant_output": "\n   May 2021\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n",
      "explanation": "Both original and mutant program produce the same output with the given input."
    },
    {
      "input": [
        "15",
        "2022"
      ],
      "original_output": "cal: 15: Bad month.\n",
      "mutant_output": "cal: 15: Bad month.\n",
      "explanation": "Both original and mutant program produce the same output with the given input."
    },
    {
      "input": [
        "5",
        "7000"
      ],
      "original_output": "cal: 7000: Bad year.\n",
      "mutant_output": "cal: 7000: Bad year.\n",
      "explanation": "Both original and mutant program produce the same output with the given input."
    }
  ]
},{
  "mutant_program": "muta1574_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "1"
      ],
      "original_output": "   January 2022\n S  M Tu  W Th  F  S\n                   1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31                   \n",
      "mutant_output": "   January 2022\n S  M Tu  W Th  F  S\n                   1  2\n 3  4  5  6  7  8 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n                   \n",
      "explanation": "The mutant code introduces a non-sensical comparison in line 31, that results in a boolean value (-1), which is then passed to a switch. This produces a different output for inputs with a year below 1 or above 9999."
    },
    {
      "input": [
        "-",
        "13"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "Both programs do not allow invalid month inputs, and return the same error message for such cases."
    },
    {
      "input": [
        "1",
        "1842"
      ],
      "original_output": "   January 1842\n S  M Tu  W Th  F  S\n                      1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31                \n",
      "mutant_output": "   January 1842\n S  M Tu  W Th  F  S\n                   1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31                   \n",
      "explanation": "Both programs produce the same output for a valid input for a year of 1842."
    }
  ]
},{
  "mutant_program": "muta1578_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta1579_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta1583_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "5",
        "2022"
      ],
      "original_output": "     May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31            \n\n",
      "mutant_output": "     May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31            \n\n",
      "explanation": "The inputs result in the equivalent output for the original and mutant."
    },
    {
      "input": [
        "14",
        "2019"
      ],
      "original_output": "cal: 14: Bad month.\n",
      "mutant_output": "cal: 14: Bad month.\n",
      "explanation": "The mutant code and the original code provide the same invalid input error."
    },
    {
      "input": [
        "2",
        "1800"
      ],
      "original_output": "cal: 1800: Bad year.\n",
      "mutant_output": "cal: 1800: Bad year.\n",
      "explanation": "The mutant code and the original code provide the same invalid input error."
    }
  ]
},{
  "mutant_program": "muta1585_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "6",
        "2022"
      ],
      "original_output": "   June 2022\n S  M Tu  W Th  F  S\n        1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30\n\n\n",
      "mutant_output": "   June 2022\n S  M Tu  W Th  F  S\n        1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30\n\n\n",
      "explanation": "Both programs output the same for this test"
    },
    {
      "input": [
        "14"
      ],
      "original_output": "cal: 14: Bad month.\n",
      "mutant_output": "cal: 14: Bad month.\n",
      "explanation": "Both programs output the same for this test"
    },
    {
      "input": [
        "2",
        "2022"
      ],
      "original_output": "   February 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28\n\n\n",
      "mutant_output": "   February 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28\n\n\n\n",
      "explanation": "The mutant program outputs an extra '\\n' that is not expected in the original program"
    }
  ]
},{
  "mutant_program": "muta1586_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "10"
      ],
      "original_output": "   October 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n",
      "mutant_output": "   October 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n",
      "explanation": "This test verifies that the original program and the mutated program produces the same output for a given input. The '-' option followed by a number specifies the month and year to be shown. In this case, it is showing October 2021, and the output calendars are the same for both programs."
    },
    {
      "input": [
        "-",
        "13"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "This test verifies that the original program and the mutated program produces the same error message when an invalid month is given as an input, in this case, 13."
    },
    {
      "input": [
        "-",
        "10",
        "abc"
      ],
      "original_output": "cal: abc: Bad year.\n",
      "mutant_output": "cal: abc: Bad year.\n",
      "explanation": "This test verifies that the original program and the mutated program produces the same error message when an invalid year is given as an input, in this case, a string 'abc'."
    },
    {
      "input": [
        "10000"
      ],
      "original_output": "cal: 10000: Bad year.\n",
      "mutant_output": "cal: 10000: Bad year.\n",
      "explanation": "This test verifies that the original program and the mutated program produces the same error message when an invalid year is given as an input, in this case, a number higher than 9999."
    }
  ]
},{
  "mutant_program": "muta1588_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta1589_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta1591_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta1609_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta1615_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "3"
      ],
      "original_output": "   March 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31        \n\n",
      "mutant_output": "   March 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31        \n\n",
      "explanation": "No difference"
    },
    {
      "input": [],
      "original_output": "",
      "mutant_output": "cal: 0: Bad month.\n",
      "explanation": "The mutant code does not support missing arguments"
    },
    {
      "input": [
        "13",
        "1850"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "Same error message"
    },
    {
      "input": [
        "4",
        "10000"
      ],
      "original_output": "cal: 10000: Bad year.\n",
      "mutant_output": "cal: 10000: Bad year.\n",
      "explanation": "Same error message"
    }
  ]
},{
  "mutant_program": "muta1621_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta1709_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta1719_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "10",
        "2021"
      ],
      "original_output": "   October 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n",
      "mutant_output": "",
      "explanation": "The mutated code eliminated the 'cal' function call inside the 'driver' function, which is in charge of generating the calendar output. As a consequence, no output is generated by this program."
    },
    {
      "input": [
        "12",
        "2022"
      ],
      "original_output": "   December 2022\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n\n\n\n\n",
      "mutant_output": "calendar result is different",
      "explanation": "The mutated code introduces a condition in the validation of the year input parameter that is always false and blocks the year validation. As a consequence, it is possible to obtain a calendar for years beyond 9999. For example, the mutant program generates the output 'calendar result is different' for the test input ['12','20222'], which is not a valid year value."
    }
  ]
},{
  "mutant_program": "muta1722_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "2"
      ],
      "original_output": "   February 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28\n",
      "mutant_output": "   February 2022\n S  M Tu  W Th  F  S\n   201 202 203 204 205\n206 207 208 209 210 211 212\n213 214 215 216 217 218 219\n220 221 222 223 224 225 226\n227 228\n",
      "explanation": "When comparing the output of the original and the mutant program, it is possible to notice that, in the mutant output, the dates have three digits instead of two. This happened because in the mutant program, the function cal() prints two characters for every iteration of the loop, but does not include a check to see if the result is greater than 99. As a result, when the dates exceed 99, three characters (including trailing spaces) are printed, which breaks the table structure. In the original program, this check was included in the pstr() function, which ensures that the printed strings are always aligned correctly. Therefore, the programs are not equivalent and the mutant is incorrect."
    }
  ]
},{
  "mutant_program": "muta1734_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "2",
        "2019"
      ],
      "original_output": "   February 2019\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28\n\n\n\n",
      "mutant_output": "   February 2019\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28\n\n\n\n",
      "explanation": "The outputs of the original and mutated program are the same because the changes made do not affect the logic or functionality of the program."
    },
    {
      "input": [
        "-",
        "2"
      ],
      "original_output": "",
      "mutant_output": "",
      "explanation": "The output of this case is non-deterministic."
    }
  ]
},{
  "mutant_program": "muta1737_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "4"
      ],
      "original_output": "   April 2021\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30\n\n",
      "mutant_output": "",
      "explanation": "The mutant code has an infinite loop in the second for loop in line 40, that is, for(i=0; (i-12) ; i += 3). This loop never ends, and therefore the program is stuck in this part and does not print anything. In contrast, the original program output corresponds to the correct one for the input provided."
    },
    {
      "input": [
        "3",
        "2021"
      ],
      "original_output": "   March 2021\n S  M Tu  W Th  F  S\n     1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31\n\n",
      "mutant_output": "",
      "explanation": "The mutant code has the same issue explained in the previous test. It does not print the output, and the program seems to be stuck. In contrast, the original program output corresponds to the correct one for the input provided."
    },
    {
      "input": [
        "-",
        "30000"
      ],
      "original_output": "   June 2021\n S  M Tu  W Th  F  S\n        1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30\n\n",
      "mutant_output": "",
      "explanation": "The mutant code has the same problem as the previous tests explained. Therefore the program does not provide any output."
    }
  ]
},{
  "mutant_program": "muta1742_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "1",
        "2000"
      ],
      "original_output": "   January 2000\n S  M Tu  W Th  F  S\n                   1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n\n",
      "mutant_output": "   January 2000\n S  M Tu  W Th  F  S\n                   1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n\n\n",
      "explanation": "The mutant code has a bug in the for loop in line 45, causing it to exit before reaching the intended end condition, which makes the output differ from the original."
    },
    {
      "input": [
        "-",
        "4"
      ],
      "original_output": "\n\n   February 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28\n\n\n",
      "mutant_output": "\n\n   February 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28\n\n\n",
      "explanation": "The mutant code is equivalent to the original code."
    },
    {
      "input": [
        "13",
        "5000"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "The mutant code is equivalent to the original code."
    }
  ]
},{
  "mutant_program": "muta1747_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "12",
        "2021"
      ],
      "original_output": "   December 2021\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31\n\n",
      "mutant_output": "   December 2021\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31\n\n",
      "explanation": "The mutant code did not introduce any changes for this input, so the outputs of the original and the mutant program are the same."
    },
    {
      "input": [
        "15",
        "2050"
      ],
      "original_output": "   March 2050\n S  M Tu  W Th  F  S\n             1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31\n\n",
      "mutant_output": "   March 2050\n S  M Tu  W Th  F  S\n             1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31\n\n",
      "explanation": "The mutant code did not introduce any changes for this input, so the outputs of the original and the mutant program are the same."
    },
    {
      "input": [
        "0"
      ],
      "original_output": "   September 2022\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30\n\n",
      "mutant_output": "   September 2022\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30\n\n",
      "explanation": "The mutant code did not introduce any changes for this input, so the outputs of the original and the mutant program are the same."
    },
    {
      "input": [
        "8",
        "2000"
      ],
      "original_output": "   September 2000\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n\n",
      "mutant_output": "   September 2000\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n\n\n",
      "explanation": "The original program used only three consecutive spaces to separate the months on the long year output, while the mutant code added a few more spaces (++spooooooooky). Therefore, the original and the mutant programs' outputs differ in that the mutant program's output has extra spaces before the month names."
    },
    {
      "input": [
        "13",
        "2023"
      ],
      "original_output": "",
      "mutant_output": "",
      "explanation": "The original program correctly identified an invalid month argument and terminated with an error message. The mutant code, on the other hand, has the same behavior as the original."
    },
    {
      "input": [
        "7",
        "-4000"
      ],
      "original_output": "",
      "mutant_output": "",
      "explanation": "The original program correctly identified an invalid year argument and terminated with an error message. The mutant code, on the other hand, has the same behavior as the original."
    }
  ]
},{
  "mutant_program": "muta1771_UnixCal.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta1780_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta1783_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "3",
        "2001"
      ],
      "original_output": "   March 2001\n S  M Tu  W Th  F  S\n\n              1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n\n",
      "mutant_output": "   March 2001\n S  M Tu  W Th  F  S\n\n              1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n\n",
      "explanation": "The mutant code is equivalent to the original code when provided the arguments '3' and '2001', which print out the month of March in the year 2001. Both the original and mutant codes will print out the calendar for March 2001, and the output for both will be identical."
    },
    {
      "input": [
        "-",
        "3"
      ],
      "original_output": "   January 2022\n S  M Tu  W Th  F  S\n                     1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n\n",
      "mutant_output": "   January 2022\n S  M Tu  W Th  F  S\n                     1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n\n  ",
      "explanation": "The provided arguments to the programs are '- 3'. The output of both the original and the mutant programs show the calendar for the month of January 2022. However, the mutant code includes an extra white space on the last line of the output."
    }
  ]
},{
  "mutant_program": "muta1786_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [],
      "original_output": "   February 2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28\n\n",
      "mutant_output": "   February 2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 101112 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28\n\n",
      "explanation": "The mutant replaces the digit 0 with digit 1 at position 34 (counting spaces); this change affects the output by adding an extra digit 1 in the second week of February, causing the spacing to be incorrect from that point on. The mutant program is not equivalent."
    },
    {
      "input": [
        "-",
        "2"
      ],
      "original_output": "   February 2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28\n\n",
      "mutant_output": "   February 2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 271\n\n",
      "explanation": "The same change affects the output of printing only the month of February, adding a digit 1 in the second-to-last week of the month. The mutant program is not equivalent."
    }
  ]
},{
  "mutant_program": "muta1817_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [],
      "original_output": "   June 2021\n S  M Tu  W Th  F  S\n        1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30\n\n",
      "mutant_output": "   June 2021\n S  M Tu  W Th  F  S\n        1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30\n\n",
      "explanation": "The original and the mutant output the same calendar for the current month"
    },
    {
      "input": [
        "6",
        "2022"
      ],
      "original_output": "   June 2022\n S  M Tu  W Th  F  S\n           1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30\n\n",
      "mutant_output": "   June 2022\n S  M Tu  W Th  F  S\n           1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30\n\n",
      "explanation": "The original and the mutant output the same calendar for June 2022"
    },
    {
      "input": [
        "11",
        "2023"
      ],
      "original_output": "  November 2023\n S  M Tu  W Th  F  S\n           1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30\n\n",
      "mutant_output": "  November 2023\n S  M Tu  W Th  F  S\n           1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30\n\n",
      "explanation": "The output of the mutant and the original calendar for November 2023 is the same"
    },
    {
      "input": [
        "0"
      ],
      "original_output": "cal: 0: Bad month.\n",
      "mutant_output": "cal: 0: Bad month.\n",
      "explanation": "Both original and mutant give the same error message for invalid input"
    },
    {
      "input": [
        "13"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "Both original and mutant give the same error message for invalid input"
    },
    {
      "input": [
        "3",
        "-1"
      ],
      "original_output": "cal: -1: Bad year.\n",
      "mutant_output": "cal: -1: Bad year.\n",
      "explanation": "Both original and mutant give the same error message for invalid input"
    },
    {
      "input": [
        "5",
        "40000"
      ],
      "original_output": "cal: 40000: Bad year.\n",
      "mutant_output": "cal: 40000: Bad year.\n",
      "explanation": "Both original and mutant give the same error message for invalid input"
    }
  ]
},{
  "mutant_program": "muta1845_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta1860_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "   May 2021\n S  M Tu  W Th  F  S\n                   1 \n 2  3  4  5  6  7  8 \n 9 10 11 12 13 14 15 \n16 17 18 19 20 21 22 \n23 24 25 26 27 28 29 \n30 31                \n\n\n",
      "mutant_output": "   May 2021\n S  M Tu  W Th  F  S\n                   1 \n 2  3  4  5  6  7  8 \n 9 10 11 12 13 14 15 \n16 17 18 19 20 21 22 \n23 24 25 26 27 28 29 \n30 31                \n\n\n",
      "explanation": "Both outputs are exactly the same. When argc > 1 it checks if argv[1] is '-', and if that is the case, executes driver(atoi(argv[2]),argc,argv) if not, driver(0, argc, argv)"
    },
    {
      "input": [
        "3",
        "2021"
      ],
      "original_output": "   March 2021\n S  M Tu  W Th  F  S\n     1  2  3  4  5  6 \n 7  8  9 10 11 12 13 \n14 15 16 17 18 19 20 \n21 22 23 24 25 26 27 \n28 29 30 31          \n\n",
      "mutant_output": "   March 2021\n S  M Tu  W Th  F  S\n     1  2  3  4  5  6 \n 7  8  9 10 11 12 13 \n14 15 16 17 18 19 20 \n21 22 23 24 25 26 27 \n28 29 30 31          \n\n",
      "explanation": "Both outputs are equivalent. In this test the program will evaluate if argc==2. If it's true, the program will jump to the xlong label. Since the input has two parameters, argc is considered to be 2, so it goes to xlong and prints the whole year using the cal function."
    },
    {
      "input": [],
      "original_output": "",
      "mutant_output": "",
      "explanation": "The test submitted has no arguments, so the program will execute a print stating Bad month, since in the original function, month is not defined in this context, and because the mutant removed the line that defined month, this would lead to an undefined error on the mutant code."
    }
  ]
},{
  "mutant_program": "muta1862_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "1",
        "2021"
      ],
      "original_output": "   January 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n",
      "mutant_output": "   January 2021\n S  M Tu  W Th  F  S\n  1  2  3  4  5  6  7\n  8  9 10 11 12 13 14\n 15 16 17 18 19 20 21\n 22 23 24 25 26 27 28\n 29 30 31\n\n",
      "explanation": "Changed the first day of January 2021 to be on a Sunday instead of a Friday, therefore changing the day of each month in that year."
    },
    {
      "input": [
        "-",
        "1"
      ],
      "original_output": "   July 2021\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n\n",
      "mutant_output": "   January 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n",
      "explanation": "Changed the input arguments so that July 2021 was not printed. Instead, the original January 2021 was printed."
    }
  ]
},{
  "mutant_program": "muta1865_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta1870_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "2"
      ],
      "original_output": "   February 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28\n",
      "mutant_output": "   February 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28\n",
      "explanation": "The mutant code is equivalent to the original program code. Both outputs are the same. No further explanation needed."
    },
    {
      "input": [
        "-",
        "-1"
      ],
      "original_output": "cal: -1: Bad year.\n",
      "mutant_output": "cal: -1: Bad year.\n",
      "explanation": "The input provided is an invalid year. Both programs are equal since both provide the same output for an incorrect input."
    },
    {
      "input": [],
      "original_output": "   October 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n",
      "mutant_output": "   October 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n",
      "explanation": "Both programs generate the same output for a certain input."
    }
  ]
},{
  "mutant_program": "muta1913_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "13",
        "2020"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "",
      "explanation": "The original program correctly identifies an invalid month and prints an error message. The mutant program, however, uses 'return' to exit the function, which means that it does not print any error messages and does not execute the rest of the function."
    },
    {
      "input": [
        "2",
        "1750"
      ],
      "original_output": "cal: 1750: Bad year.\n",
      "mutant_output": "",
      "explanation": "The original program correctly identifies an invalid year and prints an error message. The mutant program, however, uses 'return' to exit the function, which means that it does not print any error messages and does not execute the rest of the function."
    },
    {
      "input": [
        "6"
      ],
      "original_output": "   June 2021\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30        \n\n",
      "mutant_output": "   June 2021\n S  M Tu  W Th  F  S\n       0  0  0  0  0\n 0  0  0  0  0  0  0\n 0  0  0  0  0  0  0\n 0  0  0  0  0  0  0\n 0  0  0  0  0  0\n\n",
      "explanation": "The input has only one argument which prompts the program to print the current month. Both programs produce output, but the format of the output and the contents of the output are different. The mutant program appears to print zeros instead of the correct dates and also prints an incorrect number of days for the month."
    }
  ]
},{
  "mutant_program": "muta1918_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "3",
        "2021"
      ],
      "original_output": "   March 2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6 \n 7  8  9 10 11 12 13 \n14 15 16 17 18 19 20 \n21 22 23 24 25 26 27 \n28 29 30 31         \n\n                     \n                     \n                     \n",
      "mutant_output": "   March 2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6 \n 7  8  9 10 11 12 13 \n14 15 16 17 18 19 20 \n21 22 23 24 25 26 27 \n28 29 30 31         \n\n                     \n                     \n                     \n",
      "explanation": "Both programs output the same string because the mutant code only removed an 'exit(2)' line that was redundant."
    },
    {
      "input": [
        "0"
      ],
      "original_output": "   October 2021\n S  M Tu  W Th  F  S\n                1  2 \n 3  4  5  6  7  8  9 \n10 11 12 13 14 15 16 \n17 18 19 20 21 22 23 \n24 25 26 27 28 29 30 \n31                   \n\n                     \n                     \n                     \n",
      "mutant_output": "   October 2021\n S  M Tu  W Th  F  S\n                1  2 \n 3  4  5  6  7  8  9 \n10 11 12 13 14 15 16 \n17 18 19 20 21 22 23 \n24 25 26 27 28 29 30 \n31                   \n\n                     \n",
      "explanation": "The original program includes three blank lines after the month and year are output, while the mutant omits two of them. This difference probably arose because the programmer felt the blank lines were unnecessary."
    },
    {
      "input": [
        "13",
        "5000"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "",
      "explanation": "The mutant code removes the 'exit(1)' line after the 'Bad month' message and does not return anything, so the program continues executing and crashes or gets stuck when it tries to read from an unexpected place in memory. The original program exits gracefully with error code 1 after printing an error message."
    }
  ]
},{
  "mutant_program": "muta1928_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "1",
        "2022"
      ],
      "original_output": "   January 2022\n S  M Tu  W Th  F  S\n                   1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n",
      "mutant_output": "   January 2022\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31\n\n",
      "explanation": "The mutant program changes the dayw array to a 7-day week instead of a 6-day week. This results in incorrect spacing and the days of the week are shifted, causing the output to differ from the original program."
    },
    {
      "input": [
        "-",
        "1",
        "2020"
      ],
      "original_output": "   January 2020\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31\n\n",
      "mutant_output": "   January 2020\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31\n\n",
      "explanation": "The mutant program does not cause any changes to the output when the - switch is given, so it is equivalent to the original."
    }
  ]
},{
  "mutant_program": "muta1931_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta1951_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta2000_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "06"
      ],
      "original_output": "June 2021\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30\n\n",
      "mutant_output": "",
      "explanation": "The mutant program does not have a function driver, so no output is produced"
    },
    {
      "input": [
        "5",
        "2022"
      ],
      "original_output": "   May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31\n\n",
      "mutant_output": "   May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31\n\n",
      "explanation": "Both programs provided the same output given the input of a valid month and year, so they are equivalent."
    }
  ]
},{
  "mutant_program": "muta2062_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "10",
        "2022"
      ],
      "original_output": "   October 2022\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n\n",
      "mutant_output": "   October 2022\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n\n",
      "explanation": "The original program and the mutant provide the same output for the same input."
    },
    {
      "input": [
        "13",
        "2022"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "The original program and the mutant check that the month entered is a valid number."
    },
    {
      "input": [
        "12",
        "1600"
      ],
      "original_output": "cal: 1600: Bad year.\n",
      "mutant_output": "cal: 1600: Bad year.\n",
      "explanation": "The original program and the mutant check that the year entered is a valid number."
    },
    {
      "input": [
        "0",
        "0"
      ],
      "original_output": "   January 1970\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n\n\n",
      "mutant_output": "   January 1970\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n\n\n",
      "explanation": "The original program and the mutant provide the same output for the same input."
    }
  ]
},{
  "mutant_program": "muta2063_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta2065_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [],
      "original_output": "   January 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n\n",
      "mutant_output": "   January 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 2A 21 22 23\n24 25 26 27 28 29 30\n31\n\n\n",
      "explanation": "The original and mutant program receive no arguments, so they will both print the current month/year. However, the mutated program mistakenly changes the 19th of August (19) to 2A in function cal, which results in a different output. The test checks the printed calendar format with the correct days and month."
    }
  ]
},{
  "mutant_program": "muta2066_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "1"
      ],
      "original_output": "   January 2022\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n\n",
      "mutant_output": "   January 2022\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n\n",
      "explanation": "The mutant code changes nothing in the input parameters or how the program is executed, so it generates the same output as the original program."
    },
    {
      "input": [
        "-",
        "13"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "The mutant code changes nothing in how input parameters are verified, so it generates the same output as the original program for an invalid month."
    },
    {
      "input": [
        "-",
        "12",
        "30000"
      ],
      "original_output": "cal: 30000: Bad year.\n",
      "mutant_output": "cal: 30000: Bad year.\n",
      "explanation": "The mutant code changes nothing in how input parameters are verified, so it generates the same output as the original program for an invalid year."
    },
    {
      "input": [
        "10",
        "2021"
      ],
      "original_output": "   October 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n",
      "mutant_output": "   October 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n",
      "explanation": "The mutant code changes nothing in the cal function, which is responsible for generating the calendar. Therefore, it generates the same output as the original program."
    }
  ]
},{
  "mutant_program": "muta2068_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta2069_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "4"
      ],
      "original_output": "\n    August 2021\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31\n\n\n",
      "mutant_output": "",
      "explanation": "The original program's dispatch function takes 2 arguments. In this case, it should print the entire calendar year of 2024. The mutant's dispatch function has a syntax error, so it does not run. "
    },
    {
      "input": [
        "3",
        "2022"
      ],
      "original_output": "   March 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31\n\n\n",
      "mutant_output": "   March 2022\n S  M Tu  W Th  F  S\n\t   1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31\n\n\n",
      "explanation": "The original and mutant program calendars are displaying different indentation in the dates 1, 2, 3, 4 of the month of March. The mutant program does not follow the pattern of the original program's calendar."
    }
  ]
},{
  "mutant_program": "muta2071_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta2072_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-"
      ],
      "original_output": "   January 2022\n S  M Tu  W Th  F  S\n                   01 02\n 03 04 05 06 07 08 09\n 10 11 12 13 14 15 16\n 17 18 19 20 21 22 23\n 24 25 26 27 28 29 30\n 31\n",
      "mutant_output": null,
      "explanation": "The original program correctly displays the calendar for the current month (January 2022) when called with no arguments. It also handles the case when called with the '-' argument followed by a month number, which works similarly to passing the month number as an argument. However, the mutant code introduces an undefined macro called TRAP_ON_ZERO and improperly uses it to modify the calculation of the 'y' variable in the 'else' branch of the 'dispatch' function. This introduces unexpected behavior and causes the calendar to be displayed incorrectly on certain dates. As such, the mutant program fails the test by not producing a useful calendar output."
    },
    {
      "input": [
        "2",
        "2022"
      ],
      "original_output": " February 2022\n S  M Tu  W Th  F  S\n       01 02 03 04 05 06\n 07 08 09 10 11 12 13\n 14 15 16 17 18 19 20\n 21 22 23 24 25 26 27\n 28\n",
      "mutant_output": null,
      "explanation": "The original program correctly displays the calendar for the month of February 2022 when passed the '2' and '2022' arguments. However, since the mutant code fails to produce any useful output, it cannot be tested for output equivalence."
    }
  ]
},{
  "mutant_program": "muta2074_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "6"
      ],
      "original_output": "   June 2021\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30        \n\n",
      "mutant_output": "",
      "explanation": "The mutant code uses a macro for checking if the month input is valid, however this macro does not correctly handle negative inputs, causing a failure to validate June as a valid month. Thus, the output is different."
    },
    {
      "input": [
        "13",
        "2021"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "Both programs behave the same when a bad month is entered as input."
    }
  ]
},{
  "mutant_program": "muta2077_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-"
      ],
      "original_output": "cal: Bad month",
      "mutant_output": "cal: Bad month.\n",
      "explanation": "The mutant code uses a macro, TRAP_ON_NEGATIVE, to check if the value of m is lower than 1. In the first test input, m is '-', so the original code prints an error message saying 'Bad month.' while the mutant code prints 'Bad month' without a period."
    },
    {
      "input": [
        "0",
        "2000"
      ],
      "original_output": "   January 2000\n S  M Tu  W Th  F  S\n                    1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n\n",
      "mutant_output": "   January 2000\n S  M Tu  W Th  F  S\n                    1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20\nFebruary             \n   S  M Tu  W Th  F  S\n       21 22 23 24 25 26 27\n28 29\n\n   March 2000\n    S  M Tu  W Th  F  S\n          1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31\n\n",
      "explanation": "The original code prints correctly the calendar for January, every day of the week is in an specific column. The mutant code prints the calendar for January correctly too, but messes up with the format in February and March. They print as if there were only 6 columns instead of 7, probably because of changes in some indexes and variables."
    }
  ]
},{
  "mutant_program": "muta2078_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "5",
        "2022"
      ],
      "original_output": "   May 2022\n S  M Tu  W Th  F  S\n                   1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31            \n\n\n\n",
      "mutant_output": "   May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31             \n\n\n\n",
      "explanation": "The mutant changes the position of some spaces, which causes the text alignment to slightly differ from the original program."
    },
    {
      "input": [
        "13",
        "10000"
      ],
      "original_output": "cal: 10000: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "The mutant adds a macro function TRAP_ON_ZERO that replaces the condition m<1 with (TRAP_ON_ZERO(m)<=0), causing it to fail for m=13."
    },
    {
      "input": [
        "10000"
      ],
      "original_output": "cal: 10000: Bad year.\n",
      "mutant_output": "cal: 10000: Bad year.\n",
      "explanation": "The input is a bad year number that exceeds 9999, and both the original program and the mutant correctly identify the error."
    }
  ]
},{
  "mutant_program": "muta2080_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "2"
      ],
      "original_output": "   June 2021\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30        \n\n",
      "mutant_output": "",
      "explanation": "The mutant code removes the condition for checking the range of the year entered by the user, which results in the possibility of entering a negative or out of limit year, which can cause the program to crash or provide incorrect output."
    },
    {
      "input": [
        "2",
        "2050"
      ],
      "original_output": "   February 2050\n S  M Tu  W Th  F  S\n             1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28         \n\n",
      "mutant_output": "cal: 20500: Bad year.\n",
      "explanation": "The mutant code changes the range of years that are acceptable for the program, leading to a situation where the program identifies an acceptable year as a bad year."
    }
  ]
},{
  "mutant_program": "muta2083_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "5",
        "1999"
      ],
      "original_output": "   May 1999\n S  M Tu  W Th  F  S\n                   1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n\n\n",
      "mutant_output": "   May 1999\n S  M Tu  W Th  F  S\n                   1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n\n\n",
      "explanation": "The original and mutated program have the same output for the given test input."
    },
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "   May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31\n\n\n",
      "mutant_output": "   May 5\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31\n\n\n",
      "explanation": "The mutated program does not correctly handle negative years, causing it to output an incorrect date while the original program works as expected."
    },
    {
      "input": [
        "13",
        "3000"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "The original and mutated program have the same output for the given test input."
    }
  ]
},{
  "mutant_program": "muta2084_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "5",
        "2030"
      ],
      "original_output": "   May 2030\n S  M Tu  W Th  F  S\n\n             1  2  3\n 4  5  6   7  8  9 10\n11 12 13  14 15 16 17\n18 19 20  21 22 23 24\n25 26 27  28 29 30 31\n\n\n",
      "mutant_output": "   May 2030\n S  M Tu  W Th  F  S\n\n             1  2  3\n 4  5  6   7  8  9 10\n11 12 13  14 15 16 17\n18 19 20  21 22 23 24\n25 26 27  28 29 30 31\n\n\n",
      "explanation": "The outputs are the same since the mutation only replaces an if condition by a macro definition."
    },
    {
      "input": [
        "13",
        "2022"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "The outputs are the same since the input is the same and the mutation only affects the error message."
    },
    {
      "input": [
        "10",
        "-1"
      ],
      "original_output": "cal: -1: Bad year.\n",
      "mutant_output": "",
      "explanation": "The output is different since the original program checks if y<1 and the mutant program uses a macro definition for checking if TRAP_ON_ZERO(y) > 9999, which with a negative input results in no error message."
    }
  ]
},{
  "mutant_program": "muta2086_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "2"
      ],
      "original_output": "   February 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28         \n\n",
      "mutant_output": "   January 2022\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31               \n",
      "explanation": "The mutant replaces the argument passed to the smon array access with a call to the TRAP_ON_NEGATIVE macro, which turns any negative value into 1. This will result in the wrong month name being displayed. The test checks the output of the program for the month of February 2022 with a dash (-) as the first argument, which is expected to show the calendar for the current month. The original program displays the correct month, while the mutant program displays the wrong month (January instead of February)."
    },
    {
      "input": [
        "4",
        "2022"
      ],
      "original_output": "   April 2022\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n\n",
      "mutant_output": "   April 2022\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30                  \n",
      "explanation": "The same test set for another month. The original program displays the correct calendar, while the mutant program displays the wrong month (January instead of April)."
    }
  ]
},{
  "mutant_program": "muta2087_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "7"
      ],
      "original_output": "   July 2021\n S  M Tu  W Th  F  S\n              1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n",
      "mutant_output": "   July 2021\n S  M Tu  W Th  F  S\n              1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n",
      "explanation": "There is no difference between the outputs."
    },
    {
      "input": [
        "2",
        "2200"
      ],
      "original_output": "   February 2200\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28\n",
      "mutant_output": "   February 2200\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28\n              \n",
      "explanation": "The mutant adds extra spaces at the end of the output."
    },
    {
      "input": [
        "13",
        "2000"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "There is no difference between the outputs."
    }
  ]
},{
  "mutant_program": "muta2089_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [],
      "original_output": "   March 2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31\n\n\n",
      "mutant_output": "\n March -2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31\n\n\n",
      "explanation": "The mutant changes the input month format '-m' to just 'm' resulting in a new output format."
    },
    {
      "input": [
        "-",
        "3"
      ],
      "original_output": "   March 2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31\n\n\n",
      "mutant_output": "\n   March 2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31\n\n\n",
      "explanation": "The mutant adds some spaces before the month name. It does not affect the output."
    },
    {
      "input": [
        "-",
        "3"
      ],
      "original_output": "   March 2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31\n\n\n",
      "mutant_output": "   March .021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31\n\n\n",
      "explanation": "The mutant replaces the '2021' year identifier with '.021'. It affects the output."
    }
  ]
},{
  "mutant_program": "muta2090_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "1",
        "2021"
      ],
      "original_output": "   January 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n",
      "mutant_output": null,
      "explanation": "The mutated program has a typo in line 32, which evaluates an expression returning zero if the second argument is zero. In this test case, TRAP_ON_ZERO(y) will return zero because y = 2021, which makes the program display January 0, instead of January 2021."
    },
    {
      "input": [
        "-",
        "1"
      ],
      "original_output": "   September 2021\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30\n",
      "mutant_output": null,
      "explanation": "The input simulates the current month and year. Since the mutant code only replaces one line, the program still runs as expected."
    }
  ]
},{
  "mutant_program": "muta2092_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-1",
        "2021"
      ],
      "original_output": "cal: -1: Bad month.\n",
      "mutant_output": "cal: -1: Bad month.\n",
      "explanation": "Both original and mutant programs will have an error message for bad month input."
    },
    {
      "input": [
        "12",
        "2022"
      ],
      "original_output": "   December 2022\n S  M Tu  W Th  F  S\n             1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31\n\n\n",
      "mutant_output": null,
      "explanation": "The original program will correctly output the calendar for December 2022 while the mutant program will have no output due to a trap on negative values causing the month input to be negative."
    },
    {
      "input": [
        "10000",
        "1969"
      ],
      "original_output": "cal: 10000: Bad year.\n",
      "mutant_output": "cal: 10000: Bad year.\n",
      "explanation": "Both original and mutant programs will have an error message for bad year input."
    }
  ]
},{
  "mutant_program": "muta2093_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "6",
        "2021"
      ],
      "original_output": "      June 2021\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30\n",
      "mutant_output": " MUTANT MISSING ARGUMENT",
      "explanation": "The original program takes two arguments: the month and the year. The first test sets June 2021 as the input. The original program outputs the calendar for the specified month and year. The mutant program outputs an error message because it is missing an argument, demonstrating that the mutant program is not equivalent."
    },
    {
      "input": [
        "1",
        "2000"
      ],
      "original_output": "    January 2000\n S  M Tu  W Th  F  S\n                    1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n",
      "mutant_output": "    January 2000\n S  M Tu  W Th  F  S\n 01 02 03 04 05 06 07\n 08 09 10 11 12 13 14\n 15 16 17 18 19 20 21\n 22 23 24 25 26 27 28\n 29 30 31\n",
      "explanation": "The original program outputs the calendar for January 2000, with the first day of the month on a Saturday. The mutant program outputs the same calendar for the same input, but with the day of the week shifted by one day due to a change in the string ordering of the weekdays. While the output is different, both outputs still represent January 2000, so the programs are partially equivalent."
    },
    {
      "input": [
        "12",
        "2010"
      ],
      "original_output": "   December 2010\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31\n",
      "mutant_output": "   December 2010\n S  M Tu  W Th  F  S\n       01 02 03 04\n 05 06 07 08 09 10 11\n 12 13 14 15 16 17 18\n 19 20 21 22 23 24 25\n 26 27 28 29 30 31\n",
      "explanation": "The original program outputs the calendar for December 2010, with the first day of the month on a Wednesday. The mutant program outputs the same calendar for the same input, but with the day of the month shifted by one due to a change in the string ordering of the days. While the output is different, both outputs still represent December 2010, so the programs are partially equivalent."
    }
  ]
},{
  "mutant_program": "muta2095_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-"
      ],
      "original_output": "   January 2022\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31  \n",
      "mutant_output": "   January 2022\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31  \n",
      "explanation": "The mutant program is equivalent to the original program when the input is ['-']."
    },
    {
      "input": [
        "13",
        "2022"
      ],
      "original_output": "   December 2022\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n",
      "mutant_output": "cal: Bad month.\n",
      "explanation": "The mutant program returns an error message when the month is invalid."
    },
    {
      "input": [
        "12",
        "-1"
      ],
      "original_output": "cal: -1: Bad year.\n",
      "mutant_output": "cal: -1: Bad year.\n",
      "explanation": "The mutant program returns the same error message as the original program when the year is invalid."
    }
  ]
},{
  "mutant_program": "muta2096_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "12",
        "2021"
      ],
      "original_output": "   December 2021\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31\n\n\n\t January\t\tFebruary\t\tMarch\n S  M Tu  W Th  F  S   S  M Tu  W Th  F  S   S  M Tu  W Th  F  S\n                   1\t\t\t  1  2  3  4  5  6  7\n 2  3  4  5  6  7  8\t 9 10 11 12 13 14 15\t 8  9 10 11 12 13 14\n 9 10 11 12 13 14 15\t16 17 18 19 20 21 22\t15 16 17 18 19 20 21\n16 17 18 19 20 21 22\t23 24 25 26 27 28 29\t22 23 24 25 26 27 28\n23 24 25 26 27 28 29\t30 31\t\t\t29 30 31\n30 31\n\n\n",
      "mutant_output": "   December 2021\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31\n\n\n\t January\t\tFebruary\t\tMarch\n S  M Tu  W Th  F  S   S  M Tu  W Th  F  S   S  M Tu  W Th  F  S\n                   1\t\t\t  1  2  3  4  5  6\n 2  3  4  5  6  7  8\t 9 10 11 12 13 14 15\t 8  9 10 11 12 13 14\n 9 10 11 12 13 14 15\t16 17 18 19 20 21 22\t15 16 17 18 19 20 21\n16 17 18 19 20 21 22\t23 24 25 26 27 28 29\t22 23 24 25 26 27 28\n23 24 25 26 27 28 29\t30 31\t\t\t29 \n\n\n",
      "explanation": "The mutant program replaces TRAP_ON_ZERO(y) in line 49 of the original program with just y. This means that, if a year is 0, the mutant program will not trap the error and use 0 as if it were a valid value. This creates different outputs for input [\"-\",\"12\",\"0\"]. In the original program, it prints out an error message indicating a bad year. In the mutant program, it proceeds with year 0 and prints out December 0."
    },
    {
      "input": [
        "-",
        "2",
        "2022"
      ],
      "original_output": "   February 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28\n\n",
      "mutant_output": "   February 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 2\n\n",
      "explanation": "Both programs behave similarly for input [\"-\",\"2\",\"2022\"], i.e., they print out the calendar for February 2022. As such, this test returns true for equivalent. The mutant program modifies line 79 of the original program by changing 28 to 2. This results in a wrong output and a calendar with 29 days in February."
    }
  ]
},{
  "mutant_program": "muta2098_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta2101_UnixCal.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        "-",
        "1"
      ],
      "original_output": "   January 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31                 \n",
      "mutant_output": "   January 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31                 \n",
      "explanation": "Both programs were given the same input, which is to display the month of January in the year 2021 in a calendar form. The original program and the mutant program produced the same output."
    },
    {
      "input": [
        "-",
        "15"
      ],
      "original_output": "cal: 15: Bad month.\n",
      "mutant_output": "cal: 15: Bad month.\n",
      "explanation": "Both programs were given an invalid input for the month. The output was the same in both programs."
    },
    {
      "input": [
        "-",
        "6",
        "3000"
      ],
      "original_output": "   June 3000\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30   \n",
      "mutant_output": "   June 3000\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30   \n",
      "explanation": "Both programs were given the input to display the calendar for the month of June in the year 3000. The output was the same in both programs."
    }
  ]
},{
  "mutant_program": "muta2104_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "12",
        "2022"
      ],
      "original_output": "  December 2022\n S  M Tu  W Th  F  S\n\n          1  2  3\n  4  5  6  7  8  9 10\n 11 12 13 14 15 16 17\n 18 19 20 21 22 23 24\n 25 26 27 28 29 30 31\n\n",
      "mutant_output": "",
      "explanation": "The mutant code contains a macro TRAP_ON_NEGATIVE that doesn't exist in the original code, leading to an error when executing the line that defines the year 'y' value in the long output case. Additionally, the mutant code inserts a semicolon in the beginning of the code that doesn't allow it to run correctly. "
    },
    {
      "input": [
        "-12",
        "2022"
      ],
      "original_output": "  December 2021\n S  M Tu  W Th  F  S\n          1  2  3  4\n  5  6  7  8  9 10 11\n 12 13 14 15 16 17 18\n 19 20 21 22 23 24 25\n 26 27 28 29 30 31\n\n",
      "mutant_output": "",
      "explanation": "The mutant code changes the output format and appends a semicolon at the beginning of the code that doesn't allow it to run correctly; thus, it doesn't produce any output."
    }
  ]
},{
  "mutant_program": "muta2107_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta2108_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta2110_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta2111_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "   May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31         \n\n\n",
      "mutant_output": "   May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31         \n\n\n",
      "explanation": "Both the original program and the mutant program have the same output. This is because the only difference introduced in the mutant program is the addition of a check for zero in line 47. This check does not affect any of the test cases and does not modify any output. "
    },
    {
      "input": [
        "2022"
      ],
      "original_output": "\n\n\n                                2022\n\n   S  M Tu  W Th  F  S   S  M Tu  W Th  F  S   S  M Tu  W Th  F  S\n                 1  2                  1  2  3                  1\n 3  4  5  6  7  8  9   4  5  6  7  8  9 10   4  5  6  7  8  9 10\n10 11 12 13 14 15 16  11 12 13 14 15 16 17  11 12 13 14 15 16 17\n17 18 19 20 21 22 23  18 19 20 21 22 23 24  18 19 20 21 22 23 24\n24 25 26 27 28 29 30  25 26 27 28 29 30     25 26 27 28 29 30 31\n                    31                                             \n\n\n",
      "mutant_output": "\n\n\n                                2022\n\n   S  M Tu  W Th  F  S   S  M Tu  W Th  F  S   S  M Tu  W Th  F  S\n                 1  2                  1  2  3                  1\n 3  4  5  6  7  8  9   4  5  6  7  8  9 10   4  5  6  7  8  9 10\n10 11 12 13 14 15 16  11 12 13 14 15 16 17  11 12 13 14 15 16 17\n17 18 19 20 21 22 23  18 19 20 21 22 23 24  18 19 20 21 22 23 24\n24 25 26 27 28 29 30  25 26 27 28 29 30     25 26 27 28 29 30 31\n                    31                                             \n\n\n",
      "explanation": "Both the original program and the mutant program have the same output. This is because the only difference introduced in the mutant program is the addition of a trap for zero in line 46. This trap has no effect during program execution because year zero is not a valid year."
    }
  ]
},{
  "mutant_program": "muta2113_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "6"
      ],
      "original_output": "   June 2021\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30         \n\n\n\n",
      "mutant_output": "",
      "explanation": "The mutant code contains a macro TRAP_ON_NEGATIVE that is not defined, causing a compile-time error and no program output."
    },
    {
      "input": [
        "6",
        "2021"
      ],
      "original_output": "   June 2021\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30         \n\n\n\n",
      "mutant_output": "   June 2021\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30         \n\n\n\n",
      "explanation": "Providing a valid argument to dispatch function produces equivalent output for both programs."
    },
    {
      "input": [
        "14"
      ],
      "original_output": "cal: 14: Bad month.\n",
      "mutant_output": "cal: 14: Bad month.\n",
      "explanation": "Providing an invalid argument to dispatch function produces equivalent error message for both programs."
    }
  ]
},{
  "mutant_program": "muta2116_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta2119_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta2122_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta2125_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "1",
        "2021"
      ],
      "original_output": "   January 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n",
      "mutant_output": "   January 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n",
      "explanation": "The mutant code has a non-deterministic change that does not modify the program behavior, so the output is the same."
    },
    {
      "input": [
        "-",
        "1"
      ],
      "original_output": "   January 2022\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n",
      "mutant_output": "   January 2022\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n",
      "explanation": "The mutant code has a non-deterministic change that does not modify the program behavior, so the output is the same."
    },
    {
      "input": [
        "13",
        "1991"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "Both original and mutant code correctly detect the invalid month argument and output the same error message."
    },
    {
      "input": [
        "1",
        "10000"
      ],
      "original_output": "cal: 10000: Bad year.\n",
      "mutant_output": "cal: 10000: Bad year.\n",
      "explanation": "Both original and mutant code correctly detect the invalid year argument and output the same error message."
    },
    {
      "input": [],
      "original_output": "   May 2021\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n",
      "mutant_output": "   May 2021\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n",
      "explanation": "The default behavior of showing the current month is tested, which is the same for both original and mutant code."
    }
  ]
},{
  "mutant_program": "muta2128_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "   May 2021\n S  M Tu  W Th  F  S\n                  1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31             \n\n",
      "mutant_output": "   May 2021\n S  M Tu  W Th  F  S\n                  1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31             \n\n",
      "explanation": "The mutant code did not change the logic of the original code, only added an unnecessary macro that does not improve or alter the program's performance."
    },
    {
      "input": [
        "5",
        "2022"
      ],
      "original_output": "   May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31          \n\n",
      "mutant_output": "   May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31          \n\n",
      "explanation": "The mutant code did not change the logic of the original code, only added an unnecessary macro that does not improve or alter the program's performance."
    },
    {
      "input": [
        "-",
        "13"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "The mutant code did not change the logic of the original code, only added an unnecessary macro that does not improve or alter the program's performance."
    },
    {
      "input": [
        "5",
        "10000"
      ],
      "original_output": "cal: 10000: Bad year.\n",
      "mutant_output": "cal: 10000: Bad year.\n",
      "explanation": "The mutant code did not change the logic of the original code, only added an unnecessary macro that does not improve or alter the program's performance."
    },
    {
      "input": [
        "13",
        "9999"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "The mutant code did not change the logic of the original code, only added an unnecessary macro that does not improve or alter the program's performance."
    }
  ]
},{
  "mutant_program": "muta2131_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "1",
        "2022"
      ],
      "original_output": "   January 2022\n S  M Tu  W Th  F  S\n                   1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n",
      "mutant_output": "",
      "explanation": "The mutant code features a TRAP_ON_NEGATIVE macro that adds 1 to the first parameter if it is negative. In the case of dispatch, this macro is applied to the loop variable i on line 53. Instead of printing the contents of the ith month, as in the original code, this clause prints the contents of the (TRAP_ON_NEGATIVE(i)+1)th month, which may cause unexpected behavior for certain inputs. This test verifies that the output of the two programs is different for an input of month 1 and year 2022."
    },
    {
      "input": [
        "-",
        "2022"
      ],
      "original_output": "   September 2022\n S  M Tu  W Th  F  S\n              1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30\n",
      "mutant_output": "   September 2022\n S  M Tu  W Th  F  S\n              1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30\n",
      "explanation": "Both programs receive identical arguments, so the output of both executions should be the same. This test verifies that."
    }
  ]
},{
  "mutant_program": "muta2134_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "2"
      ],
      "original_output": "   August 2021\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31           \n\n",
      "mutant_output": "   August 2021\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 TRAP CALLED\n",
      "explanation": "The mutant adds a call to TRAP_ON_NEGATIVE function when the year is calculated in line 54, this function is not part of the original program and causes the output to be incorrect when it is called as the TRAP_ON_NEGATIVE function is not defined."
    },
    {
      "input": [
        "9",
        "2020"
      ],
      "original_output": "   September 2020\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30        \n",
      "mutant_output": "   September 2020\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 CALLED !!!\n",
      "explanation": "The mutant adds the string \"CALLED!!!\" in line 65 when October is printed instead of printing the correct month, this causes the output to be incorrect and non-equivalent to the original program."
    },
    {
      "input": [
        "-",
        "10000"
      ],
      "original_output": "   August 31874\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31     \n\n",
      "mutant_output": "cal: 10000: Bad year.\n",
      "explanation": "The mutant and the original program produces different output on invalid year input. The original program tries to print a message to stderr while the mutant prints a message to stdout."
    }
  ]
},{
  "mutant_program": "muta2135_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta2137_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "2",
        "2022"
      ],
      "original_output": "   February 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28\n\n\n",
      "mutant_output": "   February 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28\n\n\n",
      "explanation": "The test case is a normal scenario, which means that both codes should have the same output. In this case, the code mutations do not change anything of the original code."
    },
    {
      "input": [
        "-",
        "2"
      ],
      "original_output": "   April 2021\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30\n\n",
      "mutant_output": "   April 2021\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30\n\n",
      "explanation": "The test case is a normal scenario, which means that both codes should have the same output. In this case, the code mutations do not change anything of the original code."
    }
  ]
},{
  "mutant_program": "muta2140_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta2141_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "12",
        "2021"
      ],
      "original_output": "   December 2021\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \n",
      "mutant_output": "   December 2021\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \n",
      "explanation": "The original and mutant produce the same output for this test case."
    },
    {
      "input": [
        "2000"
      ],
      "original_output": "\n\n\n\t\t\t2000\n\nJanuary          February          March\n S  M Tu  W Th  F  S   S  M Tu  W Th  F  S   S  M Tu  W Th  F  S\n                   1      1  2  3  4                  1  2  3  4\n 2  3  4  5  6  7  8   5  6  7  8  9 10 11   6  7  8  9 10 11 12\n 9 10 11 12 13 14 15  12 13 14 15 16 17 18  13 14 15 16 17 18 19\n16 17 18 19 20 21 22  19 20 21 22 23 24 25  20 21 22 23 24 25 26\n23 24 25 26 27 28 29  26 27 28 29           27 28 29 30 31      \n30 31                                                         \n\nApril              May               June\n S  M Tu  W Th  F  S   S  M Tu  W Th  F  S   S  M Tu  W Th  F  S\n                   1      1  2  3  4      1  2  3\n 2  3  4  5  6  7  8   5  6  7  8  9 10 11   4  5  6  7  8  9 10\n 9 10 11 12 13 14 15  12 13 14 15 16 17 18  11 12 13 14 15 16 17\n16 17 18 19 20 21 22  19 20 21 22 23 24 25  18 19 20 21 22 23 24\n23 24 25 26 27 28 29  26 27 28 29 30 31     25 26 27 28 29 30   \n30                                                             \n\nJuly             August          September\n S  M Tu  W Th  F  S   S  M Tu  W Th  F  S   S  M Tu  W Th  F  S\n                   1         1  2  3   1  2                     \n 2  3  4  5  6  7  8   4  5  6  7  8  9 10   3  4  5  6  7  8  9\n 9 10 11 12 13 14 15  11 12 13 14 15 16 17  10 11 12 13 14 15 16\n16 17 18 19 20 21 22  18 19 20 21 22 23 24  17 18 19 20 21 22 23\n23 24 25 26 27 28 29  25 26 27 28 29 30 31  24 25 26 27 28 29 30\n30 31                                                         \n\nOctober          November         December\n S  M Tu  W Th  F  S   S  M Tu  W Th  F  S   S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7            1  2  3   1  2  3  4  5  6  7\n 8  9 10 11 12 13 14   4  5  6  7  8  9 10   8  9 10 11 12 13 14\n15 16 17 18 19 20 21  11 12 13 14 15 16 17  15 16 17 18 19 20 21\n22 23 24 25 26 27 28  18 19 20 21 22 23 24  22 23 24 25 26 27 28\n29 30 31           25 26 27 28 29 30     29 30 31               \n",
      "mutant_output": "Segmentation Fault",
      "explanation": "The test case and output for the mutant code produced an error while the original program output is correct."
    }
  ]
},{
  "mutant_program": "muta2143_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [],
      "original_output": "",
      "mutant_output": "segmentation fault",
      "explanation": "The original program can handle empty inputs and output a help message while the mutant program will cause a segmentation fault."
    },
    {
      "input": [
        "-"
      ],
      "original_output": "   May 2021\n S  M Tu  W Th  F  S\n                    1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n",
      "mutant_output": "   May 2021\n S  M Tu  W Th  F  S\n                    1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n",
      "explanation": "Both programs handle the '-' flag properly and display the current month."
    },
    {
      "input": [
        "13",
        "2022"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "Both programs handle an invalid month input properly."
    },
    {
      "input": [
        "5",
        "99999"
      ],
      "original_output": "cal: 99999: Bad year.\n",
      "mutant_output": "cal: 99999: Bad year.\n",
      "explanation": "Both programs handle an invalid year input properly."
    },
    {
      "input": [
        "2022"
      ],
      "original_output": "",
      "mutant_output": "segmentation fault",
      "explanation": "The original program displays a full year calendar when provided with a valid year, while the mutant program causes a segmentation fault."
    }
  ]
},{
  "mutant_program": "muta2146_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "10"
      ],
      "original_output": "   October 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n\n",
      "mutant_output": "CAL ERROR",
      "explanation": "The mutant code has a TRAP_ON_NEGATIVE macro which is not present in the original program. This macro calculates the next year if the year entered is negative, which causes an error. This error message is not present in the original program."
    },
    {
      "input": [
        "12",
        "2023"
      ],
      "original_output": "   December 2023\n S  M Tu  W Th  F  S\n                1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31\n\n\n",
      "mutant_output": "CAL ERROR",
      "explanation": "The input is a valid year and month. Thus, the output should be the same for both programs. Since the test set is the same for both programs and the expected results from the original program are correct, we can conclude that there is an error in the mutant program."
    }
  ]
},{
  "mutant_program": "muta2147_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "7"
      ],
      "original_output": [
        "   July 2021",
        " S  M Tu  W Th  F  S",
        "             1  2  3 ",
        " 4  5  6  7  8  9 10 ",
        "11 12 13 14 15 16 17 ",
        "18 19 20 21 22 23 24 ",
        "25 26 27 28 29 30 31 "
      ],
      "mutant_output": [
        "   July 2021",
        " S  M Tu  W Th  F  S",
        "             1  2  3 ",
        " 4  5  6  7  8  9 10 ",
        "11 12 13 14 15 16 17 ",
        "18 19 20 21 22 23 24 ",
        "25 26 27 28 29 30 31 "
      ],
      "explanation": "The mutant code has a non-deterministic change, but it does not affect the output of the program in this case."
    },
    {
      "input": [
        "5",
        "2022"
      ],
      "original_output": [
        "   May 2022",
        " S  M Tu  W Th  F  S",
        " 1  2  3  4  5  6  7 ",
        " 8  9 10 11 12 13 14 ",
        "15 16 17 18 19 20 21 ",
        "22 23 24 25 26 27 28 ",
        "29 30 31            "
      ],
      "mutant_output": [
        "   May 2022",
        " S  M Tu  W Th  F  S",
        " 1  2  3  4  5  6  7 ",
        " 8  9 10 11 12 13 14 ",
        "15 16 17 18 19 20 21 ",
        "22 23 24 25 26 27 28 ",
        "29 30 00            "
      ],
      "explanation": "The mutant code has a change that is hard to predict since it substitutes the value of position 46 by 0, it does not affect much the output, but it creates a zero at the end that the original program does not create."
    },
    {
      "input": [
        "14"
      ],
      "original_output": "cal: 14: Bad month.",
      "mutant_output": "cal: 14: Bad month.",
      "explanation": "The input for the programs is an invalid month, so both programs return the same error."
    },
    {
      "input": [
        "12",
        "10000"
      ],
      "original_output": "cal: 10000: Bad year.",
      "mutant_output": "cal: 10000: Bad year.",
      "explanation": "The input for the programs is an invalid year, so both programs return the same error."
    }
  ]
},{
  "mutant_program": "muta2149_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta2152_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "test string",
        5
      ],
      "original_output": "test string  \n",
      "mutant_output": null,
      "explanation": "Both programs would output the same thing with this input"
    },
    {
      "input": [
        "another string",
        10
      ],
      "original_output": "another st\n",
      "mutant_output": "another st  \n",
      "explanation": "The mutant program adds an extra space character at the end of the string. This is not expected by the original program and would produce a different output."
    }
  ]
},{
  "mutant_program": "muta2403_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "   May 2021\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n\n\n",
      "mutant_output": "",
      "explanation": "The original program displays the calendar for the current month if run without arguments. In this case, since it is called with an argument (the string '-'), it goes to the \"if\" condition and calls the driver function with the month and year arguments. The mutant version of the program has a typo in the condition that verifies if there are enough arguments passed. Thus, when run with no arguments, the 'm' and 'y' variables are undefined and the program crashes. Therefore, the tests are not applicable."
    },
    {
      "input": [
        "-",
        "5",
        "2022"
      ],
      "original_output": "   May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31\n\n\n",
      "mutant_output": "",
      "explanation": "As in the previous test, the mutant program would crash due to a typo in a condition and undefined variables. Therefore, the test is not applicable."
    },
    {
      "input": [
        "5",
        "2048"
      ],
      "original_output": "   May 2048\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n\n",
      "mutant_output": "",
      "explanation": "The original program was called with the arguments '5' and '2048', which correspond to month and year, to display the calendar for that specific month and year. The program correctly displays the calendar for the month of May in the year 2048. Since the mutant program contains a typo in one of the conditions, the tests are not applicable."
    }
  ]
},{
  "mutant_program": "muta2426_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "10",
        "2021"
      ],
      "original_output": "   October 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n",
      "mutant_output": "",
      "explanation": "The mutant program removes the for loop condition on line 44 (i < 6 * 24) and replaces it with the incrementation of i without a condition. In the original program, this for loop prints the output of each week of the given month. Since the mutant program does not have this condition, it will continue to loop through the entire array causing an infinite loop and no output. "
    },
    {
      "input": [
        "3",
        "1999"
      ],
      "original_output": "   March 1999\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31\n",
      "mutant_output": "   March 1999\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31\n",
      "explanation": "This is an equivalent test set as both the original and mutant program passed it and returned the same output. "
    }
  ]
},{
  "mutant_program": "muta2436_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "2",
        "2021"
      ],
      "original_output": "   March 2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31\n\n\n",
      "mutant_output": "   February 2021\n S  M Tu  W Th  F  S\n       1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28\n\n\n",
      "explanation": "The mutant program changes the calculation of which months to print when printing a complete year, for loop checks (SUCC(i) < 12), where SUCC function is not declared and not defined. This makes the program skip december month and one of the months printed is February (in the first iteration of the for loop). The output of the mutant program is different from the output of the original program when executing the test case."
    },
    {
      "input": [
        "-",
        "2"
      ],
      "original_output": "   March 2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31\n\n\n",
      "mutant_output": "  February 2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28\n\n\n",
      "explanation": "The mutant program changes the calculation of which months to print when printing a complete year, for loop checks (SUCC(i) < 12), where SUCC function is not declared and not defined. This makes the program print February instead of a month in December. The output of the mutant program is different from the output of the original program when executing the test case."
    },
    {
      "input": [
        "13",
        "2021"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "The input is an invalid month, which triggers an error message, the function responsible for this behavior did not mutate."
    }
  ]
},{
  "mutant_program": "muta2437_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "1",
        "2022"
      ],
      "original_output": "   January 2022\n S  M Tu  W Th  F  S\n                   1  \n 2  3  4  5  6  7  8  \n 9 10 11 12 13 14 15  \n16 17 18 19 20 21 22  \n23 24 25 26 27 28 29  \n30 31                 \n\n\n\n",
      "mutant_output": "   January 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7  \n 8  9 10 11 12 13 14  \n15 16 17 18 19 20 21  \n22 23 24 25 26 27 28  \n29 30 31              \n\n\n\n",
      "explanation": "The mutant changes the conditional statement in the for loop in the dispatch function to stop at 6*72-1 instead of 6*72. This causes the string to have one less character, affecting the format and making it different from the original program output."
    },
    {
      "input": [
        "13",
        "2022"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "Both programs receive an invalid input for the month parameter and print the same error message, resulting in equivalent behavior."
    },
    {
      "input": [
        "7",
        "10000"
      ],
      "original_output": "cal: 10000: Bad year.\n",
      "mutant_output": "cal: 10000: Bad year.\n",
      "explanation": "Both programs receive an invalid input for the year parameter and print the same error message, resulting in equivalent behavior."
    },
    {
      "input": [
        "-",
        "10"
      ],
      "original_output": "cal: 0: Bad month.\n",
      "mutant_output": "cal: 0: Bad month.\n",
      "explanation": "Both programs receive an invalid input for the month parameter and print the same error message, resulting in equivalent behavior."
    }
  ]
},{
  "mutant_program": "muta2438_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-"
      ],
      "original_output": "   September 2021\n S  M Tu  W Th  F  S\n          1  2  3  4\n   5  6  7  8  9 10 11\n  12 13 14 15 16 17 18\n  19 20 21 22 23 24 25\n  26 27 28 29 30\n",
      "mutant_output": "   September 2021\n S  M Tu  W Th  F  S\n          1  2  3  4\n   5  6  7  8  9 10 11\n  12 13 14 15 16 17 18\n  19 20 21 22 23 25 25\n  26 27 28 29 30\n",
      "explanation": "The mutant has a mistake in the cal() function, causing the mutant output to have an extra '25' on the last row, while the original output is correct. This can be observed by providing the input ['-'] to both programs, which prints the calendar for the current month."
    },
    {
      "input": [
        "6",
        "2022"
      ],
      "original_output": "   June 2022\n S  M Tu  W Th  F  S\n          1  2  3  4\n   5  6  7  8  9 10 11\n  12 13 14 15 16 17 18\n  19 20 21 22 23 24 25\n  26 27 28 29 30\n",
      "mutant_output": "   June 2022\n S  M Tu  W Th  F  S\n          1  2  3  4\n   5  6  7  8  9 10 11\n  12 13 14 15 16 17 18\n  19 20 21 22 24 24 25\n  26 27 28 29 30\n",
      "explanation": "Both the original and mutant programs correctly output the calendar for the month of June in the year 2022. This can be observed by providing input ['6', '2022'] to both programs."
    }
  ]
},{
  "mutant_program": "muta2439_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta2440_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [],
      "original_output": "   May 2021\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n\n\n",
      "mutant_output": null,
      "explanation": "No arguments were provided, original program prints the calendar of the current month (May 2021). Mutant program expects at least 1 argument, thus it returns null"
    },
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "   May 2021\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n\n\n",
      "mutant_output": "   May 2021\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n\n\n",
      "explanation": "Both programs are equivalent when the '-' argument is provided followed by a valid month. May 2021 has 31 days, thus the cal function of both programs return the same calendar string"
    },
    {
      "input": [
        "-",
        "13"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "Both programs output the same error message, since 13 is not a valid month"
    }
  ]
},{
  "mutant_program": "muta2460_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [],
      "original_output": "   October 2022\n S  M Tu  W Th  F  S\n                   1  \n 2  3  4  5  6  7  8  \n 9 10 11 12 13 14 15  \n16 17 18 19 20 21 22  \n23 24 25 26 27 28 29  \n30 31                \n",
      "mutant_output": "   October 2022\n S  M Tu  W Th  F  S\n                   1  \n 2  3  4  5  6  7  8  \n 9 10 11 12 13 14 15  \n16 17 18 19 20 21 22  \n23 24 25 26 27 28 29  \n30 31                \n",
      "explanation": "Both programs should output the same calendar for the current month when no arguments are provided"
    },
    {
      "input": [
        "-",
        "10"
      ],
      "original_output": "   October 2022\n S  M Tu  W Th  F  S\n                   1  \n 2  3  4  5  6  7  8  \n 9 10 11 12 13 14 15  \n16 17 18 19 20 21 22  \n23 24 25 26 27 28 29  \n30 31                \n",
      "mutant_output": "   October 2022\n S  M Tu  W Th  F  S\n                   1  \n 2  3  4  5  6  7  8  \n 9 10 11 12 13 14 15  \n16 17 18 19 20 21 22  \n23 24 25 26 27 28 29  \n30 31                \n",
      "explanation": "Both programs should output the same calendar for the month specified in the argument"
    },
    {
      "input": [
        "-",
        "10",
        "2022"
      ],
      "original_output": "   October 2022\n S  M Tu  W Th  F  S\n                   1  \n 2  3  4  5  6  7  8  \n 9 10 11 12 13 14 15  \n16 17 18 19 20 21 22  \n23 24 25 26 27 28 29  \n30 31                \n",
      "mutant_output": "   October 2022\n S  M Tu  W Th  F  S\n                   1  \n 2  3  4  5  6  7  8  \n 9 10 11 12 13 14 15  \n16 17 18 19 20 21 22  \n23 24 25 26 27 28 29  \n30 31                \n",
      "explanation": "Both programs should output the same calendar for the month and year specified in the arguments"
    },
    {
      "input": [
        "-",
        "13",
        "2022"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "",
      "explanation": "The mutant program should output an error message for an invalid month argument"
    },
    {
      "input": [
        "-",
        "10",
        "10000"
      ],
      "original_output": "cal: 10000: Bad year.\n",
      "mutant_output": "",
      "explanation": "The mutant program should output an error message for an invalid year argument"
    }
  ]
},{
  "mutant_program": "muta2542_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta2544_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta2567_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta2574_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [],
      "original_output": "   June 2021\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30\n",
      "mutant_output": null,
      "explanation": "The output of the original program displays a calendar for the current month, which is June 2021. The mutant program is incomplete and has a syntax error in the pstr function, causing it to fail to compile and not produce any output. Hence, the mutant program is not equivalent to the original program."
    },
    {
      "input": [
        "-m",
        "3",
        "2022"
      ],
      "original_output": "   March 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31\n",
      "mutant_output": null,
      "explanation": "The output of the original program displays a calendar for March 2022. The mutant program is incomplete and has a syntax error in the pstr function, causing it to fail to compile and not produce any output. Hence, the mutant program is not equivalent to the original program."
    }
  ]
},{
  "mutant_program": "muta2583_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta2584_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "12",
        "2020"
      ],
      "original_output": "   December 2020\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31\n\n\n",
      "mutant_output": null,
      "explanation": "The original program is a calendar. When given the input '- 12 2020', it outputs the calendar of December 2020. The mutant code seems to have two changes: it removed the include for <sys/types.h> and it changed the pstr function. The test provided works with the original program, but the mutant code does not even compile, since it is missing the definition for the driver function."
    }
  ]
},{
  "mutant_program": "muta2585_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "January",
        2022
      ],
      "original_output": "    January 2022\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31                 \n\n",
      "mutant_output": "    January 2022\n S  M Tu  W Th  F  S\n 1 23 45 67 89     \n11 21 31 41 51 61 71\n 2 34 56 78     910 \n12 22 32 42 52 62 72\n 3 46 89          \n13 23 33 43 53 63 73\n\n\n",
      "explanation": "The mutant program changed the condition within the while loop in the pstr function from 'i--' to '(i &= (n + 1))', causing the test output to change."
    }
  ]
},{
  "mutant_program": "muta2588_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "2"
      ],
      "original_output": "   February 2021\n S  M Tu  W Th  F  S\n",
      "mutant_output": "   February 2021\n S  M Tu  W Th  F  S\n",
      "explanation": "This input calls the driver function with the argument '- 2', which prints the calendar for February 2021. Both the original program and the mutant program output the same calendar."
    },
    {
      "input": [
        "2021"
      ],
      "original_output": null,
      "mutant_output": null,
      "explanation": "This input calls the dispatch function with the argument '2021', which prints a full-year calendar for 2021. However, there is a syntax error in the mutant program where the semicolon on the first line causes a parsing error and prevents the program from running at all. Therefore, no output is produced by either program."
    }
  ]
},{
  "mutant_program": "muta2621_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "12345678901234567890123456789012345678901234567890123456789012345678901234567890",
        30
      ],
      "original_output": "123456789012345678901234567890\n                       \n",
      "mutant_output": "123456789012345678901234567890                        \n",
      "explanation": "The mutated code changes the condition of the second while loop in the pstr function, which truncates trailing spaces in the output string. The original code checks if the current character is null, whereas the mutant code checks if it is not a space. This leads to a different output for the same input. The provided test case demonstrates this, where the output string has 30 characters with trailing spaces."
    }
  ]
},{
  "mutant_program": "muta2624_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "123456789012345678901234567890123456789012345678  ",
        30
      ],
      "original_output": "123456789012345678901234567890\n123456789012345678              \n",
      "mutant_output": "123456789012345678901234567890\n123456789012345678              \n",
      "explanation": "The original and mutant code should output the same result."
    },
    {
      "input": [
        "    123456789012345678901234567890123456789012345678",
        30
      ],
      "original_output": "    123456789012345678901234567890\n123456789012345678              \n",
      "mutant_output": "    123456789012345678901234567890\n123456789012345678               \n",
      "explanation": "The mutant has a conditional in the while loop that checks if the current character is a space instead of checking if it is null. In this test case, the original would replace the last space with a null character while the mutant would not. Therefore, the outputs are different."
    }
  ]
},{
  "mutant_program": "muta2630_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "hello world",
        11
      ],
      "original_output": "hello world ",
      "mutant_output": "hello world",
      "explanation": "The mutant code changes the condition in the second while loop of the pstr function. The original code checked whether the current character was null whereas the mutant code checks whether the XOR of the current character with the space character is not zero. As a result, the original code adds an extra space at the end of the string while the mutant code removes it."
    },
    {
      "input": [
        "testing",
        3
      ],
      "original_output": "testing   ",
      "mutant_output": "testing  ",
      "explanation": "The same issue as in the previous test case applies here. The original code adds an extra space at the end of the string while the mutant code removes it."
    },
    {
      "input": [
        "apple",
        6
      ],
      "original_output": "apple  ",
      "mutant_output": "apple",
      "explanation": "The same issue as in the first test case applies here. The original code adds an extra space at the end of the string while the mutant code removes it."
    }
  ]
},{
  "mutant_program": "muta2637_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "2",
        "2022"
      ],
      "original_output": "   February 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28\n\n",
      "mutant_output": "   February 2022\n S  M Tu  W Th  F  S\n1  2  3  4  5  6\n7  8  9  10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28\n\n",
      "explanation": "The mutant changes the if condition for checking if an argument is missing from 'if(argc < 2)' to 'if (argc == 2)', so the program always assumes there is exactly one argument and it is the month. This creates a problem on line 47, because 'argv[1]' is the year instead of the month. Thus, it produces incorrect output compared with the original program."
    },
    {
      "input": [
        "-",
        "2022"
      ],
      "original_output": "   October 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n",
      "mutant_output": "Error: 'jan1' undeclared.\n",
      "explanation": "The mutant removes the need to include the libraries, which causes 'jan1' to be undefined, and thus it fails to compile."
    },
    {
      "input": [
        "13",
        "9999"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "The mutant uses the same control flow as the original program, and it is equivalent for invalid input."
    }
  ]
},{
  "mutant_program": "muta2641_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "12",
        "2021"
      ],
      "original_output": "   December 2021\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31\n\n",
      "mutant_output": "   December 2021\n S  M Tu  W Th  F  S\n          0  0  0  4\n 0  0  0  0  0  0  0\n 0  0  0  0  0  0  0\n 0  0  0  0  0  0  0\n 0  0  0  0  0  0  0\n\n",
      "explanation": "The mutant program replaces the condition 'if((*s++) != ' ' )' with 'if ( ((* (-- s)) > ' ') )'. Both conditions are equivalent. However, while running this mutant program it produces the different outputs for the given test case. The testcase is to show the calender of 12 months in 2021. The original program gives the desire output but the mutant program is not giving the desired output because *s++ leaves an empty space and therefore, produces an incorrect number for printing months of each year."
    },
    {
      "input": [
        "1"
      ],
      "original_output": "   January 2022\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n\n",
      "mutant_output": "   January 1\n S  M Tu  W Th  F  S\n             3   \n 0  0  0  0  0  0  0\n 0  0  0  0  0  0  0\n 0  0  0  0  0  0  0\n 0  0  0  0  0  0  0\n\n",
      "explanation": "The mutant program replaces the date and year 'January 2022' with 'January 1'. This mutation in the code is incorrect and produces the wrong output. For the given test case, the output of the mutant program is incorrect and different from the original program. Therefore, we consider that the original program and the mutated program are not equivalent."
    }
  ]
},{
  "mutant_program": "muta2697_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "5",
        "2022"
      ],
      "original_output": "       May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31           \n\n\n\n\n",
      "mutant_output": "        May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31            \n\n\n\n\n\n",
      "explanation": "The mutant program inserts an extra space after the last digit in May, and the original program ends the month with a space. This test checks the program on whether or not it can correctly calculate the days of May 2022."
    },
    {
      "input": [
        "0"
      ],
      "original_output": "        May 2021\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n\n\n\n\n",
      "mutant_output": "        May 1\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n\n\n\n",
      "explanation": "The mutant program is unable to calculate the full year's calendar at once, so the extra padding for spacing after the year number is gone. This test checks whether the code can run any month given and calculate the full year."
    }
  ]
},{
  "mutant_program": "muta2698_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "123456789",
        9
      ],
      "original_output": "123456789\n",
      "mutant_output": "123456789 \n",
      "explanation": "The mutant code has a trap statement that checks if the given length is zero, but the original code does not. In this test case, the given string is already of length 9, so the trap statement does not affect the output. However, when the given length is less than the string length, the mutant code could potentially add extra spaces to the output while the original code would just print the string without modification."
    },
    {
      "input": [
        "",
        5
      ],
      "original_output": "     \n",
      "mutant_output": "       \n",
      "explanation": "In this test case, the given string is empty and the given length is 5. The original code prints 5 spaces with a newline character, while the mutant code prints 7 spaces with a newline character due to the trap statement adding an extra space before the newline character."
    },
    {
      "input": [
        "hello",
        2
      ],
      "original_output": "he  \nlo\n",
      "mutant_output": "he \n lo\n",
      "explanation": "In this test case, the given string has a length of 5 and the given length is 2. The original code splits the string into two lines with 2 spaces in the first line and 3 spaces in the second line, while the mutant code splits the string into two lines with 3 spaces in the first line and 2 spaces in the second line."
    }
  ]
},{
  "mutant_program": "muta2703_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        7,
        2021
      ],
      "original_output": "   July 2021\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n\n",
      "mutant_output": "   July 2021\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n\n",
      "explanation": "The output of the original and mutant programs for this input is the same. It is difficult to determine the output for tests with non-deterministic changes."
    },
    {
      "input": [
        13,
        2022
      ],
      "original_output": "",
      "mutant_output": "cal: Bad month.\n",
      "explanation": "The mutant program does not validate input correctly, causing it to fail and print an error message when the input is invalid. The original program would also print an error message in this case."
    },
    {
      "input": [
        "-",
        2021
      ],
      "original_output": "   October 2022\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n\n",
      "mutant_output": "   October 2022\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n\n",
      "explanation": "The output of the original and mutant programs for this input is the same. It is difficult to determine the output for tests with non-deterministic changes."
    }
  ]
},{
  "mutant_program": "muta2704_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "hello",
        5
      ],
      "original_output": "hello ",
      "mutant_output": "hello  ",
      "explanation": "The mutant code adds an extra space to the string when there is a null character, which can change the output when printed"
    },
    {
      "input": [
        "world",
        3
      ],
      "original_output": "wor",
      "mutant_output": "wor",
      "explanation": "The output is the same because the null character is not reached, therefore the mutant code does not have an effect"
    },
    {
      "input": [
        "hi there",
        8
      ],
      "original_output": "hi there ",
      "mutant_output": "hi there ",
      "explanation": "The output is the same because there is no null character within the first 8 characters of the string, therefore the mutant code does not have an effect"
    }
  ]
},{
  "mutant_program": "muta2729_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "12345",
        5
      ],
      "original_output": "12345\n",
      "mutant_output": "12345 ",
      "explanation": "The mutant program changes one character of the output, replacing the newline with a space. This causes the output to have a trailing space, which is not present in the original program's output."
    },
    {
      "input": [
        "67890",
        7
      ],
      "original_output": "67890  \n",
      "mutant_output": "67890  ",
      "explanation": "The input parameter 'n' is 7, which is a corner case where the original program barely fits without having a trailing space, but the mutant program still adds one."
    },
    {
      "input": [
        "abcdefg",
        3
      ],
      "original_output": "abc defg",
      "mutant_output": "ab cdefg",
      "explanation": "The mutant program inserts a space where the original program didn't, causing the output to have a space in the middle."
    }
  ]
},{
  "mutant_program": "muta2740_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "3"
      ],
      "original_output": "   March 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n   6  7  8  9 10 11 12\n  13 14 15 16 17 18 19\n  20 21 22 23 24 25 26\n  27 28 29 30 31\n",
      "mutant_output": "   March 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n   6  7  8  9 10 11 12\n  13 14 15 16 17 18 19\n  20 21 22 23 24 25 26\n  27 28 29 30 31\n",
      "explanation": "The mutant code does not make any changes to the output or the execution of the program. It adds some white spaces, semicolons, and an argument, but it does not change the program's behavior. Therefore, the output is the same as the original."
    },
    {
      "input": [
        "-",
        "16"
      ],
      "original_output": "   April 2023\n S  M Tu  W Th  F  S\n                    1\n   2  3  4  5  6  7  8\n   9 10 11 12 13 14 15\n  16 17 18 19 20 21 22\n  23 24 25 26 27 28 29\n  30\n",
      "mutant_output": "   April 2023\n S  M Tu  W Th  F  S\n                    1\n   2  3  4  5  6  7  8\n   9 10 11 12 13 14 15\n  16 17 18 19 20 21 22\n  23 24 25 26 27 28 29\n  30\n",
      "explanation": "The mutant code does not make any changes to the output or the execution of the program. It adds some white spaces, semicolons, and an argument, but it does not change the program's behavior. Therefore, the output is the same as the original."
    },
    {
      "input": [
        "14",
        "2021"
      ],
      "original_output": "   November 2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n   7  8  9 10 11 12 13\n  14 15 16 17 18 19 20\n  21 22 23 24 25 26 27\n  28 29 30\n",
      "mutant_output": "   November 2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n   7  8  9 10 11 12 13\n  14 15 16 17 18 19 20\n  21 22 23 24 25 26 27\n  28 29 30\n",
      "explanation": "The mutant code does not make any changes to the output or the execution of the program. It adds some white spaces, semicolons, and an argument, but it does not change the program's behavior. Therefore, the output is the same as the original."
    }
  ]
},{
  "mutant_program": "muta2741_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta2742_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "   May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31\n\n\n",
      "mutant_output": "   May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31\n\n\n",
      "explanation": "The original and mutant programs have equivalent output for this input."
    },
    {
      "input": [
        "5",
        "2023"
      ],
      "original_output": "   May 2023\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31\n\n\n",
      "mutant_output": "   May 2023\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31\n\n\n",
      "explanation": "The original and mutant programs have equivalent output for this input."
    },
    {
      "input": [
        "13",
        "1900"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "The original and mutant programs have equivalent output for this input."
    },
    {
      "input": [
        "4",
        "12345"
      ],
      "original_output": "cal: 12345: Bad year.\n",
      "mutant_output": "cal: 12345: Bad year.\n",
      "explanation": "The original and mutant programs have equivalent output for this input."
    },
    {
      "input": [
        "-",
        "13"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "The original and mutant programs have equivalent output for this input."
    },
    {
      "input": [
        "14",
        "2022"
      ],
      "original_output": "cal: 14: Bad month.\n",
      "mutant_output": "cal: 14: Bad month.\n",
      "explanation": "The original and mutant programs have equivalent output for this input."
    },
    {
      "input": [
        "5",
        "-1"
      ],
      "original_output": "cal: -1: Bad year.\n",
      "mutant_output": "cal: -1: Bad year.\n",
      "explanation": "The original and mutant programs have equivalent output for this input."
    }
  ]
},{
  "mutant_program": "muta2745_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "10",
        "2021"
      ],
      "original_output": "  October 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n",
      "mutant_output": "  October 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n",
      "explanation": "The mutant code has a non-deterministic change in line 75. However, this change does not impact the output produced. Thus, both original and mutant program outputs are the same."
    },
    {
      "input": [
        "-",
        "15",
        "2022"
      ],
      "original_output": "  March 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31\n",
      "mutant_output": "",
      "explanation": "The mutant code does not have an equivalent program. Thus, it should not generate an output. In this test case, mutant_program `cal` does not generate an output."
    },
    {
      "input": [
        "abc",
        "2022"
      ],
      "original_output": "",
      "mutant_output": "cal: abc: Bad month.\n",
      "explanation": "The mutant code has a non-deterministic change in line 33. This change would throw a Bad month error if the first argument is not a number. Thus, the original program will not generate an output, and the mutant code is expected to throw a Bad month error."
    }
  ]
},{
  "mutant_program": "muta2746_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta2751_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta2765_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "8"
      ],
      "original_output": "   August 2022\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31          \n\n",
      "mutant_output": "   August 2022\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 31 30          \n\n",
      "explanation": "The mutant program changes line 105 from (mon[29] = 30) to ((mon[29] = 30) ;) in an attempt to introduce an extraneous statement. This does affect the output of the program because it changes the order in which the days are displayed. The last two days of the month are swapped, causing the output to be malformed."
    },
    {
      "input": [
        "-",
        "2",
        "2021"
      ],
      "original_output": "  February 2021\n S  M Tu  W Th  F  S\n     1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28\n\n",
      "mutant_output": "  February 2021\n S  M Tu  W Th  F  S\n     1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 16 17 18 19 20 15\n21 22 23 24 25 26 27\n28\n\n",
      "explanation": "This test checks the month of February in a non-leap year. The original program code correctly outputs a calendar with 28 days, while the mutated code generates a calendar with 29 days. This is caused by the extraneous code added to the mutant code in line 105."
    },
    {
      "input": [
        "-",
        "15",
        "2022"
      ],
      "original_output": "cal: 15: Bad month.\n",
      "mutant_output": "cal: -1188137677: Bad month.\n",
      "explanation": "This test checks the output of the program when an invalid month is provided as input. Both programs output an error message."
    }
  ]
},{
  "mutant_program": "muta2766_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta2769_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "   May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31\n\n",
      "mutant_output": "   May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 25 25 26 27 28\n29 30 31\n\n",
      "explanation": "The mutant program modified the number of days in May by changing one of the values in the mon[] array. This results in the output being different compared to the original program, as the last week has different dates."
    },
    {
      "input": [
        "-",
        "2",
        "2022"
      ],
      "original_output": "   February 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28\n\n",
      "mutant_output": "   February 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28\n\n",
      "explanation": "The mutant program did not modify the output of the original program when given explicit input."
    }
  ]
},{
  "mutant_program": "muta2770_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "5",
        "2021"
      ],
      "original_output": "     May 2021\n S  M Tu  W Th  F  S\n                    1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n",
      "mutant_output": "     May 2021\n S  M Tu  W Th  F  S\n                    1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n",
      "explanation": "The mutant code only adds parentheses in one of the assignments to variable mon. This does not affect the output of the program, so the mutant is equivalent to the original."
    },
    {
      "input": [
        "6",
        "2022"
      ],
      "original_output": "    June 2022\n S  M Tu  W Th  F  S\n             1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30\n",
      "mutant_output": "    June 2022\n S  M Tu  W Th  F  S\n             1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30\n",
      "explanation": "The mutant code changes the value of mon[19] from 30 to 19. This will affect the output of the program for September, which has 19 days instead of 30."
    }
  ]
},{
  "mutant_program": "muta2772_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta2775_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta2789_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "   May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31         \n\n\n",
      "mutant_output": "   May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31         \n\n\n",
      "explanation": "The original and mutated code produce the same output for this test case."
    },
    {
      "input": [
        "12",
        "2021"
      ],
      "original_output": "   December 2021\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \n\n",
      "mutant_output": "   December 2021\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \n\n",
      "explanation": "The original and mutated code produce the same output for this test case."
    },
    {
      "input": [
        "-",
        "0"
      ],
      "original_output": "...Bad year.\n",
      "mutant_output": "...Bad year.\n",
      "explanation": "The original and mutated code produce the same error message for this test case."
    },
    {
      "input": [
        "13",
        "2021"
      ],
      "original_output": "...Bad month.\n",
      "mutant_output": "...Bad month.\n",
      "explanation": "The original and mutated code produce the same error message for this test case."
    },
    {
      "input": [
        "-",
        "2022",
        "some_argument"
      ],
      "original_output": "...Bad month.\n",
      "mutant_output": "...Bad month.\n",
      "explanation": "The original and mutated code produce the same error message for this test case."
    },
    {
      "input": [
        "asdfasfghafddf",
        "2021"
      ],
      "original_output": "...Bad month.\n",
      "mutant_output": "...Bad month.\n",
      "explanation": "The original and mutated code produce the same error message for this test case."
    }
  ]
},{
  "mutant_program": "muta2805_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta2883_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta3222_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "6"
      ],
      "original_output": "   June 2021\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30\n\n\n",
      "mutant_output": "   June 2021\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30\n\n\n",
      "explanation": "The mutant code preserved the behavior of the original program for this test, so the output is the same."
    },
    {
      "input": [
        "-",
        "2"
      ],
      "original_output": "   February 2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28\n\n\n",
      "mutant_output": "   February 2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28\n\n\n",
      "explanation": "The mutant code preserved the behavior of the original program for this test, so the output is the same."
    },
    {
      "input": [
        "5",
        "2000"
      ],
      "original_output": "   May 2000\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31\n\n\n",
      "mutant_output": "   May 2000\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31\n\n\n",
      "explanation": "The mutant code preserved the behavior of the original program for this test, so the output is the same."
    },
    {
      "input": [
        "3",
        "1600"
      ],
      "original_output": "   March 1600\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31\n\n\n",
      "mutant_output": "   March 1600\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31\n\n\n",
      "explanation": "The mutant code preserved the behavior of the original program for this test, so the output is the same."
    },
    {
      "input": [
        "2",
        "10000"
      ],
      "original_output": "cal: 10000: Bad year.\n",
      "mutant_output": "",
      "explanation": "The original program correctly identifies that 10000 is a bad year, but the mutant program outputs nothing for this input, making the outputs different."
    }
  ]
},{
  "mutant_program": "muta3248_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta3480_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "12"
      ],
      "original_output": "   December 2021\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31\n\n",
      "mutant_output": "   December 2021\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31\n\n",
      "explanation": "The original and mutant code worked the same for this test case, which was to print the calendar for December 2021. As the original and mutant outputs are the same, we can say the mutant code is equivalent to the original code."
    },
    {
      "input": [
        "-",
        "-2022"
      ],
      "original_output": "cal: -2022: Bad year.\n",
      "mutant_output": "cal: -2022: Bad year.\n",
      "explanation": "The original and mutant code failed the same way for this test case, which was to print an invalid year. As the original and mutant outputs are the same, we can say the mutant code is equivalent to the original code."
    },
    {
      "input": [
        "15",
        "2021"
      ],
      "original_output": "cal: 15: Bad month.\n",
      "mutant_output": "cal: 15: Bad month.\n",
      "explanation": "The original and mutant code failed the same way for this test case, which was to print an invalid month. As the original and mutant outputs are the same, we can say the mutant code is equivalent to the original code."
    },
    {
      "input": [
        "4",
        "eleven"
      ],
      "original_output": "cal: eleven: Bad year.\n",
      "mutant_output": "cal: eleven: Bad year.\n",
      "explanation": "The original and mutant code failed the same way for this test case, which was to print an invalid year. As the original and mutant outputs are the same, we can say the mutant code is equivalent to the original code."
    },
    {
      "input": [
        "-4"
      ],
      "original_output": "cal: -4: Bad year.\n",
      "mutant_output": "cal: -4: Bad year.\n",
      "explanation": "The original and mutant code failed the same way for this test case, which was to print an invalid year. As the original and mutant outputs are the same, we can say the mutant code is equivalent to the original code."
    }
  ]
},{
  "mutant_program": "muta3490_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [],
      "original_output": "   June 2022\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30\n\n\n",
      "mutant_output": "   June 2022\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30\n\n\n",
      "explanation": "The original program outputed the correct calendar for the month of June 2022. The mutant code changed only one line of code inside the \"cal\" function, but enough to break the program in a way that would not produce correct output. The mutant code changed a pointer to a char."
    },
    {
      "input": [
        "-",
        "6",
        "2022"
      ],
      "original_output": "   June 2022\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30\n\n\n",
      "mutant_output": "   June 2022\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30\n\n\n",
      "explanation": "The mutant code did not remove any functionality but modified a different line of code producing no effect on the output."
    }
  ]
},{
  "mutant_program": "muta3492_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "7"
      ],
      "original_output": "   July 2021\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n",
      "mutant_output": "   July 2021\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n",
      "explanation": "Both programs run the same with the given input, because the mutant code only changes a small part of the cal function and does not affect the program output"
    },
    {
      "input": [
        "-",
        "13"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "Both programs run the same with the given input, because both inputs are invalid."
    },
    {
      "input": [
        "15",
        "0"
      ],
      "original_output": "cal: 0: Bad year.\n",
      "mutant_output": "cal: 0: Bad year.\n",
      "explanation": "Both programs run the same with the given input because both inputs are invalid"
    }
  ]
},{
  "mutant_program": "muta3496_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "2"
      ],
      "original_output": "   February 2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28\n",
      "mutant_output": "   February 2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8   9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28\n",
      "explanation": "The mutant program removes a character of the calendar format, changing the position of the days, so the output is different."
    },
    {
      "input": [
        "3",
        "2021"
      ],
      "original_output": "    March 2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31\n",
      "mutant_output": "    March 2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25  26 27\n28 29 30 31\n",
      "explanation": "The mutant program removes a character of the calendar format, changing the position of the days, so the output is different."
    }
  ]
},{
  "mutant_program": "muta3498_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "7"
      ],
      "original_output": "   July 2021\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n",
      "mutant_output": "   July 2021\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n",
      "explanation": "The mutant did not change any functionality of original program"
    },
    {
      "input": [
        "12",
        "2023"
      ],
      "original_output": "   December 2023\n S  M Tu  W Th  F  S\n                1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n\n\n",
      "mutant_output": "",
      "explanation": "The mutant code removed the entire block of xlong, which is responsible to print out a complete year. As a result the mutant output is empty."
    },
    {
      "input": [
        "13",
        "2022"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "The mutant did not change any functionality of original program and produced the same error message for invalid month."
    },
    {
      "input": [
        "12",
        "-2020"
      ],
      "original_output": "cal: -2020: Bad year.\n",
      "mutant_output": "cal: -2020: Bad year.\n",
      "explanation": "The mutant did not change any functionality of original program and produced the same error message for invalid year."
    }
  ]
},{
  "mutant_program": "muta3633_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta3644_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "1",
        "2021"
      ],
      "original_output": "   January 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n",
      "mutant_output": "   January 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n",
      "explanation": "The input month and year are valid, so both original and mutant code enter the if condition and display the January 2021 calendar. No changes in output."
    },
    {
      "input": [
        "13",
        "2021"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "The input month is invalid (greater than 12), so both original and mutant code display an error message. No changes in output."
    },
    {
      "input": [
        "1"
      ],
      "original_output": "   January 2022\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n\n",
      "mutant_output": "cal: Bad year.\n",
      "explanation": "The input year is missing, so the original program displays the calendar for January 2022 (current year + 1). The mutant program displays an error message because the year is missing, which is different from the original output."
    }
  ]
},{
  "mutant_program": "muta3649_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta3651_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta3659_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "5",
        "2021"
      ],
      "original_output": "      May 2021\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n\n",
      "mutant_output": "      May 2021\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n         \n\n",
      "explanation": "The mutant code changes the value of the days in May, making the last 2 days disappear, thus the output is different"
    },
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "      June 2021\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30\n\n",
      "mutant_output": "      June 2021\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30\n\n",
      "explanation": "The mutant code does not affect the output of this test case, thus they are equivalent"
    }
  ]
},{
  "mutant_program": "muta3661_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "7"
      ],
      "original_output": "   July 2021\n S  M Tu  W Th  F  S\n              1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n",
      "mutant_output": "   July 2021\n S  M Tu  W Th  F  S\n               1 2 3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n",
      "explanation": "The mutant program changes a '|' symbol in the first month, from column 3 to column 4, causing the days of the week to shift one spot to the right. This is noticeable in the mutant output where the first day of July appears as ' 1' instead of ' 1', causing a big deviation from the original output."
    },
    {
      "input": [
        "5",
        "2022"
      ],
      "original_output": "   May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31\n\n\n",
      "mutant_output": "   May 2022\n S  M Tu  W Th  F  S\n  1 2 3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31\n\n\n",
      "explanation": "The mutant program changes a '|' symbol in the first month, from column 3 to column 2, causing the days of the week to shift one spot to the left. However, this does not affect the generated output, so the programs are equivalent for this input."
    }
  ]
},{
  "mutant_program": "muta3662_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "4",
        "2020"
      ],
      "original_output": "    April 2020\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30\n\n\n\n",
      "mutant_output": "    April 2020\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30\n\n\n\n",
      "explanation": "The output is the same because the mutation does not affect the behavior of the program for the input provided."
    },
    {
      "input": [
        "13"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "The output is the same because the mutation does not affect the behavior of the program for the input provided."
    },
    {
      "input": [
        "0",
        "2020"
      ],
      "original_output": "    January 2020\n S  M Tu  W Th  F  S\n           1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31\n\n",
      "mutant_output": "    January 2020\n S  M Tu  W Th  F  S\n           1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31\n \n",
      "explanation": "The mutant program inserts a space character at the end of line 7 in the output, which changes it even though the input is correct."
    }
  ]
},{
  "mutant_program": "muta3664_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "   May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31            \n\n",
      "mutant_output": "   May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31            \n\n",
      "explanation": "The mutant code is equivalent to the original program code for this input. Both programs output the same calendar for the month of May 2022."
    },
    {
      "input": [
        "12",
        "2022"
      ],
      "original_output": "   December 2022\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n\n\n",
      "mutant_output": "   December 2022\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n\n\n",
      "explanation": "The mutant code is equivalent to the original program code for this input. Both programs output the same calendar for December 2022."
    },
    {
      "input": [
        "13",
        "2022"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "The mutant code is equivalent to the original program code for this input. Both programs output an error message stating that the month entered is invalid."
    },
    {
      "input": [
        "12",
        "10000"
      ],
      "original_output": "cal: 10000: Bad year.\n",
      "mutant_output": "cal: 10000: Bad year.\n",
      "explanation": "The mutant code is equivalent to the original program code for this input. Both programs output an error message stating that the year entered is invalid."
    },
    {
      "input": [
        "-",
        "2000"
      ],
      "original_output": "   August 2021\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31            \n\n",
      "mutant_output": "   August 2000\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31     \n\n",
      "explanation": "The mutant code is not equivalent to the original program code for this input. The original program code outputs the calendar for August 2021, while the mutant code outputs the calendar for August 2000. The value for the year entered is different in each case, resulting in different outputs."
    }
  ]
},{
  "mutant_program": "muta3665_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-"
      ],
      "original_output": "   August 2021\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7 \n 8  9 10 11 12 13 14 \n15 16 17 18 19 20 21 \n22 23 24 25 26 27 28 \n29 30 31 \n\n",
      "mutant_output": "   August 2021\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7 \n 8  \n\n\n"
    },
    {
      "input": [
        "8",
        "2021"
      ],
      "original_output": "   August 2021\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7 \n 8  9 10 11 12 13 14 \n15 16 17 18 19 20 21 \n22 23 24 25 26 27 28 \n29 30 31 \n\n",
      "mutant_output": "   August 2021\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7 \n 8  \n\n\n"
    }
  ]
},{
  "mutant_program": "muta3671_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "5",
        "2022"
      ],
      "original_output": "    May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31          \n\n\n\n",
      "mutant_output": "    May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31          \n\n\n\n",
      "explanation": "The mutant program modifies the code in a way that does not affect the output"
    },
    {
      "input": [
        "2",
        "2000"
      ],
      "original_output": " February 2000\n S  M Tu  W Th  F  S\n       1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28                   \n\n\n\n",
      "mutant_output": " February 2000\n S  M Tu  W Th  F  S\n       1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28                   \n\n\n\n",
      "explanation": "The mutant program modifies the code in a way that does not affect the output"
    },
    {
      "input": [
        "15",
        "3000"
      ],
      "original_output": "cal: 15: Bad month.\n",
      "mutant_output": "cal: 15: Bad month.\n",
      "explanation": "The mutant program modifies the code in a way that does not affect the output"
    }
  ]
},{
  "mutant_program": "muta3678_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "   May 2021\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9  10 11 12 13 14 15\n 16 17 18 19 20 21 22\n 23 24 25 26 27 28 29\n 30 31               \n\n\n",
      "mutant_output": "   May 2021\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9  10 11 12 13 14 15\n<!--This is a mutant program.-->\n17 18 19 20 21 22\n 23 24 25 26 27 28 29\n 30 31               \n\n\n",
      "explanation": "The original program correctly displays the calendar for May 2021. The mutant program, with the comment identifying it as a mutant, has a typo in the month of May that causes the calendar to shift, leaving a partial comment in its place. This test confirms that the mutant code is not equivalent to the original code."
    },
    {
      "input": [
        "4",
        "2022"
      ],
      "original_output": "   April 2022\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n\n\n\n",
      "mutant_output": "   April 2022\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7<!--This is a mutant program.-->\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n\n\n",
      "explanation": "The original and mutant programs display the calendar for April 2022. However, the mutant program has a comment that caused the output to shift over by one character. This test confirms that the mutant code is not equivalent to the original code."
    }
  ]
},{
  "mutant_program": "muta3679_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "10",
        "2021"
      ],
      "original_output": "   October 2021\n S  M Tu  W Th  F  S\n                1  2 \n 3  4  5  6  7  8  9 \n10 11 12 13 14 15 16 \n17 18 19 20 21 22 23 \n24 25 26 27 28 29 30 \n31                   \n\n",
      "mutant_output": "   October 2021\n  5 10 11 12 13 14 15\n   16 17 18 19 20 21 22\n   23 24 25 2627282930\n31                   \n\n",
      "explanation": "The mutant program changes how the days of the month are displayed by replacing the first decimal digit of each day with the digit that represents its corresponding ten's place. This causes the output to be significantly different from the original, with all the days shifted to the left and overlapping, as well as some days being displayed incorrectly."
    }
  ]
},{
  "mutant_program": "muta3681_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta3682_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta3683_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta3716_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [],
      "original_output": "   October 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n",
      "mutant_output": "   October 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n                   \n",
      "explanation": "The mutant replaces a conditional in the cal function using bitwise multiplication instead of boolean multiplication, resulting in different behavior for the condition 'if ( ((i == 3) && (mon[m] == 19)))'. This results in the function producing different output when the input month is September."
    },
    {
      "input": [
        "-",
        "10"
      ],
      "original_output": "   October 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n",
      "mutant_output": "   October 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n                   \n",
      "explanation": "The same mutant as previously described produces different output when given a different input where '-' is the first parameter."
    }
  ]
},{
  "mutant_program": "muta3720_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta3773_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta3776_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "   May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31\n\n\n",
      "mutant_output": "",
      "explanation": "The test is to see if a single output is printed on the console when the input is a valid month using the original program code and the mutant. The original program code passes the test because it successfully prints the calendar for May. The mutant program does not print anything to the console, indicating that it is not equivalent and may have a bug in dispatch function. "
    },
    {
      "input": [
        "-",
        "0"
      ],
      "original_output": "   January 2022\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n\n\n",
      "mutant_output": "cal: 0: Bad month.\n",
      "explanation": "The test is to check if an error message is printed to the console when an out of range month is used as input for both original and mutant programs. The original program and mutant both passed the test, reporting that zero is a bad month."
    },
    {
      "input": [
        "12",
        "99999"
      ],
      "original_output": "cal: 99999: Bad year.\n",
      "mutant_output": "cal: 99999: Bad year.\n",
      "explanation": "The test is to check if an error message is printed to the console when an invalid year is used as input for both original and mutant programs. The original and mutant programs both passed the test because they tried to use year 99999 which is out of range and prompted an error message."
    }
  ]
},{
  "mutant_program": "muta3785_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "5",
        "2021"
      ],
      "original_output": "     May 2021\n S  M Tu  W Th  F  S\n                    1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n\n\n\n",
      "mutant_output": "     May 2021\n S  M Tu  W Th  F  S\n                    1\n 2  3  4  5  6  7  8\n09 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n\n\n\n",
      "explanation": "The mutant program modified the 'cal' function, adding an extra day of spacing every three days in months with 19 days. This causes a misalignment of the calendar output and produces different results from the original program. In this test, the mutated output has '09' instead of '9' to account for the extra space. "
    }
  ]
},{
  "mutant_program": "muta3800_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "2",
        "2021"
      ],
      "original_output": "   February 2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6 \n 7  8  9 10 11 12 13 \n14 15 16 17 18 19 20 \n21 22 23 24 25 26 27 \n28               \n\n                     \n",
      "mutant_output": "   February 2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6 \n 7  8  9 10 11 12 13 \n14 15 16 17 18 19 20 \n21 22 23 24 25 26 27 \n28               \n\n",
      "explanation": "The mutant code modified the condition to verify if it is a new week to when it is 7. It supposed to be a modulo operator instead of an entire division to correctly identify when six or seven rows have been printed."
    },
    {
      "input": [
        "12"
      ],
      "original_output": "   December 2021\n S  M Tu  W Th  F  S\n          1  2  3  4 \n 5  6  7  8  9 10 11 \n12 13 14 15 16 17 18 \n19 20 21 22 23 24 25 \n26 27 28 29 30 31    \n\n\n",
      "mutant_output": "   December 2021\n S  M Tu  W Th  F  S\n          1  2  3  4 \n 5  6  7  8  9 10 11 \n12 13 14 15 16 17 18 \n19 20 21 22 23 24 25 \n26 27 28 29 30 31    \n\n",
      "explanation": "The mutant code removed some blank lines at the end of the output, making the format slightly different."
    }
  ]
},{
  "mutant_program": "muta3804_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "7"
      ],
      "original_output": "   July 2022\n S  M Tu  W Th  F  S\n              1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n",
      "mutant_output": "   July 2022\n S  M Tu  W Th  F  S\n              1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n",
      "explanation": "Both programs provide the same output for this test case."
    },
    {
      "input": [
        "7",
        "2022"
      ],
      "original_output": "   July 2022\n S  M Tu  W Th  F  S\n              1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n",
      "mutant_output": "   July 2022\n S  M Tu  W Th  F  S\n              1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n",
      "explanation": "Both programs provide the same output for this test case."
    },
    {
      "input": [
        "14",
        "1751"
      ],
      "original_output": "cal: 14: Bad month.\n",
      "mutant_output": "cal: 14: Bad month.\n",
      "explanation": "Both programs provide the same error message for this input."
    }
  ]
},{
  "mutant_program": "muta3836_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [],
      "original_output": " [current month and year]",
      "mutant_output": " [current month and year]",
      "explanation": "Both programs return the current month and year by default"
    },
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "    May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31\n",
      "mutant_output": "    May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31\n",
      "explanation": "The program correctly displays the calendar for May 2022 in both cases"
    },
    {
      "input": [
        "8",
        "2022"
      ],
      "original_output": "   August 2022\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31\n",
      "mutant_output": "   August 2022\n    S  M Tu  W Th  F  S\n    1   2  3  4  5  6\n 7   8  9 10 11 12 13\n14   15 16 17 18 19 20\n21   22 23 24 25 26 27\n28   29 30 31\n",
      "explanation": "The mutant program wrongly formats the output, adding extra spaces and breaking the alignment of the days"
    }
  ]
},{
  "mutant_program": "muta3845_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "3"
      ],
      "original_output": "   March 2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31\n\n\n",
      "mutant_output": "   March 2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31\n\n\n",
      "explanation": "The test inputs are the same and therefore both programs should output the same, which they did."
    },
    {
      "input": [
        "13",
        "2021"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "The test inputs are the same and therefore both programs should output the same error message, which they did."
    },
    {
      "input": [
        "2",
        "0"
      ],
      "original_output": "cal: 0: Bad year.\n",
      "mutant_output": "cal: 0: Bad year.\n",
      "explanation": "The test inputs are the same and therefore both programs should output the same error message, which they did."
    },
    {
      "input": [
        "-",
        "1752"
      ],
      "original_output": "   January 1752\n S  M Tu  W Th  F  S\n             1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n\n   April 1752\n S  M Tu  W Th  F  S\n                 1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30\n\n\n   July 1752\n S  M Tu  W Th  F  S\n             1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n\n   October 1752\n S  M Tu  W Th  F  S\n                 1\n 2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31\n\n\n",
      "mutant_output": "   January 1752\n S  M Tu  W Th  F  S\n             1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n\n   April 1752\n S  M Tu  W Th  F  S\n                 1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30\n\n\n   July 1752\n S  M Tu  W Th  F  S\n             1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n\n   October 1752\n S  M Tu  W Th  F  S\n                 1\n 2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31\n\n\n",
      "explanation": "In the mutated program, only in leap year case (where switch block ends with a semicolon since a single block was used) if i is greater than or equal to 3, a span of 11 days are added to the month february, and in the month of March onwards the range includes those added days meaning it is not a non-leap year, but the original code terminates after adding 11 days, the mutated program adds the days but continues with the rest of the normal year calculation. This causes the mutant program to output a different set of months since the missing days caused a shift in calendars of the year 1752. "
    }
  ]
},{
  "mutant_program": "muta3849_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "10"
      ],
      "original_output": "   October 2022\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n",
      "mutant_output": "   October 2022\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n",
      "explanation": "This test runs the month of October of the current year showing the calendar with correct dates. The output of both programs is the same."
    },
    {
      "input": [
        "13",
        "2022"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "This test tries to run a wrong month value. The output of both programs is the same because they are doing the same check."
    },
    {
      "input": [
        "-",
        "18000"
      ],
      "original_output": "cal: 18000: Bad year.\n",
      "mutant_output": "cal: 18000: Bad year.\n",
      "explanation": "This test tries to run a year value that is too high. The output of both programs is the same because they are doing the same check."
    }
  ]
},{
  "mutant_program": "muta3860_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "   May 2021\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n\n\n",
      "mutant_output": "",
      "explanation": "The mutant program is missing the implementation of the function 'driver', which is called from the main function. Therefore, no output is being generated."
    },
    {
      "input": [
        "4",
        "2022"
      ],
      "original_output": "   April 2022\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n\n\n",
      "mutant_output": "   April 2022\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n\n\n",
      "explanation": "The output of the original program prints one extra space at the beginning of the first week, due to the use of the 'goto' statement. The mutant program has removed the 'goto' statement, resulting in the correct position of the first week, but the extra space is missing, which results in a different output."
    }
  ]
},{
  "mutant_program": "muta3911_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [],
      "original_output": "   June 2021\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30\n",
      "mutant_output": "",
      "explanation": "The original program displays the calender for the current month, while the mutant program provides no output without arguments."
    },
    {
      "input": [
        "-",
        "6"
      ],
      "original_output": "   June 2021\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30\n",
      "mutant_output": "",
      "explanation": "The original program displays the calender for the month specified by the second argument, while the mutant program provides no output."
    },
    {
      "input": [
        "6",
        "2022"
      ],
      "original_output": "   June 2022\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30\n",
      "mutant_output": "",
      "explanation": "The original program displays the calender for the month and year specified in the arguments, while the mutant program provides no output."
    }
  ]
},{
  "mutant_program": "muta3912_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "2",
        "2022"
      ],
      "original_output": "   February 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28\n",
      "mutant_output": " February 2022\n S  M Tu  W Th  F  S\n         1    2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28\n",
      "explanation": "The mutant changes the way the string representing the month days is formatted, causing a different spacing between days and shifting the position of the last days of the month."
    },
    {
      "input": [
        "-",
        "2022"
      ],
      "original_output": "   November 2022\n S  M Tu  W Th  F  S\n          1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30\n",
      "mutant_output": " November 2022\n S  M Tu  W Th  F  S\n            1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30\n",
      "explanation": "The mutant changes the way the string representing the month days is formatted, causing a different spacing between days and shifting the position of the first days of the month."
    }
  ]
},{
  "mutant_program": "muta3916_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "2",
        "2020"
      ],
      "original_output": "   February 2020\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n\n",
      "mutant_output": "   February 2020\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28  0\n\n",
      "explanation": "The mutant code changes the last day of February from 29 to 0, causing the output to be different from the original code."
    },
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "",
      "mutant_output": "",
      "explanation": "Both the original and mutant code use the same block of code when the arguments include a '-', resulting in an empty output."
    },
    {
      "input": [
        "13",
        "10000"
      ],
      "original_output": "cal: 10000: Bad year.\n",
      "mutant_output": "cal: 10000: Bad year.\n",
      "explanation": "Both the original and mutant code use the same error handling code when an invalid year is passed as an argument."
    }
  ]
},{
  "mutant_program": "muta3980_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "12",
        "2022"
      ],
      "original_output": "\n   December 2022\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n\n\n",
      "mutant_output": "ERROR",
      "explanation": "The input is valid for both programs. The expected output should be different but it is difficult to predict. Therefore, a test is not provided."
    }
  ]
},{
  "mutant_program": "muta3981_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "12",
        "2000"
      ],
      "original_output": "   December 2000\n S  M Tu  W Th  F  S\n                1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31\n\n\n",
      "mutant_output": "   December 2000\n S  M Tu  W Th  F  S\n                1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31\n\n\n",
      "explanation": "The original program and the mutant program produce the same output for this input."
    },
    {
      "input": [
        "13",
        "2000"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "Both original and mutant programs produce the same error message for this invalid input."
    },
    {
      "input": [
        "12",
        "0"
      ],
      "original_output": "cal: 0: Bad year.\n",
      "mutant_output": "cal: 0: Bad year.\n",
      "explanation": "Both original and mutant programs produce the same error message for this invalid input."
    }
  ]
},{
  "mutant_program": "muta3983_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "2",
        "2016"
      ],
      "original_output": "   February 2016\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6 \n 7  8  9 10 11 12 13 \n14 15 16 17 18 19 20 \n21 22 23 24 25 26 27 \n28 29\n\n",
      "mutant_output": "   February 2016\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6 \n 7  8  9 10 11 12 13 \n14 15 16 17 18 19 20 \n21 22 23 24 25 26 27 \n28  1  2  3  4  5  6 \n\n",
      "explanation": "The mutant program modified the logic on line 47, by introducing a TRAP_ON_NEGATIVE macro on the argument passed to the jan1 function. This was done in an attempt to handle negative values that may sometimes be supplied as year input. However, this change breaks the code logic by disrupting the calculation of the day from the integer value inputs, by introducing this non deterministic result when negative numbers are input, this ultimately leads to incorrect outputs on some test inputs. Since it generated a different output from the correct one, the programs are not equivalent."
    },
    {
      "input": [
        "3",
        "2022"
      ],
      "original_output": "     March 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5 \n 6  7  8  9 10 11 12 \n13 14 15 16 17 18 19 \n20 21 22 23 24 25 26 \n27 28 29 30 31\n\n",
      "mutant_output": "     March 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5 \n 6  7  8  9 10 11 12 \n13 14 15 16 17 18 19 \n20 21 22 23 24 25 26 \n27 28 29 30  1  2  3 \n\n",
      "explanation": "The same issue described in test one occurred here as well. The mutant program breaks the original logic by changing the calculation approach on line 47 with a non-deterministic implementation to handle negative numbers on the year input."
    },
    {
      "input": [
        "-10"
      ],
      "original_output": "",
      "mutant_output": "cal: -10: Bad year.\n",
      "explanation": "The tests here were supplied with negative numbers for year input, the original program did not handle negative numbers as valid input, as such it didn't generate any output. However, the mutant program attempted to handle this by introducing a non-deterministic implementation that generates an output error message that correctly captures this input error."
    }
  ]
},{
  "mutant_program": "muta3984_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta3986_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "2"
      ],
      "original_output": "   October 2022\n S  M Tu  W Th  F  S\n                1 \n 2  3  4  5  6  7  8 \n 9 10 11 12 13 14 15 \n16 17 18 19 20 21 22 \n23 24 25 26 27 28 29 \n30 31             \n",
      "mutant_output": "   October 2022\n S  M Tu  W Th  F  S\n 2  3  4  5  6  7  8 \n 9 10 11 12 13 14 15 \n16 17 18 19 20 21 22 \n23 24 25 26 27 28 29 \n30 31             \n",
      "explanation": "The mutant code removed the first character from the dayw string, rendering the output day row incorrect."
    },
    {
      "input": [
        "2",
        "2022"
      ],
      "original_output": "   February 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5 \n 6  7  8  9 10 11 12 \n13 14 15 16 17 18 19 \n20 21 22 23 24 25 26 \n27 28             \n",
      "mutant_output": "   February 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7 \n 8  9 10 11 12 13 14 \n15 16 17 18 19 20 21 \n22 23 24 25 26 27 28 \n                    \n",
      "explanation": "The mutant code added a day to the first week of February, breaking the subsequent days rows."
    }
  ]
},{
  "mutant_program": "muta3989_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta3990_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "   May 2021\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n\n",
      "mutant_output": "   May 2021\n S  M Tu  W Th  F  S\n                  01\n02 03 04 05 06 07 08\n 9a10a11a12a13a14a15\n16a17a18a19a20a21a22\n23a24a25a26a27a28a29\n30a31a\n\n",
      "explanation": "The mutant program modified the output replacing a space by the letter 'a' in some of the lines. The output is different."
    },
    {
      "input": [
        "5",
        "2022"
      ],
      "original_output": "   May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31\n\n",
      "mutant_output": "   May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15a16a17a18a19a20a21\n22a23a24a25a26a27a28\n29a30a31a\n\n",
      "explanation": "The mutant program modified the output replacing a space by the letter 'a' in some of the lines. The output is different."
    }
  ]
},{
  "mutant_program": "muta3992_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "10"
      ],
      "original_output": "   October 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n\n",
      "mutant_output": null,
      "explanation": "The mutant code added a call to the macro TRAP_ON_NEGATIVE, which is not defined, causing the program to crash and output nothing."
    },
    {
      "input": [
        "7",
        "2022"
      ],
      "original_output": "    July 2022\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n\n",
      "mutant_output": null,
      "explanation": "The mutant code failed to define the dispatch function, causing the program to crash and output nothing."
    }
  ]
},{
  "mutant_program": "muta3993_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "2",
        "2021"
      ],
      "original_output": "   February 2021\n S  M Tu  W Th  F  S\n     1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28\n\n",
      "mutant_output": "3*Februuary 2021\n S  M Tu  W Th  F  S\n00 00 00 00 00 00 00\n00 00 00 00 00 00 00\n00 00 00 00 00 00 00\n00 00 00 00 00 00 00\n00\n\n\n",
      "explanation": "The mutant program changes the name of February from 'February' to '3*Februuary' and replaces every number in the output with '00', which makes the output differ from the original program. Here, the program was tested for the input '2' and '2021'."
    },
    {
      "input": [
        "-",
        "2"
      ],
      "original_output": "",
      "mutant_output": "",
      "explanation": "In this test, the program was called incorrectly, and both original and mutant programs produced no output. Hence, the test set is inconclusive."
    },
    {
      "input": [
        "13",
        "2023"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "",
      "explanation": "Here, a bad month is used for input, which produces no output for the original program. In contrast, the mutant program recognizes the issue and provides the expected error message."
    }
  ]
},{
  "mutant_program": "muta3995_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "8"
      ],
      "original_output": "   August 2022\n S  M Tu  W Th  F  S\n     1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31\n\n",
      "mutant_output": "   August 2022\n S  M Tu  W Th  F  S\n     1 02 03 04 05 06\n07 08 09 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31\n\n",
      "explanation": "The mutant changes the function 'cal' by replacing 'i' with 'TRAP_ON_NEGATIVE(i)' in line 101. While the original program increments 'd' with 'mon[i]', the mutant is incrementing it with 'mon[TRAP_ON_NEGATIVE(i)]'. This might cause 'd' to be incremented with wrong values if 'i' is negative, leading to output changes."
    },
    {
      "input": [
        "-",
        "2400"
      ],
      "original_output": "   January 2400\n S  M Tu  W Th  F  S\n             1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n",
      "mutant_output": "   January 2400\n S  M Tu  W Th  F  S\n             1   2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n",
      "explanation": "The mutant is equivalent to the original program in this test case, since changing whitespace doesn't affect the behavior of the program."
    }
  ]
},{
  "mutant_program": "muta3996_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "4"
      ],
      "original_output": "   May 2021\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n\n",
      "mutant_output": "   May 2021\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n\n",
      "explanation": "The mutant code did not change any important functionality of the original code."
    },
    {
      "input": [
        "-",
        "13"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "The input is an invalid month, and the mutant code kept the same error messages."
    },
    {
      "input": [
        "120",
        "30000"
      ],
      "original_output": "cal: 30000: Bad year.\n",
      "mutant_output": "cal: 30000: Bad year.\n",
      "explanation": "The input is an invalid year, and the mutant code kept the same error messages."
    }
  ]
},{
  "mutant_program": "muta3998_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "12"
      ],
      "original_output": "           December 2021\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31\n\n\n",
      "mutant_output": "           December 2021\n S  M Tu  W Th  F  S\n          1  2  3  4\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31\n\n\n",
      "explanation": "The mutant adds a condition (TRAP_ON_NEGATIVE) to the for loop that adds the month lengths sum in a variable to calculate the day of the week. The TRAP_ON_NEGATIVE condition checks if the value is greater or equal to 0, but it is reducing the value of d with the condition, so it is considered negative with all even months, except february when there is a leap year. By adding the TRAP_ON_NEGATIVE condition in the for loop, an error is introduced when the calendar is generated, missing events or days being printed."
    },
    {
      "input": [
        "-",
        "02",
        "2021"
      ],
      "original_output": "   February 2021\n S  M Tu  W Th  F  S\n     1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28\n\n\n",
      "mutant_output": "   February 2021\n S  M Tu  W Th  F  S\n     1  2  3  4  5  6\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n\n\n",
      "explanation": "The mutant just changes the position in the calendar where the 8th of February is being printed from day 6 to day 1, which is wrong, but it does not affect the calendar generation, so the output is equivalent."
    }
  ]
},{
  "mutant_program": "muta3999_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "6"
      ],
      "original_output": "   June 2021\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30\n\n",
      "mutant_output": "   June 2021\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30\n \n",
      "explanation": "The mutant program inserts an extra space after the last day of the month in the output, resulting in a different output than the original program"
    },
    {
      "input": [
        "-",
        "2",
        "2022"
      ],
      "original_output": "  February 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28\n\n",
      "mutant_output": "  February 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 \n\n",
      "explanation": "The mutant program inserts an extra space after the last day of the month in the output, resulting in a different output than the original program"
    },
    {
      "input": [
        "-",
        "13"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "The mutant and original programs output the same error message for an invalid month input"
    }
  ]
},{
  "mutant_program": "muta4001_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "3",
        "2022"
      ],
      "original_output": "   March 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31\n",
      "mutant_output": "   March 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31\n",
      "explanation": "The mutant code is equivalent to the original code as the changes do not affect the functionality of the program."
    },
    {
      "input": [
        "4",
        "2022"
      ],
      "original_output": "   April 2022\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n",
      "mutant_output": "   April 2022\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n",
      "explanation": "The mutant code is equivalent to the original code as the changes do not affect the functionality of the program."
    },
    {
      "input": [
        "13",
        "2022"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "The mutant code is equivalent to the original code as the changes do not affect the functionality of the program."
    }
  ]
},{
  "mutant_program": "muta4004_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "10",
        "2021"
      ],
      "original_output": "   October 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n",
      "mutant_output": "   October 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n",
      "explanation": "The mutant code is equivalent to the original program code for this test case. Both outputs are the same."
    },
    {
      "input": [
        "-",
        "13",
        "2021"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "The mutant code is equivalent to the original program code for this test case. Both outputs are the same."
    },
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "   May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31\n\n",
      "mutant_output": "   May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31\n\n\n",
      "explanation": "The mutant code is not equivalent to the original program code for this test case. The mutant code adds three extra newlines at the end of the output compared to the original program code."
    }
  ]
},{
  "mutant_program": "muta4005_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "1"
      ],
      "original_output": "   January 2022\n S  M Tu  W Th  F  S\n                    1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n\n",
      "mutant_output": "   January 2022\n S  M Tu  W Th  F  S\n 01 02 03 04 05 06 07 \n 08 09 10 11 12 13 14 \n 15 16 17 18 19 20 21 \n 22 23 24 25 26 27 28 \n 29 30 31             \n\n",
      "explanation": "The mutant changes the order of the day of the month representation causing the output to be different from the original. This test checks the case where the program receives only one parameter to signify that the user wants to print the current month."
    },
    {
      "input": [
        "-",
        "2",
        "2022"
      ],
      "original_output": "  February 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28\n\n",
      "mutant_output": "  February 2022\n S  M Tu  W Th  F  S\n 01 02 03 04 05 06 07 \n 08 09 10 11 12 13 14 \n 15 16 17 18 19 20 21 \n 22 23 24 25 26 27 28 \n\n",
      "explanation": "The mutant changes the order of the day of the month representation causing the output to be different from the original. This test checks the case where the program receives two parameters to signify the month and year to be printed."
    }
  ]
},{
  "mutant_program": "muta4007_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta4008_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "10",
        "2020"
      ],
      "original_output": "\n    October 2020\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n\n\n",
      "mutant_output": "\n    October 2020\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 \n          24\n25 26 27 28 29 30 31\n\n\n",
      "explanation": "The mutant code introduces a trap in the cal function by changing the access to the mon array. It now uses the macro TRAP_ON_ZERO that returns 1 when m==2 and 0 otherwise. This mutant code produces different outputs in cases where February has only 28 days (e.g., non-leap years) and the day count exceeds 28. The rest of the calendar for that same month will be shifted 11 days ahead and the leftover cells are filled with garbage values which count will cause misalignment in the previous and future months."
    }
  ]
},{
  "mutant_program": "muta4010_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "4",
        "2021"
      ],
      "original_output": "     April 2021\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30\n\n\n",
      "mutant_output": "     April 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n\n\n",
      "explanation": "The mutant code changes the formatting of the calendar output by adding an extra space before the first day of the month for months that start on Wednesdays or later, which results in a different output from the original code"
    },
    {
      "input": [
        "-",
        "4"
      ],
      "original_output": "    April 2021\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30\n\n\n",
      "mutant_output": "    April 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n\n\n",
      "explanation": "The mutant code behaves the same as the original code for this input, since it does not modify the driver() function that handles the arguments and calls the other functions"
    }
  ]
},{
  "mutant_program": "muta4011_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "7"
      ],
      "original_output": [
        "   July 2022",
        " S  M Tu  W Th  F  S",
        "              1  2  3 ",
        " 4  5  6  7  8  9 10 ",
        "11 12 13 14 15 16 17 ",
        "18 19 20 21 22 23 24 ",
        "25 26 27 28 29 30 31 "
      ],
      "mutant_output": [
        "   July 2022",
        " S  M Tu  W Th  F  S",
        "              1  2  3 ",
        " 4  5  6  7  8  9 10 ",
        "11 12 13 14 15 16 17 ",
        "18 19 20 21 22 23 24 ",
        "25 26 27 28 29 30 31 "
      ],
      "explanation": "The mutant program did not modify the output."
    },
    {
      "input": [
        "-",
        "13"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "The mutant program did not modify the output."
    },
    {
      "input": [
        "-",
        "7",
        "2000"
      ],
      "original_output": [
        "   July 2000",
        " S  M Tu  W Th  F  S",
        "                   1 ",
        " 2  3  4  5  6  7  8 ",
        " 9 10 11 12 13 14 15 ",
        "16 17 18 19 20 21 22 ",
        "23 24 25 26 27 28 29 ",
        "30 31 "
      ],
      "mutant_output": [
        "   July 2000",
        " S  M Tu  W Th  F  S",
        "                      1 ",
        " 2  3  4  5  6  7  8 ",
        " 9 10 11 12 13 14 15 ",
        "16 17 18 19 20 21 22 ",
        "23 24 25 26 27 28 29 ",
        "30 31 "
      ],
      "explanation": "The mutant program removed some trailing spaces resulting in a different output."
    }
  ]
},{
  "mutant_program": "muta4013_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [],
      "original_output": "   August 2021\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31\n\n",
      "mutant_output": "   August 2021\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31\n\n",
      "explanation": "Both programs display the calendar of the current month, which is equivalent."
    },
    {
      "input": [
        "-",
        "07"
      ],
      "original_output": "   July 2021\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n\n",
      "mutant_output": "   July 2021\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n\n",
      "explanation": "Both programs display the calendar of July 2021, which is equivalent."
    },
    {
      "input": [
        "13",
        "3500"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "Both programs display an error message for the invalid month input, which is equivalent."
    },
    {
      "input": [
        "2",
        "0"
      ],
      "original_output": "cal: 0: Bad year.\n",
      "mutant_output": "cal: 0: Bad year.\n",
      "explanation": "Both programs display an error message for the invalid year input, which is equivalent."
    }
  ]
},{
  "mutant_program": "muta4014_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "12",
        "2020"
      ],
      "original_output": "   December 2020\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31\n\n",
      "mutant_output": "   December 2020\n S  M Tu  W Th  F  S\n        1   2   3   4   5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31\n\n",
      "explanation": "The mutant program has added extra blank spaces between the dates and days of the month in the output which is not there in the original program so they are not equivalent."
    },
    {
      "input": [
        "-",
        "13",
        "2019"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "Both the original and the mutant program shows the same output since the given input for month is higher than the max limit so both programs will return an error message."
    }
  ]
},{
  "mutant_program": "muta4016_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta4017_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "4"
      ],
      "original_output": "   February 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28\n\n",
      "mutant_output": "   February 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28\n\n",
      "explanation": "Both programs produce the same output, the mutated code did not affect the output"
    },
    {
      "input": [
        "-",
        "13"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "Both programs produce the same output, the mutated code did not affect the output when the input is incorrect"
    },
    {
      "input": [
        "14",
        "3000"
      ],
      "original_output": "cal: 3000: Bad year.\n",
      "mutant_output": "cal: 3000: Bad year.\n",
      "explanation": "Both programs produce the same output, the mutated code did not affect the output when the input is incorrect"
    }
  ]
},{
  "mutant_program": "muta4019_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "10",
        "2021"
      ],
      "original_output": "   October 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n",
      "mutant_output": "   October 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n\n",
      "explanation": "The mutant program code removes an important character in the output, which is the newline character after the last day of the month. This causes the output to look different from the original program code."
    },
    {
      "input": [
        "12",
        "2003"
      ],
      "original_output": "   December 2003\n S  M Tu  W Th  F  S\n     1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31\n\n\n",
      "mutant_output": "   December 2003\n S  M Tu  W Th  F  S\n     1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30\n\n\n",
      "explanation": "The output for the test input is different because the mutant program code has removed the newline characters that are printed after the last day of December and before the next year output."
    }
  ]
},{
  "mutant_program": "muta4020_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "   May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31          \n\n\n",
      "mutant_output": "",
      "explanation": "The original program outputs a calendar of May 2022, while the mutant program does not output anything because the macro TRAP_ON_ZERO has been added to the cal() function and stops the program from executing the lines of code that relate to May having 19 days instead of 31."
    },
    {
      "input": [
        "5",
        "2023"
      ],
      "original_output": "   May 2023\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31       \n\n\n",
      "mutant_output": "",
      "explanation": "The original program outputs a calendar of May 2023, while the mutant program does not output anything because the macro TRAP_ON_ZERO has been added to the cal() function and stops the program from executing the lines of code that relate to May having 19 days instead of 31."
    }
  ]
},{
  "mutant_program": "muta4022_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta4023_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "   May 2021\n S  M Tu  W Th  F  S\n                    1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31               \n\n\n",
      "mutant_output": "   May 2021\n S  M Tu  W Th  F  S\n                    1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31               \n\n\n",
      "explanation": "Both outputs are the same since the mutant code just adds an unnecessary semicolon at the beginning."
    },
    {
      "input": [
        "-",
        "16"
      ],
      "original_output": "   August 2021\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31            \n\n\n",
      "mutant_output": "   August 2021\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31            \n\n\n",
      "explanation": "Both outputs are the same since the mutant code only changes the line: (mon[TRAP_ON_ZERO(m)] += 11); which is never executed based on the test set provided."
    },
    {
      "input": [
        "13",
        "2000"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "Both programs throw the same error message because the mutant code did not modify the error handling section."
    }
  ]
},{
  "mutant_program": "muta4025_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "10"
      ],
      "original_output": "\n   October 2021\n S  M Tu  W Th  F  S\n                 1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n",
      "mutant_output": "\n   October 2021\n S  M Tu  W Th  F  S\n                 1  2\n 3  4             5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n",
      "explanation": "The outputs are different because the mutation adds extra spaces to the first week after the 4th day. The original code prints the spaces already at position 4 and the mutant code adds the extra spaces after those initial ones, so the weekday of the 10th is aligned with the S in the first week."
    },
    {
      "input": [
        "10",
        "2021"
      ],
      "original_output": "   October 2021\n S  M Tu  W Th  F  S\n                 1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n",
      "mutant_output": "   October 2021\n S  M Tu  W Th  F  S\n                 1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25             26 27 28 29 30\n31\n",
      "explanation": "The outputs are different because the mutation adds extra spaces after the 25th day of the month to adjust the weekday for the rest of the days in the week. The original code correctly aligns the 26th with the previous Thursday, while the mutant code adds extra spaces to align it with the previous Sunday."
    },
    {
      "input": [
        "-",
        "12"
      ],
      "original_output": "\n   December 2021\n S  M Tu  W Th  F  S\n           1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31\n\n",
      "mutant_output": "\n   December 2021\n S  M Tu  W Th  F  S\n           1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14          15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31\n\n",
      "explanation": "The outputs are different because the mutation adds extra spaces after the 14th to adjust the Sunday of the 19th to coincide with the initial S of the week. The original code aligns the 15th with the Wednesday and the mutant code adds extra spaces to align it with the Sunday."
    }
  ]
},{
  "mutant_program": "muta4026_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "4"
      ],
      "original_output": "   July 2021\n S  M Tu  W Th  F  S\n              1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n",
      "mutant_output": "   July 2021\n S  M Tu  W Th  F  S\n             01 02 03\n 4  5  6  7  8  9  10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n",
      "explanation": "The mutant modified the string representation of dates, adding an extra space in front of single digit days. This change resulted in a non-equivalent program output for this specific input."
    },
    {
      "input": [
        "-",
        "13"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "The input \"13\" is not a valid month, therefore both programs output the same error message."
    },
    {
      "input": [
        "0"
      ],
      "original_output": "   October 2021\n S  M Tu  W Th  F  S\n                 1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n",
      "mutant_output": "   October 2021\n S  M Tu  W Th  F  S\n                 1  2\n 3 04 05 06 07 08 09\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n",
      "explanation": "For the input \"0\", both programs output a calendar for the current month. The mutant changed the string representation of dates, adding an extra space in front of single digit days. This change resulted in a non-equivalent program output for this specific input."
    }
  ]
},{
  "mutant_program": "muta4028_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "10"
      ],
      "original_output": "   October 2022\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n\n",
      "mutant_output": "   October 2022\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 2)\n24 25 26 27 28 29 30\n31\n\n\n",
      "explanation": "The mutant program replaced the valid expression i/10+'0' for ((* s) = ((TRAP_ON_NEGATIVE(i) / 10) + '0')). This caused two adjacent cells in the October 2022 calendar to be concatenated, resulting in an unreadable character sequence. "
    },
    {
      "input": [
        "6",
        "2022"
      ],
      "original_output": "   June 2022\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30\n\n\n",
      "mutant_output": null,
      "explanation": "The test has no relevance for checking the non-equivalence of programs, since its return value is always the same regardless of the condition of the tests. "
    }
  ]
},{
  "mutant_program": "muta4029_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta4031_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "   May 2021\n S  M Tu  W Th  F  S\n                    1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n\n\n",
      "mutant_output": "   May 2021\n S  M Tu  W Th  F  S\n                    1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n\n\n",
      "explanation": "The mutant did not change the behavior of the original program"
    },
    {
      "input": [
        "-",
        "13"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "The mutant did not change the behavior of the original program"
    },
    {
      "input": [
        "15",
        "2023"
      ],
      "original_output": "cal: 15: Bad month.\n",
      "mutant_output": "cal: 15: Bad month.\n",
      "explanation": "The mutant did not change the behavior of the original program"
    },
    {
      "input": [
        "5",
        "bad_input"
      ],
      "original_output": "cal: bad_input: Bad year.\n",
      "mutant_output": "cal: bad_input: Bad year.\n",
      "explanation": "The mutant did not change the behavior of the original program"
    },
    {
      "input": [],
      "original_output": "   May 2021\n S  M Tu  W Th  F  S\n                    1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n\n\n",
      "mutant_output": "   May 2021\n S  M Tu  W Th  F  S\n                    1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n\n\n",
      "explanation": "Testing the default behavior of the program"
    },
    {
      "input": [
        "10000"
      ],
      "original_output": "cal: 10000: Bad year.\n",
      "mutant_output": "cal: 10000: Bad year.\n",
      "explanation": "Testing the upper boundary of the year input"
    }
  ]
},{
  "mutant_program": "muta4032_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "09",
        "2020"
      ],
      "original_output": "   September 2020\n S  M Tu  W Th  F  S\n        1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30\n",
      "mutant_output": "   September 2020\n S  M Tu  W Th  F  S\n       01 2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30\n",
      "explanation": "The original program aligns the days of the current month to the center. The mutant program, however, misaligns the days by removing spaces to make them left-aligned. "
    },
    {
      "input": [],
      "original_output": "",
      "mutant_output": "",
      "explanation": "Both programs output an empty string when no arguments are provided."
    },
    {
      "input": [
        "13",
        "2020"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "Both programs output the same error message when an invalid month is entered as an argument."
    }
  ]
},{
  "mutant_program": "muta4034_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "   May 2021\n S  M Tu  W Th  F  S\n                    1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31              \n\n",
      "mutant_output": "May 2021\n S  M Tu  W Th  F  S\n     1  2  3  4  5  6  7\n   8  9 10 11 12 13 14\n01516 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31           \n\n",
      "explanation": "The mutated program changes the format of the output for the first week of May, the days are not aligned with the corresponding day of the week. This can be tested by running the UnixCal program with the '- 5' argument which should print the month of May of the current year, in this case it is 2021."
    },
    {
      "input": [],
      "original_output": "  June 2022\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30     \n\n",
      "mutant_output": "June 2022\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30     \n\n",
      "explanation": "The mutated program is the same as the original program in terms of functionality, therefore both will provide the same output. This can be tested by running the UnixCal program with no arguments which should print the month and the year of the current date."
    }
  ]
},{
  "mutant_program": "muta4035_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "4"
      ],
      "original_output": "   April 2021\n S  M Tu  W Th  F  S\n              1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30  \n\n",
      "mutant_output": "   April 2021\n S  M Tu  W Th  F  S\n              1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30  \n\n",
      "explanation": "The mutant code changes nothing relevant to the output."
    },
    {
      "input": [
        "5",
        "1877"
      ],
      "original_output": "   May 1877\n S  M Tu  W Th  F  S\n         1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31  \n",
      "mutant_output": "   May 1877\n S  M Tu  W Th  F  S\n         1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31  \n",
      "explanation": "The mutant code changes nothing relevant to the output."
    },
    {
      "input": [
        "15",
        "-1"
      ],
      "original_output": "cal: 15: Bad month.\n",
      "mutant_output": "cal: 15: Bad month.\n",
      "explanation": "The mutant code changes nothing relevant to the output."
    }
  ]
},{
  "mutant_program": "muta4036_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta4036_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "1",
        "2021"
      ],
      "original_output": "   January 2021\n S  M Tu  W Th  F  S\n                 1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31  \n",
      "mutant_output": "   January 2021\n S  M Tu  W Th  F  S\n                 1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 30 30\n31  \n",
      "explanation": "The mutant code modifies the number of days in February from 29 to 30, which changes the output for a leap year. February 29th is replaced by another February 30th in the mutant output."
    },
    {
      "input": [
        "-",
        "1"
      ],
      "original_output": "   January 2021\n S  M Tu  W Th  F  S\n                 1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31  \n",
      "mutant_output": "   January 2021\n S  M Tu  W Th  F  S\n                 1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 30 30\n31  \n",
      "explanation": "The same mutation affects the output when the program is invoked with the '-' argument. The mutation doesn't affect the conditional within dispatch() that decides whether to print a month or a year."
    }
  ]
},{
  "mutant_program": "muta4039_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [],
      "original_output": "   September 2021\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30\n\n",
      "mutant_output": "   September 2021\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27                  \n\n",
      "explanation": "The mutant code changed the value of the 9th index of the smon array from August to null, resulting in the month name not being printed for September, and causing the output to be different from the original code."
    },
    {
      "input": [
        "-",
        "04"
      ],
      "original_output": "   April 2022\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n\n",
      "mutant_output": "   April 2022\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30            \n\n",
      "explanation": "Both programs generated the same output when given the argument '- 04'; the mutant code is not equivalent to the original but did not result in any differences in this case."
    },
    {
      "input": [
        "13",
        "1500"
      ],
      "original_output": "cal: 1500: Bad year.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "Both programs have different error messages since the input is invalid, but both catch two different types of invalid input arguments. The mutant program detects an invalid month argument, while the original program detects an invalid year argument."
    }
  ]
},{
  "mutant_program": "muta4075_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta4080_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-1"
      ],
      "original_output": "cal: -1: Bad year.\n",
      "mutant_output": "cal: -1: Bad year.\n",
      "explanation": "both original and mutated program output an error when given a bad year argument"
    },
    {
      "input": [
        "1",
        "2022"
      ],
      "original_output": "   January 2022\n S  M Tu  W Th  F  S\n                   1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n",
      "mutant_output": "   January 2022\n S  M Tu  W Th  F  S\n                   1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n",
      "explanation": "both original and mutated program output the same calendar for January 2022"
    },
    {
      "input": [
        "-",
        "12"
      ],
      "original_output": "cal: Bad month.\n",
      "mutant_output": "cal: Bad month.\n",
      "explanation": "both original and mutated program output an error when given a bad month argument"
    },
    {
      "input": [
        "13",
        "9999"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "both original and mutated program output an error when given a bad month argument"
    }
  ]
},{
  "mutant_program": "muta4085_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "   May 2021\n S  M Tu  W Th  F  S\n                    1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31               \n\n\n",
      "mutant_output": "   May 2021\n S  M Tu  W Th  F  S\n                    1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31               \n\n\n",
      "explanation": "Both programs output the calendar for May 2021"
    },
    {
      "input": [
        "-",
        "13",
        "2022"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "Both programs output an error message when given an invalid month"
    },
    {
      "input": [
        "13",
        "10000"
      ],
      "original_output": "cal: 10000: Bad year.\n",
      "mutant_output": "cal: 10000: Bad year.\n",
      "explanation": "Both programs output an error message when given an invalid year"
    }
  ]
},{
  "mutant_program": "muta4302_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [],
      "original_output": "[current month and year calendar output]",
      "mutant_output": "Segmentation fault (core dumped)",
      "explanation": "The original program prints the calendar for the current month and year while the mutant code gives a segmentation fault error. This is because the mutant code does not call the driver function anywhere in the program, causing an error when the main function is executed. This can be fixed by adding a call to the driver function in the main function."
    },
    {
      "input": [
        "-",
        "6"
      ],
      "original_output": "[calendar output for month 6 of current year]",
      "mutant_output": "[calendar output for month 6 of current year where the first few lines are missing and the day headers are misaligned]",
      "explanation": "The original program and the mutant code both take in command line arguments to print the calendar for a specific month and year. In this test, both programs are given the argument '-' to print the calendar for the current year and the month 6. However, the mutant code's output is missing the first few lines and the day headers are misaligned. This is because in the cal function, the line 'for(j=0; j<6*72; j++)' sets the number of spaces available to store the calendar string, which is only enough for 6 lines of 72 characters each. However, the program outputs 7 lines for some months and thus overflows the buffer, causing the missing lines and misaligned headers. This can be fixed by increasing the buffer size to accommodate for 7 lines."
    }
  ]
},{
  "mutant_program": "muta4304_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "1"
      ],
      "original_output": "   January 2022\n S  M Tu  W Th  F  S\n                   1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n",
      "mutant_output": "   January 2022\n S  M Tu  W Th  F  S\n                   1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n                         \n",
      "explanation": "The original program and the mutant program do not give the same output for the given input. The original program outputs the correct calendar for January 2022 and the mutant program outputs the same calendar except for three extra spaces at the end."
    },
    {
      "input": [
        "2",
        "2022"
      ],
      "original_output": "  February 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28\n",
      "mutant_output": "  February 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27    \n",
      "explanation": "The original program and the mutant program do not give the same output for the given input. The original program outputs the correct calendar for February 2022 and the mutant program outputs the same calendar except for three extra spaces before the newline at the end."
    },
    {
      "input": [
        "15",
        "2022"
      ],
      "original_output": "cal: 15: Bad month.\n",
      "mutant_output": "cal: 15: Bad month.\n",
      "explanation": "Both the original program and the mutant program output the same error message for an invalid month input."
    }
  ]
},{
  "mutant_program": "muta4305_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta4306_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "5",
        "2021"
      ],
      "original_output": "   May 2021\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n\n\n",
      "mutant_output": "   May 2021\n S  M Tu  W Th  F  S\n  1  2\n 3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n\n\n",
      "explanation": "The mutant removes a space character in the original string used to display the month of May in the calendar. This change affects the alignment of the days of the week, which results in different outputs for the two programs. The test verifies that the original program has 7 space characters between the letters for the days of the week. The mutant program has only two spaces between 'S' and 'M', which causes misalignment in the calendar representation. "
    },
    {
      "input": [
        " ",
        "2021"
      ],
      "original_output": "cal:  : Bad month.\n",
      "mutant_output": "cal:  : Bad month.\n",
      "explanation": "The test expects an error to be raised because the first argument is an empty string. Both the original and mutant programs generate the same error message."
    },
    {
      "input": [
        "1",
        "12000"
      ],
      "original_output": "cal: 12000: Bad year.\n",
      "mutant_output": "cal: 12000: Bad year.\n",
      "explanation": "The test expects an error because the year is out of range. The original and mutant programs generate the same error message."
    }
  ]
},{
  "mutant_program": "muta4359_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        1701
      ],
      "original_output": 1,
      "mutant_output": 1605,
      "explanation": "The jan1 function computes the day of the week for January 1 of the given year. The original program uses a series of algorithms to compute the day of the week; however, the mutant code uses a different calculation and therefore results in a different output for the same input. This can be seen in the test case where the input is 1701, where the original program outputs 1 (Saturday), and the mutant program outputs 1605 (Tuesday)."
    },
    {
      "input": [
        1900
      ],
      "original_output": 1,
      "mutant_output": 1000,
      "explanation": "In another test, the original program outputs 1 (Monday), whereas the mutant program outputs 1000. This means the mutated program is not equivalent to the original program."
    },
    {
      "input": [
        1776
      ],
      "original_output": 2,
      "mutant_output": 1604,
      "explanation": "Similarly, the same issue repeats as the original program outputs 2 (Tuesday), while the mutant program outputs 1604."
    }
  ]
},{
  "mutant_program": "muta4373_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2022
      ],
      "original_output": 5,
      "mutant_output": 3,
      "explanation": "The original program correctly calculates the day of the week of January 1st, 2022 as a Friday (represented by number 5), while the mutant program adds an extra return statement at the end of the function. This causes the function to always return 3 and produces incorrect output."
    },
    {
      "input": [
        2000
      ],
      "original_output": 6,
      "mutant_output": 2,
      "explanation": "The original program correctly calculates the day of the week of January 1st, 2000 as a Saturday (represented by number 6), while the mutant program has changed the calculation of this date and produces incorrect output."
    },
    {
      "input": [
        1987
      ],
      "original_output": 3,
      "mutant_output": 7,
      "explanation": "The original program correctly calculates the day of the week of January 1st, 1987 as a Thursday (represented by number 3), while the mutant program has changed the calculation of this date and produces incorrect output."
    }
  ]
},{
  "mutant_program": "muta4530_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2000
      ],
      "original_output": 6,
      "mutant_output": 13,
      "explanation": "The original program correctly calculates the day of the week of Jan 1st of the given year. For year 2000, it should return 6 (Saturday), and it does. However, the mutant code returns 13, which is not a valid day of the week. This suggests that the change made to the jan1 function is not equivalent to the original implementation."
    },
    {
      "input": [
        2005
      ],
      "original_output": 6,
      "mutant_output": 3,
      "explanation": "Similarly, for year 2005, the original program correctly returns 6 (Saturday), while the mutant program returns 3 (Wednesday). This confirms that the mutant code has introduced a bug in the jan1 function that affects its behavior."
    },
    {
      "input": [
        1984
      ],
      "original_output": 4,
      "mutant_output": 4,
      "explanation": "For year 1984, both the original program and the mutant program return 4 (Thursday), which suggests that the mutation did not affect the behavior of the jan1 function in this case. However, this does not necessarily mean that the mutant code is equivalent to the original program in all cases, since we have already found a counterexample."
    }
  ]
},{
  "mutant_program": "muta4714_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        1900
      ],
      "original_output": 1,
      "mutant_output": 6,
      "explanation": "The original program assumes that the Julian calendar ended in 1752 but the mutant code considers the change happened in 1800 instead. This results in a different output for the jan1 function which returns 1 for year 1900 in the original and returns 6 in the mutant."
    },
    {
      "input": [
        1970
      ],
      "original_output": 3,
      "mutant_output": 5,
      "explanation": "Similar to the first test, the mutant considers the change in calendar happened later than the original program resulting in a different output for the jan1 function."
    },
    {
      "input": [
        2000
      ],
      "original_output": 6,
      "mutant_output": 1,
      "explanation": "In this case, the mutant program assumes that 2000 was a leap year when in fact it was. This results in a wrong output for the jan1 function compared to the original program."
    }
  ]
},{
  "mutant_program": "muta4719_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "8"
      ],
      "original_output": "   August 2021\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31            \n                       \n                       \n",
      "mutant_output": "   August 2021\n S  M Tu  W Th  F  S\n 12 34 56 78 91 01 23\n45 67 89 10 11 12 34 \n56 78 91 01 23 45 67\n89 10 11 12 34 56 78\n91 01 23 45 67     \n                   \n                   \n",
      "explanation": "The mutant code changes the way the days of the month are printed, which results in a different output than the original program's output."
    },
    {
      "input": [
        "3",
        "2000"
      ],
      "original_output": "   March 2000\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \n                   \n",
      "mutant_output": "   March 2000\n S  M Tu  W Th  F  S\n                12\n34 56 78 91 01 23 45\n67 89 10 11 12 34 56\n78 91 01 23 45 67 89\n10 11 12 34 56 78 91\n01 23 45 67 89     \n                   \n",
      "explanation": "The mutant code changes how the day of the week is calculated at the beginning of the month, which results in a different output than the original program's output."
    },
    {
      "input": [
        "-",
        "3000"
      ],
      "original_output": "   August 2021\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31            \n                       \n                       \n",
      "mutant_output": "   August 3000\n S  M Tu  W Th  F  S\n          1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      \n                   \n                   \n",
      "explanation": "The mutant code is equivalent to the original program's code, but changes the year printed in the output, resulting in a different output."
    }
  ]
},{
  "mutant_program": "muta4738_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "   May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31          \n",
      "mutant_output": "   May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31          \n",
      "explanation": "The original program and the mutant program will output the same for this case because there was no modifications done that could make a different output."
    },
    {
      "input": [
        "-",
        "13"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "The original program and mutant program contain the same if else statements that verify if the month entered in the command is between 1 and 12. Therefore, since the input 13 is out of bounds, both the original and mutant should return the same message."
    },
    {
      "input": [
        "14",
        "5000"
      ],
      "original_output": "cal: 5000: Bad year.\n",
      "mutant_output": "cal: 5000: Bad year.\n",
      "explanation": "The original program and mutant program contain the same if else statements that verify if the year entered in the command line is between 1 and 9999. Therefore, since the input 5000 is out of bounds, both the original and mutant should return the same message."
    }
  ]
},{
  "mutant_program": "muta4783_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta4784_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "10",
        "2021"
      ],
      "original_output": "   October 2021\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n",
      "mutant_output": "   October 2021\n S  M Tu  W Th  F  S\n                    1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n",
      "explanation": "The mutant program has added an extra space before the number 1 in the second row of the output calendar, causing it to be misaligned with the rest of the column. This is a simple visual difference that can be spotted by comparing the original and mutant outputs."
    },
    {
      "input": [
        "4",
        "2022"
      ],
      "original_output": "   April 2022\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n",
      "mutant_output": "   April 2022\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n\n",
      "explanation": "The mutant program has added an extra newline at the end of the output, causing an empty line to appear after the calendar. This is a simple visual difference that can be spotted by comparing the original and mutant outputs."
    }
  ]
},{
  "mutant_program": "muta4786_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        1900
      ],
      "original_output": 1,
      "mutant_output": 3,
      "explanation": "The original program calculates the day of the week for January 1st of a given year using the Gregorian and Julian calendars. The mutant program changes the formula used for this calculation, and as a result, it produces a different output for the input 1900."
    },
    {
      "input": [
        2000
      ],
      "original_output": 6,
      "mutant_output": 0,
      "explanation": "The original program calculates the day of the week for January 1st of a given year using the Gregorian and Julian calendars. The mutant program changes the formula used for this calculation, and as a result, it produces a different output for the input 2000."
    },
    {
      "input": [
        2021
      ],
      "original_output": 5,
      "mutant_output": 0,
      "explanation": "The original program calculates the day of the week for January 1st of a given year using the Gregorian and Julian calendars. The mutant program changes the formula used for this calculation, and as a result, it produces a different output for the input 2021."
    }
  ]
},{
  "mutant_program": "muta4787_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2000
      ],
      "original_output": 6,
      "mutant_output": 4,
      "explanation": "The original program calculates the day of the week of January 1st of the given year. The mutant program adds a non-deterministic boolean expression to modify the calculation of 'd', which results in a different output for the same input. For example, for the input [2000], the original program outputs 6 (Saturday) while the mutant program outputs 4 (Thursday)."
    },
    {
      "input": [
        1800
      ],
      "original_output": 3,
      "mutant_output": 3,
      "explanation": "For some inputs, the mutant program might produce the same output as the original program. For instance, for the input [1800], the output is 3 (Wednesday) for both the original and the mutant program."
    }
  ]
},{
  "mutant_program": "muta4789_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "5",
        "2021"
      ],
      "original_output": "     May 2021\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n\n\n",
      "mutant_output": "     May 2021\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9                   \n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n\n",
      "explanation": "The mutant code changes the number of spaces printed for the days 9 and 10, which makes the output different from the original code."
    },
    {
      "input": [
        "02",
        "2022"
      ],
      "original_output": "  February 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28\n\n\n",
      "mutant_output": "  February 2022\n S  M Tu  W Th  F  S\n          1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28\n\n\n",
      "explanation": "The mutant code removes a space between February and the year printed, but this does not change the functionality of the program nor the output."
    },
    {
      "input": [
        "-",
        "3"
      ],
      "original_output": "     June 2021\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30\n\n\n",
      "mutant_output": "     June 2021\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30\n\n\n",
      "explanation": "The mutant code does not affect the conditional statement that calls the driver function, so both programs have the same output."
    }
  ]
},{
  "mutant_program": "muta4790_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2000
      ],
      "original_output": 6,
      "mutant_output": 3,
      "explanation": "The original program correctly calculates the day of the week for January 1st of a given year. The mutant code changes the jan1 function, introducing a non-deterministic change that affects the calculation of the day. In this test case, the mutation changes the output from 6 (Saturday) to 3 (Wednesday)."
    },
    {
      "input": [
        2010
      ],
      "original_output": 5,
      "mutant_output": 5,
      "explanation": "The original program correctly calculates the day of the week for January 1st of a given year. The mutant code introduces a change that does not affect the output of the program, so both original and mutant functions return 5 (Friday) for this input."
    },
    {
      "input": [
        1900
      ],
      "original_output": 1,
      "mutant_output": 1,
      "explanation": "The original program correctly calculates the day of the week for January 1st of a given year. The mutant code introduces a change that does not affect the output of the program, so both original and mutant functions return 1 (Monday) for this input."
    }
  ]
},{
  "mutant_program": "muta4792_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta4793_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2000
      ],
      "original_output": 6,
      "mutant_output": 6,
      "explanation": "The original program and the mutant program produce the same output for a valid input."
    },
    {
      "input": [
        1000
      ],
      "original_output": 1,
      "mutant_output": 4,
      "explanation": "The original program and the mutant program produce different outputs for an input of 1000. The original outputs 1, which is the expected output for the Julian calendar. However, the mutant program outputs 4, which is the expected output for the Gregorian calendar. This shows that the mutant program does not correctly handle dates before the Gregorian calendar changeover in 1752."
    },
    {
      "input": [
        1750
      ],
      "original_output": 3,
      "mutant_output": 0,
      "explanation": "The original program and the mutant program produce different outputs for an input of 1750. The original outputs 3, which is the expected output for the Julian calendar. However, the mutant program outputs 0, which is the expected output for the Gregorian calendar. This shows that the mutant program does not correctly handle dates in the year of the calendar changeover."
    }
  ]
},{
  "mutant_program": "muta4795_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2000
      ],
      "original_output": 6,
      "mutant_output": 5,
      "explanation": "The original program uses the TRAP_ON_NEGATIVE macro to handle negative values properly, while the mutant program uses a simple subtraction, resulting in different outputs for certain inputs."
    },
    {
      "input": [
        1700
      ],
      "original_output": 5,
      "mutant_output": 4,
      "explanation": "The mutant program changes the calculation of d in the julian calendar for years greater than 1800, resulting in a different output for this input."
    },
    {
      "input": [
        1752
      ],
      "original_output": 2,
      "mutant_output": 2,
      "explanation": "Both programs handle the great calendar changeover instant correctly, resulting in the same output for this input."
    }
  ]
},{
  "mutant_program": "muta4796_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2000
      ],
      "original_output": 6,
      "mutant_output": 0,
      "explanation": "The original program correctly calculates the day of the week of January 1st of the year 2000 (a leap year) as a Saturday (represented by 6). The mutant program changes the calculation by introducing a macro called TRAP_ON_ZERO that returns zero if the argument is zero and -1 otherwise. This macro changes the calculation of the day of the week for years after 1800, resulting in a different output for the input [2000]."
    },
    {
      "input": [
        1800
      ],
      "original_output": 2,
      "mutant_output": 2,
      "explanation": "The input [1800] results in the same output for both the original and mutant programs because the year is before the changeover to the Gregorian calendar in Britain. Therefore, the difference in the calculation introduced by the mutant program does not apply."
    },
    {
      "input": [
        1752
      ],
      "original_output": 6,
      "mutant_output": 6,
      "explanation": "The input [1752] results in the same output for both the original and mutant programs because the year is the year of the changeover to the Gregorian calendar in Britain. Therefore, the difference in the calculation introduced by the mutant program does not apply."
    }
  ]
},{
  "mutant_program": "muta4798_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        1850
      ],
      "original_output": 3,
      "mutant_output": 2,
      "explanation": "The original program uses the variable TRAP_ON_NEGATIVE to determine if the year is negative or positive, but the mutant program does not. In this test case, the difference is caused by the fact that the year is negative. In the original program, TRAP_ON_NEGATIVE(y) would be equal to zero, resulting in a smaller final result."
    },
    {
      "input": [
        1800
      ],
      "original_output": 3,
      "mutant_output": 3,
      "explanation": "Both programs use the same calendar and the same switch case statements, so their output is identical."
    },
    {
      "input": [
        2000
      ],
      "original_output": 6,
      "mutant_output": 6,
      "explanation": "Both programs use the same calendar and the same switch case statements, so their output is identical."
    }
  ]
},{
  "mutant_program": "muta4799_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        1600
      ],
      "original_output": 0,
      "mutant_output": 6,
      "explanation": "The original program calculates the day of the week of January 1st of a given year by implementing the Gregorian and Julian calendars. The mutant program has a change in line 60, where it includes an additional operation, adding the result of TRAP_ON_ZERO(y)-1601 divided by 400 to d. TRAP_ON_ZERO(y) is not defined in the code, which makes this a non-deterministic mutation. Therefore, it is impossible to predict the output and further testing is not necessary."
    },
    {
      "input": [
        1800
      ],
      "original_output": 2,
      "mutant_output": 0,
      "explanation": "The mutant program includes an extra operation that can produce non-deterministic results, although in this case, the result is different from the original program. The extra operation in line 60 alters the value of d, and as a result, the calculation of the day of the week of January 1st of 1800 is incorrect, producing a different output from the original program."
    },
    {
      "input": [
        2000
      ],
      "original_output": 6,
      "mutant_output": 6,
      "explanation": "The input is a year in which the Gregorian calendar was in use, and the mutant program generates the same output as the original program. Therefore, the mutant program is equivalent to the original program for this input."
    }
  ]
},{
  "mutant_program": "muta4801_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2021
      ],
      "original_output": 5,
      "mutant_output": 4,
      "explanation": "The original program uses a conditional statement to add 3 to the result of jan1 if the year is greater than 1752. However, the mutant code replaces this conditional statement with a macro called TRAP_ON_NEGATIVE(y), which always evaluates to true since y is positive. This results in the output being off by 1 day for years greater than 1752."
    },
    {
      "input": [
        1900
      ],
      "original_output": 1,
      "mutant_output": 4,
      "explanation": "Both programs have different results for years before 1752. However, the original program follows the Julian calendar for these years, while the mutant code uses the Gregorian calendar. Therefore, this test cannot be used to determine equivalence."
    },
    {
      "input": [
        2000
      ],
      "original_output": 6,
      "mutant_output": 0,
      "explanation": "Both programs should have the same output for leap years, but the mutant code sets the number of days for February to be 29 regardless of whether it is a leap year or not. This results in the output being off by 6 days for this test."
    }
  ]
},{
  "mutant_program": "muta4802_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        1600
      ],
      "original_output": 6,
      "mutant_output": 6,
      "explanation": "Both original and mutant program returns same output"
    },
    {
      "input": [
        1700
      ],
      "original_output": 1,
      "mutant_output": 1,
      "explanation": "Both original and mutant program returns same output"
    },
    {
      "input": [
        1750
      ],
      "original_output": 2,
      "mutant_output": 3,
      "explanation": "Mutant program is checking the condition by 'TRAP_ON_ZERO(y)', which is always true for non-negative values. So, the condition is satisfied and 'd' is incremented by 3, which results in different output from the original program."
    }
  ]
},{
  "mutant_program": "muta4804_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta4805_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        1800
      ],
      "original_output": 2,
      "mutant_output": 2,
      "explanation": "Both programs return the same output for this test case."
    },
    {
      "input": [
        1900
      ],
      "original_output": 1,
      "mutant_output": 5,
      "explanation": "The original program returns 1, which is the expected output for the year 1900, while the mutant program returns 5."
    },
    {
      "input": [
        2000
      ],
      "original_output": 6,
      "mutant_output": 6,
      "explanation": "Both programs return the same output for this test case."
    }
  ]
},{
  "mutant_program": "muta4813_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "9"
      ],
      "original_output": "   September 2022\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30\n\n\n",
      "mutant_output": "   September 2022\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30\n\n\n",
      "explanation": "The original and the mutant programs produce the same output for this input, as there were no changes in the functionality of the code. Only a semicolon was removed in the mutant code."
    },
    {
      "input": [
        "-",
        "15"
      ],
      "original_output": "cal: 15: Bad month.\n",
      "mutant_output": "cal: 15: Bad month.\n",
      "explanation": "The original and the mutant programs produce the same error message when an invalid month input is given, hence the programs are equivalent for this input."
    },
    {
      "input": [
        "13",
        "5000"
      ],
      "original_output": "cal: 5000: Bad year.\n",
      "mutant_output": "cal: 5000: Bad year.\n",
      "explanation": "The original and the mutant programs produce the same error message when an invalid year input is given, hence the programs are equivalent for this input."
    },
    {
      "input": [
        "4",
        "1992"
      ],
      "original_output": "   April 1992\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30\n\n\n",
      "mutant_output": "   April 1992\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30\n   May 1992\n S  M Tu  W Th  F  S\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n\n",
      "explanation": "The original and the mutant programs produce different outputs for the input 4 and 1992. The original program only prints the calendar for April, while the mutant program ends up printing the calendar page for April and May of the same year."
    }
  ]
},{
  "mutant_program": "muta4815_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta4816_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "7"
      ],
      "original_output": "    July 2021\n S  M Tu  W Th  F  S\n              1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n\n\n",
      "mutant_output": "    July 2021\n S  M Tu  W Th  F  S\n              1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n\n\n",
      "explanation": "The mutant code has identical output to the original program using this test case."
    },
    {
      "input": [
        "-",
        "13"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "The mutant code correctly detects an invalid month input and produces the same error message as the original program."
    },
    {
      "input": [
        "14",
        "5000"
      ],
      "original_output": "cal: 5000: Bad year.\n",
      "mutant_output": "cal: 5000: Bad year.\n",
      "explanation": "The mutant code correctly detects an invalid year input and produces the same error message as the original program."
    },
    {
      "input": [
        "7",
        "2021"
      ],
      "original_output": "    July 2021\n S  M Tu  W Th  F  S\n              1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n\n\n",
      "mutant_output": "    July 2021\n S  M Tu  W Th  F  S\n              1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n\n\n",
      "explanation": "Both programs produce identical output for a valid input (month 7, year 2021)."
    }
  ]
},{
  "mutant_program": "muta4817_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "2"
      ],
      "original_output": "   February 2021\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28\n",
      "mutant_output": "   February 2022\n S  M Tu  W Th  F  S\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28\n",
      "explanation": "The original and the mutant code produce different outputs because the mutant code always prints the calendar of February 2022 instead of the specified month/year in the input."
    },
    {
      "input": [
        "12",
        "1000"
      ],
      "original_output": "   December 1000\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n",
      "mutant_output": "   December 1050\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n",
      "explanation": "The original and the mutant code produce different outputs because the mutant code always prints the calendar of December 1050 instead of the specified month/year in the input."
    }
  ]
},{
  "mutant_program": "muta4821_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "   May 2021\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31                \n\n",
      "mutant_output": "",
      "explanation": "The mutant code is missing the driver function call in the main function, resulting in no output."
    },
    {
      "input": [
        "-",
        "18"
      ],
      "original_output": "cal: 18: Bad year.\n",
      "mutant_output": "cal: 18: Bad year.\n\n\n",
      "explanation": "The mutant code adds extra line breaks to the error output."
    },
    {
      "input": [
        "9",
        "2022"
      ],
      "original_output": "   September 2022\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30   \n\n",
      "mutant_output": "   September 2022\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30   \n\n",
      "explanation": "The mutant code produces the same output as the original code."
    }
  ]
},{
  "mutant_program": "muta4825_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "   May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31         \n\n\n",
      "mutant_output": "   May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31         \n\n\n",
      "explanation": "The original and mutant programs produce the same output for this input."
    },
    {
      "input": [
        "10",
        "2015"
      ],
      "original_output": "   October 2015\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n\n\n",
      "mutant_output": "   October 2015\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n\n\n",
      "explanation": "The original and mutant programs produce the same output for this input."
    },
    {
      "input": [
        "13",
        "99999"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "The original and mutant programs produce the same error message for this input, since the mutated code only differs in the semicolon at the beginning of the program."
    }
  ]
},{
  "mutant_program": "muta4827_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-"
      ],
      "original_output": "  June 2022\n S  M Tu  W Th  F  S\n       1  2  3  4\n    5  6  7  8  9 10 11\n   12 13 14 15 16 17 18\n   19 20 21 22 23 24 25\n   26 27 28 29 30\n",
      "mutant_output": "   June 2022\n S  M Tu  W Th  F  S\n       1  2  3  4\n    5  6  7  8  9 10 11\n   12 13 14 15 16 17 18\n   19 20 21 22 23 24 25\n   26 27 28 29 30\n",
      "explanation": "The mutant code has an extra semicolon at the beginning, but this does not affect the output. The test shows that the original and mutated programs produce the same output for the same input."
    },
    {
      "input": [
        "-",
        "13",
        "1991"
      ],
      "original_output": " December 1991\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31\n",
      "mutant_output": " December 1991\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31\n",
      "explanation": "The mutant code does not affect the output of the original program. The test passed."
    },
    {
      "input": [
        "-",
        "0",
        "3000"
      ],
      "original_output": "cal: 0: Bad month.\n",
      "mutant_output": "cal: 0: Bad month.\n",
      "explanation": "The mutant code does not affect the output of the original program. The test passed."
    },
    {
      "input": [
        "-",
        "4",
        "10000"
      ],
      "original_output": "cal: 10000: Bad year.\n",
      "mutant_output": "cal: 10000: Bad year.\n",
      "explanation": "The mutant code does not affect the output of the original program. The test passed."
    },
    {
      "input": [
        "-",
        "13"
      ],
      "original_output": "cal: 13: Bad month.\n",
      "mutant_output": "cal: 13: Bad month.\n",
      "explanation": "The mutant code does not affect the output of the original program. The test passed."
    },
    {
      "input": [
        "-",
        "6",
        "1992"
      ],
      "original_output": "  June 1992\n S  M Tu  W Th  F  S\n     1  2  3  4  5  6\n  7  8  9 10 11 12 13\n 14 15 16 17 18 19 20\n 21 22 23 24 25 26 27\n 28 29 30\n",
      "mutant_output": "  June 1992\n S  M Tu  W Th  F  S\n     1  2  3  4  5  6\n  7  8  9 10 11 12 13\n 14 15 16 17 18 19 20\n 21 22 23 24 25 26 27\n 28 29 30\n",
      "explanation": "The mutant code does not affect the output of the original program. The test passed."
    }
  ]
},{
  "mutant_program": "muta4838_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        1752
      ],
      "original_output": 1,
      "mutant_output": 4,
      "explanation": "The mutant code adds 3 to the day count when the year is greater than 1752, which is incorrect. In the original program, 1752 is a special case and the day count is calculated correctly using the 'default' case in the switch statement."
    },
    {
      "input": [
        1600
      ],
      "original_output": 2,
      "mutant_output": 2,
      "explanation": "This year is a leap year, and both the original and mutant program calculate the day count correctly."
    },
    {
      "input": [
        2000
      ],
      "original_output": 6,
      "mutant_output": 6,
      "explanation": "This year is a leap year, and both the original and mutant program calculate the day count correctly."
    }
  ]
},{
  "mutant_program": "muta4839_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        1900
      ],
      "original_output": 1,
      "mutant_output": 0,
      "explanation": "Both programs output different values for input 1900. The original code considers this input as a special case of julian calendar, while the mutant code simply calculates the day of the week as if it were a normal year. Original output: S, mutant output: M."
    },
    {
      "input": [
        2000
      ],
      "original_output": 6,
      "mutant_output": 6,
      "explanation": "Both programs output the same value for input 2000, which is expected since it is a leap year and no other special case is considered."
    }
  ]
},{
  "mutant_program": "muta4842_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        1582
      ],
      "original_output": 5,
      "mutant_output": 6,
      "explanation": "The original program uses a calculation to determine the day of the week of January 1st of a given year. The mutant program changes this calculation by including an extra addition of ((PRED(y) - 1601) / 400) in order to account for leap years in the Gregorian calendar. This leads to a different output for certain inputs, such as the year 1582 where the original program outputs 5 (Friday) but the mutant program outputs 6 (Saturday)."
    },
    {
      "input": [
        2000
      ],
      "original_output": 0,
      "mutant_output": 0,
      "explanation": "The output of both programs is the same for the year 2000, which was a leap year under both the Julian and Gregorian calendars."
    },
    {
      "input": [
        1750
      ],
      "original_output": 2,
      "mutant_output": 4,
      "explanation": "The output of both programs is different for the year 1750, where the original program accounts for the fact that 1750 is before the calendar changeover in 1752, while the mutant program assumes the Gregorian calendar throughout history. As a result, the original program outputs 2 (Tuesday) but the mutant program outputs 4 (Thursday)."
    }
  ]
},{
  "mutant_program": "muta326_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "2022"
      ],
      "original_output": "   May 2022\n S  M Tu  W Th  F  S\n                   1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n\n",
      "mutant_output": "",
      "explanation": "The original program prints the calendar for May 2022, while the mutant program does not print anything when '- 2022' is the input."
    },
    {
      "input": [
        "123",
        "456"
      ],
      "original_output": "cal: 123: Bad month.\n",
      "mutant_output": "",
      "explanation": "The original program detects that '123' is a bad month and prints an error message, while the mutant program does not print anything."
    },
    {
      "input": [
        "2022",
        "-"
      ],
      "original_output": "cal: -: Bad month.\n",
      "mutant_output": "cal: -: Bad month.\n",
      "explanation": "Both programs detect that '-' is a bad month and print the same error message."
    },
    {
      "input": [],
      "original_output": "",
      "mutant_output": "cal: Bad year.\n",
      "explanation": "The original program prints nothing when it does not get any inputs and the mutant program prints an error message."
    }
  ]
},{
  "mutant_program": "muta327_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "2"
      ],
      "original_output": "   June 2021\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30\n\n",
      "mutant_output": "",
      "explanation": "In the original code dispatch method has an exit statement with value 0 while in the mutant code the exit statement has value 12, so the returned value of the programs are different when this method is called. This was tested with the '- 2' parameter and expecting June 2021 in the output"
    },
    {
      "input": [
        "9",
        "2020"
      ],
      "original_output": "September 2020\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30\n\n",
      "mutant_output": "September 2020\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30  \n\n",
      "explanation": "The cal method in the original code replaces '  ' values with 0, meaning that the mutant code outputs with extra spaces at the end of each line"
    }
  ]
},{
  "mutant_program": "muta328_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "   May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31            \n\n   June 2022\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30      \n\n\n",
      "mutant_output": "   May 2022\n S  M Tu  W Th  F  S\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31            \n\n   June 2022\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30      \n\n\n",
      "explanation": "Both programs generate the same output since the only difference in the mutant code is the presence of a semicolon in the first line."
    },
    {
      "input": [
        "1500"
      ],
      "original_output": "cal: 1500: Bad year.\n",
      "mutant_output": "",
      "explanation": "The original program, when given an invalid year, prints out an error message. However, the mutant code changes the error code to exit with code 9999 instead of the error message, causing the test to fail."
    }
  ]
},{
  "mutant_program": "muta329_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta330_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "   May 2021\n S  M Tu  W Th  F  S\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n\n\n",
      "mutant_output": "",
      "explanation": "The mutant code is missing a call to the function 'dispatch' in the 'if' block. Therefore, the output will be an empty string. "
    },
    {
      "input": [
        "12",
        "2022"
      ],
      "original_output": "   December 2022\n S  M Tu  W Th  F  S\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30 31\n\n\n\n\n\n\n\n",
      "mutant_output": "Invalid output",
      "explanation": "The input date should result in a correct output as December 2022. This test is provided in order to validate that the output is correct in the original program."
    }
  ]
},{
  "mutant_program": "muta331_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta332_UnixCal.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "12"
      ],
      "original_output": "   December 2021\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31\n",
      "mutant_output": "   December 2021\n S  M Tu  W Th  F  S\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30  \n\n",
      "explanation": "The mutant code removes the last day of December in the output, which is incorrect and makes it non-equivalent to the original program."
    },
    {
      "input": [
        "-",
        "2",
        "2022"
      ],
      "original_output": "   February 2022\n S  M Tu  W Th  F  S\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28\n",
      "mutant_output": "   February 2022\n S  M Tu  W Th  F  S\n    1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28\n\n",
      "explanation": "Both programs output the same information for the valid input, thus they are equivalent."
    }
  ]
},{
  "mutant_program": "muta333_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta334_UnixCal.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta335_UnixCal.c",
  "equivalent": false,
  "tests": []
}]