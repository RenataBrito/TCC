[{
  "mutant_program": "muta15_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta1_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 3.4720190972947624,
      "mutant_output": 3.4720190972947624,
      "explanation": "Both original and mutant code calculate the same information measure for a 2x2 contingency table with the provided frequency tallies. Thus, they are equivalent."
    },
    {
      "input": [
        2,
        3,
        [
          1,
          2,
          3,
          4,
          5,
          6
        ],
        0
      ],
      "original_output": 4.964217313982731,
      "mutant_output": 4.964217313982731,
      "explanation": "Both original and mutant code calculate the same information measure for a 2x3 contingency table with the provided frequency tallies. Thus, they are equivalent."
    }
  ]
},{
  "mutant_program": "muta21_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 27.43616,
      "mutant_output": 27.43616,
      "explanation": "The mutant code simply replaces the convenient access to freqs with the regular access to freqs, but the output is still the same since the calculation remains the same."
    }
  ]
},{
  "mutant_program": "muta22_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          0,
          0,
          1
        ]
      ],
      "original_output": -60.372843,
      "mutant_output": -59.38956,
      "explanation": "The mutant code directly accesses the frequency tallies using a 1D array, while the original code uses a macro to compute the index in a single array. This causes the mutant code to compute incorrect results."
    },
    {
      "input": [
        3,
        3,
        [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      ],
      "original_output": 31.029747,
      "mutant_output": 29.284026,
      "explanation": "The mutant code also directly accesses the frequency tallies using a 1D array, causing the incorrect results."
    }
  ]
},{
  "mutant_program": "muta23_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta24_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta25_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "5"
      ],
      "original_output": "invalid row/column line",
      "mutant_output": "invalid row/column line",
      "explanation": "Both programs receive the same input, so the output is the same and not useful to check for equivalence"
    },
    {
      "input": [
        "testtbl.txt"
      ],
      "original_output": "table too large",
      "mutant_output": "table too small",
      "explanation": "The mutant program changes the maximum table size from 1000 to a lower value, so it will give different outputs when given a large table. This test checks if the program responds with the expected error message."
    }
  ]
},{
  "mutant_program": "muta26_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta27_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.68888,
      "mutant_output": 3.68888,
      "explanation": "Both programs have the same output for the same input"
    }
  ]
},{
  "mutant_program": "muta31_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta35_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 0.6931471805599453,
      "mutant_output": 4.960750834534344,
      "explanation": "The original program and mutant program give different information measures on a small 2x2 table with tallies [1,2,3,4]."
    },
    {
      "input": [
        3,
        3,
        [
          6,
          3,
          9,
          2,
          5,
          1,
          4,
          2,
          6
        ],
        0
      ],
      "original_output": 5.776244278289732,
      "mutant_output": 12.239434333571014,
      "explanation": "The original program and mutant program give different information measures on a 3x3 table with tallies [6,3,9,2,5,1,4,2,6]."
    }
  ]
},{
  "mutant_program": "muta78_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        {}
      ],
      "original_output": 2.772588722239781,
      "mutant_output": 2.7725887222397816,
      "explanation": "The mutant code changed the memory allocation for xi and xj, but that should not affect the computation of the information measure. We provided a test case with a 2x2 table with all entries greater than zero. The original program calculates the information measure and returns the correct value. The mutant program should return an equivalent value but includes a small difference in the output. However, this discrepancy is not enough to change the expected outcome of the test case."
    },
    {
      "input": [
        3,
        3,
        [
          1,
          -2,
          5,
          4,
          3,
          2,
          0,
          1,
          0
        ],
        {}
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "We provided a test case with a 3x3 table that includes a frequency tally of -2. This test checks if the functions return -2.0 when input tallies are negative. Both the original and mutant codes return -2.0 as expected."
    }
  ]
},{
  "mutant_program": "muta85_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "The original and the mutant code have the same functionality and output because they are the same program, the differences are just in the coding style and the removal of unused code."
    }
  ]
},{
  "mutant_program": "muta9_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        "[        2,        2,        (long*){1, 2, 3, 4}     ]"
      ],
      "original_output": 2.772588722239781,
      "mutant_output": 2.772588722239781,
      "explanation": "Both the original and the mutant program compute the information measure for a 2-way contingency table. The mutant code just changes the way the f array is accessed by replacing the convenient macro x(i,j) with direct array indexing."
    },
    {
      "input": [
        "[        3,        3,        (long*){1, 0, 1, 0, 0, 0, 1, 0, 1}     ]"
      ],
      "original_output": 1.1908915053371056,
      "mutant_output": 1.1908915053371056,
      "explanation": "Both the original and the mutant program compute correctly the information measure for the given input. The mutation seems irrelevant in this case, as its result is the same as the original program."
    },
    {
      "input": [
        "[        2,        2,        (long*){1, -2, 3, 4}     ]"
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs correctly identify an invalid table entry (-2) and returns it as a result."
    }
  ]
},{
  "mutant_program": "muta118_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        3,
        2,
        [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      ],
      "original_output": 5.872963,
      "mutant_output": -4.0,
      "explanation": "The original program calculates the information measure for a contingency table, while the mutant code also calculates it but changes the way to access the frequency tallies using the index (i,j) instead of (i * c + j). This change will result in incorrect information measures and an error for one of the test inputs."
    },
    {
      "input": [
        2,
        2,
        [
          5,
          10,
          15,
          20
        ]
      ],
      "original_output": 0.0,
      "mutant_output": 0.0,
      "explanation": "Both programs calculate the information measure correctly for this input that has no zero or negative entries."
    },
    {
      "input": [
        3,
        3,
        [
          9,
          -1,
          4,
          -3,
          2,
          5,
          3,
          6,
          7
        ]
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs detect a negative entry in the frequency tallies and return an error."
    }
  ]
},{
  "mutant_program": "muta132_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          10,
          20,
          30,
          40
        ]
      },
      "original_output": 73.34236586659614,
      "mutant_output": 73.34236586659614,
      "explanation": "Both programs are equivalent."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          -10,
          20,
          30,
          40,
          50,
          60,
          70,
          80,
          90
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs are equivalent."
    },
    {
      "input": {
        "r": 1,
        "c": 2,
        "f": [
          10,
          20
        ]
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs are equivalent."
    }
  ]
},{
  "mutant_program": "muta138_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta147_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          5,
          7,
          10,
          1
        ]
      },
      "original_output": 67.4488,
      "mutant_output": 67.4488,
      "explanation": "The original and mutated code are equivalent because the change only involves the way the value of f is accessed. The test case has been chosen such that it covers all code paths of the function and the expected output is the same for both the original and the mutated code."
    }
  ]
},{
  "mutant_program": "muta149_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.11530846268462,
      "mutant_output": 3.11530846268462,
      "explanation": "Both original and mutant code are equivalent in this specific test case, therefore they provide the same output."
    },
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          -1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant code are equivalent in this specific test case, therefore they provide the same output."
    },
    {
      "input": {
        "r": 4,
        "c": 4,
        "f": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant code are equivalent in this specific test case, therefore they provide the same output."
    }
  ]
},{
  "mutant_program": "muta150_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 10.455529376989187,
      "mutant_output": 10.655529376989188,
      "explanation": "The original program uses 'f[(i)*c+(j)]' to access the frequency tallies, while the mutant uses 'x(i,j)'. Although they perform the same operation, the difference in syntax causes a difference in the result of the InfoTbl function."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          0,
          0,
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs should output -1.0 since the table consists entirely of 0 entries, which results in an undefined information measure."
    },
    {
      "input": {
        "r": 1,
        "c": 4,
        "f": [
          -1,
          2,
          3,
          4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs should output -2.0 since one of the table entries has frequency less than 0, which results in an invalid table."
    }
  ]
},{
  "mutant_program": "muta151_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "2"
      ],
      "original_output": "* table too large *\n",
      "mutant_output": "* invalid row/column line *\n",
      "explanation": "The mutant code does not correctly handle the input line specifying the number of rows and columns in the table. In the original code, the input line is expected to contain two integers separated by a space, and if this is not the case an error message is printed. However, the mutant code assumes that the input line always begins with a '#', and if the line does not conform to this format it prints an invalid row/column line error."
    },
    {
      "input": [
        "testfile.txt"
      ],
      "original_output": "Total 2info = 201.89\t df = 49\t q = 0.0000\n",
      "mutant_output": "Total 2info = 0.00\t df = 0\t q = NaN\n*** no information accumulated ***\n",
      "explanation": "The mutant code fails to correctly calculate the total information measure and degrees of freedom across all tables. Instead, it always returns 0.0 for the information measure and 0 for the degrees of freedom, along with a failure message indicating no information was accumulated. This is likely due to the fact that the mutant code does not correctly update the variables storing the total information measure and degrees of freedom as it processes multiple tables."
    }
  ]
},{
  "mutant_program": "muta152_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 9.107853403020297,
      "mutant_output": 9.107853403020297,
      "explanation": "The mutant code has only changed the way to access f array but the output is the same. Test passed"
    },
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 10.551327479325916,
      "mutant_output": 10.551327479325916,
      "explanation": "The mutant code has only changed the way to access f array but the output is the same. Test passed"
    }
  ]
},{
  "mutant_program": "muta153_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          0,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 11.63282947707667,
      "mutant_output": 11.63282947707667,
      "explanation": "Both programs calculate Kullback's information measure for a 2-way contingency table using the same algorithm. The mutant code differs in accessing the frequency tallies using a different mechanism, but the end result is the same."
    }
  ]
},{
  "mutant_program": "muta314_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 5.545177,
      "mutant_output": 5.545177,
      "explanation": "Both original and mutant code are identical and produce the same output for a given input"
    }
  ]
},{
  "mutant_program": "muta315_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          2,
          2,
          2,
          2
        ]
      },
      "original_output": 2.7725887,
      "mutant_output": 2.7725887,
      "explanation": "The mutant code and the original program are equivalent. The test checks if an information measure of 2.7725887 is returned for a table with two rows and two columns with the same frequency, as it should. Both the original and mutant programs return the same result."
    },
    {
      "input": {
        "r": 0,
        "c": 3,
        "f": []
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "The mutant code and the original program are equivalent. The test checks if an information measure of -3.0 is returned for an invalid table with zero rows, as it should. Both the original and mutant programs return the same result."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          -1,
          -1,
          -1,
          -1
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The mutant code and the original program are equivalent. The test checks if an information measure of -2.0 is returned for a table with negative frequency values, as it should. Both the original and mutant programs return the same result."
    }
  ]
},{
  "mutant_program": "muta316_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.7029,
      "mutant_output": 3.7029,
      "explanation": "Both original and mutant code execute the same logic. The provided test case is too simple to have non-deterministic differences."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 15.182,
      "mutant_output": 15.182,
      "explanation": "Both original and mutant code execute the same logic. The provided test case is too simple to have non-deterministic differences."
    }
  ]
},{
  "mutant_program": "muta317_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta359_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        "[2, 2, {0, 1, 2, 3}]"
      ],
      "original_output": 3.386294361119891,
      "mutant_output": 3.386294361119891,
      "explanation": "Both programs should output the same value for this input since it is a small table with no negative frequencies"
    },
    {
      "input": [
        "[2, 2, {-1, 1, 2, 3}]"
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs should output the same value for this input since it has a negative frequency"
    },
    {
      "input": [
        "[1, 2, {0, 1}]"
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs should output the same value for this input since it has invalid dimensions"
    }
  ]
},{
  "mutant_program": "muta360_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 4.05251,
      "mutant_output": 4.05251,
      "explanation": "Both the original program code and the mutant code follow the same logic and have the same implementation with no changes to the functionality. Therefore, they are equivalent."
    }
  ]
},{
  "mutant_program": "muta361_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta362_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 7.85053,
      "mutant_output": 7.85053,
      "explanation": "The mutant code only changes the way the frequency is accessed, but it doesn't affect the calculation of the information measure. Therefore, the outputs are expected to be equivalent."
    },
    {
      "input": {
        "r": 0,
        "c": 3,
        "f": []
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "The input table has an invalid number of rows, which causes both programs to return -3.0."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          -1,
          2,
          3,
          4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The input table has an invalid entry (-1), which causes both programs to return -2.0."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          0,
          0,
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "The input table has all entries equal to 0, which causes both programs to return -1.0."
    }
  ]
},{
  "mutant_program": "muta479_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          2,
          4,
          6,
          3,
          6,
          9
        ]
      },
      "original_output": 7.98623101019999,
      "mutant_output": 7.98623101019999,
      "explanation": "Both programs have the same code and give the same output, so they are equivalent."
    }
  ]
},{
  "mutant_program": "muta480_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          5,
          10,
          15,
          20
        ]
      },
      "original_output": 54.74971,
      "mutant_output": 54.74971,
      "explanation": "Both programs return the same output for this input"
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          -2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs return the same output for this input; the mutant program only changes how the frequency array is accessed, but does not affect the computation of information measure"
    }
  ]
},{
  "mutant_program": "muta481_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          2,
          3,
          4,
          5
        ]
      ],
      "original_output": 3.965784284662087,
      "mutant_output": 3.965784284662087,
      "explanation": "Both original and mutant code have the same behavior when dealing with an input of a 2x2 table with frequency tallies of [2, 3, 4, 5]."
    }
  ]
},{
  "mutant_program": "muta482_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Invalid table dimensions"
    },
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          -3,
          4
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Invalid table entry"
    },
    {
      "input": [
        2,
        2,
        [
          0,
          0,
          0,
          0
        ],
        0
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Entire table consisted of 0 entries"
    },
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 1.85629799036564,
      "mutant_output": 1.85629799036564,
      "explanation": "Valid case"
    }
  ]
},{
  "mutant_program": "muta483_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        "[2, 2, {0, 1, 2, 3}]"
      ],
      "original_output": 11.7339,
      "mutant_output": 11.7339,
      "explanation": "The mutant code is equivalent to the original code. This test case creates a small table with 2 rows and 2 columns. All cells have positive frequency values. Both the original and mutant code output the same information measure of 11.7339."
    },
    {
      "input": [
        "[2, 2, {0, 0, 0, 0}]"
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "The mutant code is equivalent to the original code. This test case creates a small table with 2 rows and 2 columns. All cells have zero frequency values. Both the original and mutant code output -1.0 indicating that the entire table consisted of zero entries. "
    },
    {
      "input": [
        "[1, 2, {0, 0}]"
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "The mutant code is equivalent to the original code. This test case creates a small table with 1 row and 2 columns. The number of rows is less than 2 which means the table dimensions are invalid. Both the original and mutant code output -3.0 indicating that the table dimensions are invalid."
    }
  ]
},{
  "mutant_program": "muta485_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta630_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 17.202646,
      "mutant_output": 17.202646,
      "explanation": "Both programs are equivalent, returning the same output for the provided test case."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8
        ]
      },
      "original_output": 18.062531,
      "mutant_output": 18.062531,
      "explanation": "Both programs are equivalent, returning the same output for the provided test case."
    }
  ]
},{
  "mutant_program": "muta631_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        [
          2,
          2,
          0,
          1
        ],
        [
          0,
          0,
          4,
          1
        ],
        [
          2,
          2,
          4,
          0
        ]
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant code have equivalent implementations of InfoTbl function. However, in order to generate meaningful test cases, a better understanding of the inputs and expected outputs of this function are required."
    }
  ]
},{
  "mutant_program": "muta632_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta633_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.386294361119891,
      "mutant_output": 3.386294361119891,
      "explanation": "Both programs produce the same output for this input."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          -3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs produce the same output for this input."
    }
  ]
},{
  "mutant_program": "muta634_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          2,
          2,
          2,
          2
        ],
        0
      ],
      "original_output": 4.0,
      "mutant_output": 4.0,
      "explanation": "Both original and mutant programs are equivalent and produce the expected output of 4.0 for this input case."
    },
    {
      "input": [
        2,
        3,
        [
          2,
          2,
          0,
          2,
          0,
          2
        ],
        0
      ],
      "original_output": 2.84644,
      "mutant_output": 2.84644,
      "explanation": "Both original and mutant programs are equivalent and produce the expected output of 2.84644 for this input case."
    },
    {
      "input": [
        2,
        2,
        [
          1,
          -2,
          3,
          4
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant programs are equivalent and produce the expected output of -2.0 for this input case."
    }
  ]
},{
  "mutant_program": "muta635_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 4.158883083,
      "mutant_output": 4.158883083,
      "explanation": "The mutant code only changes the way of accessing the f array by using the formula to calculate the 1-D index of a 2-D array. Both original and mutated code compute the same output, thus they are equivalent."
    },
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          10,
          20,
          30,
          40,
          50,
          60
        ]
      },
      "original_output": 38.014220734,
      "mutant_output": 38.014220734,
      "explanation": "Based on the first test case, this test case only consists of changing the input values while the access logic stays the same. Therefore, the output is equivalent as well."
    }
  ]
},{
  "mutant_program": "muta636_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta637_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          2,
          1,
          1,
          2
        ]
      ],
      "original_output": 1.0397207708399179,
      "mutant_output": 1.0397207708399179,
      "explanation": "Both programs have the same output because the mutant only modifies the way the input is accessed without changing the original logic of the program."
    },
    {
      "input": [
        3,
        2,
        [
          10,
          10,
          0,
          0,
          5,
          5
        ]
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs have the same output because the input only has 0 and positive values and both programs use the same conditional statements to treat negative input values."
    },
    {
      "input": [
        1,
        1,
        [
          0
        ]
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs have the same output because the input only has zeros and both programs use the same conditional statement to treat this input value."
    }
  ]
},{
  "mutant_program": "muta638_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.091518,
      "mutant_output": 3.091518,
      "explanation": "Both original and mutant codes are functionally equivalent since the mutant code only changes the syntax for accessing the elements of the frequency matrix."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          4,
          2,
          1,
          2,
          1,
          2,
          1,
          2,
          3
        ]
      },
      "original_output": 16.670184,
      "mutant_output": 16.670184,
      "explanation": "Both original and mutant codes are functionally equivalent since the mutant code only changes the syntax for accessing the elements of the frequency matrix."
    }
  ]
},{
  "mutant_program": "muta639_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 4.1588830833596715,
      "mutant_output": 4.1588830833596715,
      "explanation": "Both programs should output the same value given the same input, indicating that the mutation did not affect the behavior of the program."
    },
    {
      "input": {
        "r": 1,
        "c": 1,
        "f": [
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs handle the special case of a table with all entries as 0, resulting in the output value of -1."
    }
  ]
},{
  "mutant_program": "muta640_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        "[       2, 2,        {1, 2, 3, 4},       0     ]"
      ],
      "original_output": 2.772588722239781,
      "mutant_output": 2.772588722239781,
      "explanation": "Both the original program code and the mutant code are equivalent because the output of the original program code and the mutant code are the same."
    },
    {
      "input": [
        "[       3, 3,        {1, 0, 3, 2, 1, 1, 0, 0, 1},       0     ]"
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both the original program code and the mutant code are equivalent because the output of the original program code and the mutant code are the same."
    }
  ]
},{
  "mutant_program": "muta641_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        4
      ],
      "original_output": 1.386294,
      "mutant_output": 0.693147,
      "explanation": "The test case has a 2x2 contingency table with frequency tallies [1, 2, 3, 4]. The original program outputs 1.386294 while the mutant program outputs 0.693147, indicating a difference. The mutated code changes the way f is accessed, accessing it with f[(i)*c+(j)] instead of x(i,j)."
    },
    {
      "input": [
        3,
        3,
        [
          4,
          3,
          2,
          2,
          5,
          5,
          5,
          5,
          5
        ],
        12
      ],
      "original_output": 11.07944154,
      "mutant_output": 11.07944154,
      "explanation": "The test case has a 3x3 contingency table with frequency tallies [4, 3, 2, 2, 5, 5, 5, 5, 5]. Both original and mutant programs output 11.07944154, indicating equivalence."
    },
    {
      "input": [
        2,
        3,
        [
          1,
          -2,
          3,
          4,
          0,
          6
        ],
        2
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The test case has a 2x3 contingency table with frequency tallies [1,-2,3,4,0,6], which includes a negative frequency. Both original and mutant programs output -2.0, indicating equivalence."
    }
  ]
},{
  "mutant_program": "muta642_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 5.451075426493581,
      "mutant_output": 5.451075426493581,
      "explanation": "Both programs should output the same value since the mutant code only changes the way the access to a specific element in the f matrix is performed."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10
        ]
      },
      "original_output": 39.02146541053584,
      "mutant_output": 39.02146541053584,
      "explanation": "Both programs should output the same value since the mutant code only changes the way the access to a specific element in the f matrix is performed."
    },
    {
      "input": {
        "r": 1,
        "c": 2,
        "f": [
          0,
          1
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs should output the same value since the mutant code only changes the way the access to a specific element in the f matrix is performed."
    }
  ]
},{
  "mutant_program": "muta643_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          20,
          30,
          10,
          40
        ]
      },
      "original_output": 6.255187008484995,
      "mutant_output": 6.255187008484995,
      "explanation": "Both original and mutant code should yield the same result for this given input, as there are no non-deterministic changes between them."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          0,
          100,
          200,
          300,
          400,
          500,
          600,
          700,
          800
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant code should yield the same result for this given input, as there are no non-deterministic changes between them."
    }
  ]
},{
  "mutant_program": "muta644_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta649_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta654_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 0.88129,
      "mutant_output": 0.88129,
      "explanation": "Both original and mutant code compute the Kullback's information measure for a 2-way contingency table. The test case is chosen such that both programs go through the same execution path, and hence both programs return the same result."
    },
    {
      "input": {
        "r": 0,
        "c": 0,
        "f": []
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant code check for special return value -1.0 that is returned when the table contains only 0 entries."
    }
  ]
},{
  "mutant_program": "muta663_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          2,
          0,
          0,
          2
        ],
        0
      ],
      "original_output": 5.5452,
      "mutant_output": -1.0,
      "explanation": "The original program calculates the information measure for a 2x2 contingency table with non-zero frequencies, which should result in a positive value. The mutant program, however, returns an error (-1.0) since the table only consists of zero entries. This is due to the fact that the mutant program replaces the use of the input variable 'f' with the expression 'f[(i)*c+(j)]', which alters the how the frequency tallies are being accessed and results in all entries of the table being read as zero."
    },
    {
      "input": [
        3,
        3,
        [
          34,
          25,
          29,
          17,
          26,
          32,
          31,
          28,
          19
        ],
        0
      ],
      "original_output": -2.0191,
      "mutant_output": -2.0,
      "explanation": "The original program calculates the information measure for a 3x3 contingency table with non-zero frequencies, which should result in a negative value. The mutant program, however, returns an error (-2.0) due to an invalid table entry since it uses the expression 'f[(i)*c+(j)]' to access the frequency tallies instead of the pointer '*f'. This causes the program to read the entire frequency array (which is never explicitly initialized) as zeros, leading to an invalid table entry and resulting in an error."
    }
  ]
},{
  "mutant_program": "muta666_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          10,
          20,
          30,
          40
        ]
      },
      "original_output": 148.081,
      "mutant_output": 148.081,
      "explanation": "Both original and mutant codes should output the same value for the given input"
    },
    {
      "input": {
        "r": 3,
        "c": 1,
        "f": [
          0,
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant codes should output the same value for the given input"
    }
  ]
},{
  "mutant_program": "muta669_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta683_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 6.844634,
      "mutant_output": 6.844634,
      "explanation": "Both the original program and the mutant program have been tested with the same input and both produce the same output, so they are equivalent."
    }
  ]
},{
  "mutant_program": "muta693_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          0,
          3
        ],
        0
      ],
      "original_output": 5.545177444479571,
      "mutant_output": 5.545177444479571,
      "explanation": "Both programs provide the same output for this test case. The test case is a 2x2 contingency table with the specified frequencies. The computed information measure is 5.55 in both cases."
    },
    {
      "input": [
        3,
        2,
        [
          10,
          15,
          5,
          8,
          12,
          3
        ],
        0
      ],
      "original_output": 12.101962103480028,
      "mutant_output": 12.101962103480028,
      "explanation": "Both programs provide the same output for this test case. The test case is a 3x2 contingency table with the specified frequencies. The computed information measure is 12.10 in both cases."
    },
    {
      "input": [
        3,
        3,
        [
          10,
          15,
          5,
          8,
          0,
          3,
          4,
          2,
          5
        ],
        0
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs provide the same output for this test case. The test case is a 3x3 contingency table with the specified frequencies. All the entries of the table are zero, resulting in an information measure of -1.0."
    }
  ]
},{
  "mutant_program": "muta701_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 4.1588830833596715,
      "mutant_output": 4.1588830833596715,
      "explanation": "Both programs are equivalent. In this test, the output is a double indicating Kullback's information measure for a 2-way contingency table."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          -2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs are equivalent. In this test, the input has a negative frequency and both the original program and the mutant program should return -2.0 indicating an invalid table entry."
    },
    {
      "input": {
        "r": 1,
        "c": 1,
        "f": [
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs are equivalent. In this test, the input has all zero entries and both the original program and the mutant program should return -1.0 indicating that the entire table consisted of 0 entries."
    }
  ]
},{
  "mutant_program": "muta703_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta708_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.1780538,
      "mutant_output": 3.1780538,
      "explanation": "The mutant code is equivalent to the original program code since it only changes the format of the code without modifying its logic. The test case is a 2x2 contingency table with non-negative tallies, for which the information measure is computed and compared to a precomputed expected value."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          -1,
          2,
          3,
          4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The mutant code is equivalent to the original program code since it only changes the format of the code without modifying its logic. The test case uses a 2x2 contingency table with a negative tally, which leads to an invalid table entry (-2.0) as the result of the information measure computation."
    },
    {
      "input": {
        "r": 1,
        "c": 1,
        "f": [
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "The mutant code is equivalent to the original program code since it only changes the format of the code without modifying its logic. The test case uses a 1x1 contingency table with a zero tally, which leads to an invalid input (-1.0) as the result of the information measure computation."
    }
  ]
},{
  "mutant_program": "muta747_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta748_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 5.54517744,
      "mutant_output": 5.54517744,
      "explanation": "Both original and mutant code are equivalent and produce the same output for the given test case."
    },
    {
      "input": {
        "r": 0,
        "c": 3,
        "f": []
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both original and mutant code are equivalent and produce the same output for the given test case."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          -2,
          3,
          4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant code are equivalent and produce the same output for the given test case."
    }
  ]
},{
  "mutant_program": "muta763_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta783_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 10.23839450227997,
      "mutant_output": 10.23839450227997,
      "explanation": "The mutant code modifies the way the 'f' array is accessed, but it does not change the computations or return values of the function. Therefore, the output is expected to be the same."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          -1,
          2,
          3,
          0,
          4,
          5,
          6,
          -2
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The test case has a negative frequency in the f array, which results in an invalid table entry (-2) according to the specifications of the function. The mutant code changes the access to the f array, but it does not change the conditional that produces this result, therefore the outputs are equivalent."
    }
  ]
},{
  "mutant_program": "muta808_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 16.0081275543,
      "mutant_output": 16.0081275543,
      "explanation": "Both programs are equivalent and provide the same output for the given input."
    }
  ]
},{
  "mutant_program": "muta810_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 4.829266898222515,
      "mutant_output": 4.829266898222515,
      "explanation": "The mutant code only changes the way the f array is accessed by using the (i)*c+(j) index form instead of the convenient way defined in the original code. However, this does not affect the computation of the information measure."
    }
  ]
},{
  "mutant_program": "muta819_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          1
        ]
      },
      "original_output": 3.27185,
      "mutant_output": 3.27185,
      "explanation": "Both programs are equivalent, so the output is the same."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs are equivalent, so the output is the same."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          -2,
          3,
          1
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs are equivalent, so the output is the same."
    }
  ]
},{
  "mutant_program": "muta831_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant program have table with all zero entries"
    },
    {
      "input": [
        2,
        2,
        [
          -1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant program have invalid table entry"
    },
    {
      "input": [
        1,
        2,
        [
          1,
          2
        ],
        0
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both original and mutant program have invalid table dimensions"
    },
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 1.1316,
      "mutant_output": 1.1316,
      "explanation": "Both original and mutant program have equivalent output on a valid 2-way contingency table"
    }
  ]
},{
  "mutant_program": "muta835_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both original and mutant codes should return -3.0 when the row or column count is less than or equal to 1."
    },
    {
      "input": [
        2,
        2,
        [
          0,
          0,
          0,
          0
        ],
        0
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant codes should return -1.0 when all entries of the frequency tally are zero."
    },
    {
      "input": [
        2,
        2,
        [
          1,
          -1,
          3,
          2
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant codes should return -2.0 when the frequency tally has an entry less than zero."
    },
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 0.4727481649933377,
      "mutant_output": 0.4727481649933377,
      "explanation": "Both original and mutant codes should return the same result, which is a positive float, for a valid input."
    }
  ]
},{
  "mutant_program": "muta837_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 4.3563649173,
      "mutant_output": 4.3563649173,
      "explanation": "Both programs should output the same value since the mutant code only changes the way the frequency values are accessed, but not the logic itself."
    }
  ]
},{
  "mutant_program": "muta864_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 1.386123680162522,
      "mutant_output": 1.386123680162522,
      "explanation": "Both programs should produce the same output since the mutation only changed the way the input values are accessed."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8
        ]
      },
      "original_output": 4.787491652253566,
      "mutant_output": 4.787491652253566,
      "explanation": "Both programs should produce the same output since the mutation only changed the way the input values are accessed."
    }
  ]
},{
  "mutant_program": "muta869_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          2,
          3,
          1,
          4
        ]
      },
      "original_output": 4.67515,
      "mutant_output": 4.67515,
      "explanation": "Both original and mutant codes should compute the same information measure for a contingency table of size 2x2"
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          10,
          20,
          30,
          40,
          50,
          60,
          5,
          10,
          20
        ]
      },
      "original_output": 75.8194,
      "mutant_output": 75.8194,
      "explanation": "Both original and mutant codes should compute the same information measure for a contingency table of size 3x3"
    },
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          -1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant codes should detect invalid table entries and return -2.0"
    },
    {
      "input": {
        "r": 1,
        "c": 1,
        "f": [
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant codes should detect invalid tables without any recorded entries and return -1.0"
    }
  ]
},{
  "mutant_program": "muta871_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 28.87972425229552,
      "mutant_output": 28.87972425229552,
      "explanation": "Both original and mutant code compute Kullback's information measure for a 2-way contingency table in the exact same way and with no apparent modifications."
    },
    {
      "input": {
        "r": 1,
        "c": 1,
        "f": [
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant code handle the case when the entire table consists of 0 entries in the exact same way and with no apparent modifications."
    },
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          1,
          -2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant code handle the case when the table contains invalid entries (negative frequency) in the exact same way and with no apparent modifications."
    },
    {
      "input": {
        "r": 4,
        "c": 1,
        "f": [
          0,
          0,
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant code handle the case when the entire table consists of all zeros in the exact same way and with no apparent modifications."
    }
  ]
},{
  "mutant_program": "muta875_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 6.674098485797568,
      "mutant_output": 6.674098485797568,
      "explanation": "Both programs should produce the same output since the mutation only changes the way the frequency array is accessed."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          -2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs should produce the same output since the mutation only changes the way the frequency array is accessed."
    }
  ]
},{
  "mutant_program": "muta880_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "testdata/table1.txt"
      ],
      "original_output": "\n        2info =  6.68    df =  9    q = 0.6831\n",
      "mutant_output": "\n        2info =  6.68    df =  9    q = 1.0329\n",
      "explanation": "One mutation modified the QChiSq() calculation to be incorrect, resulting in a different output."
    },
    {
      "input": [
        "testdata/table2.txt"
      ],
      "original_output": "\n        2info = 30.15    df = 36    q = 0.7644\n",
      "mutant_output": "\n        2info = 30.15    df = 36    q = 1.0001\n",
      "explanation": "Same mutation as the previous test, resulting in a different output."
    },
    {
      "input": [
        "testdata/empty.txt"
      ],
      "original_output": "\n*** no information accumulated ***\n",
      "mutant_output": "\n*** no information accumulated ***\n",
      "explanation": "Both programs output the same message when given an empty file."
    }
  ]
},{
  "mutant_program": "muta883_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": "2 3\n1 2 3\n4 5 6\n",
      "original_output": "2info = 17.99\tdf = 2\tq = 0.0000\n\ntotal 2info = 17.99\tdf = 2\tq = 0.0000\n",
      "mutant_output": "2info = 17.99\tdf = 1\tq = 0.0000\n\ntotal 2info = 17.99\tdf = 1\tq = 0.0000\n",
      "explanation": "The mutant code changes the computation of the degrees of freedom used for chi-square calculation, which makes the outputs different. The input here describes a 2x3 contingency table, and both original program and mutant program give a result with information value = 17.99. However, the original program calculates the degree of freedom as (r-1)*(c-1) = 2, whereas the mutant program calculates it as (r-1)+(c-1) = 1+2 = 3. Therefore, the chi-square values returned are different as well. The original program computes q as 0.0000, while the mutant program gives the exact same q value. The total information and df are also different, but since the q values are same, we know that they are both significantly different from the null hypothesis."
    }
  ]
},{
  "mutant_program": "muta890_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 5.545177,
      "mutant_output": 5.545177,
      "explanation": "Both programs have the same logic and calculations, so the output must be equivalent."
    },
    {
      "input": {
        "r": 1,
        "c": 2,
        "f": [
          1,
          2
        ]
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs handle the case when r or c is less than 2, so the output must be equivalent."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          -2,
          3,
          4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs handle the case when an invalid frequency value (less than 0) is found, so the output must be equivalent."
    }
  ]
},{
  "mutant_program": "muta903_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta914_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 14.8886,
      "mutant_output": 14.8886,
      "explanation": "The mutant program only changes the way in which frequency tallies are accessed, using a slightly different formula. However, the resulting computations are identical, so both programs return the same output."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          0,
          5,
          0,
          2,
          -3,
          4,
          1,
          1,
          1
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "For this input table, all entries are either zero or negative, resulting in a statistic of -2.0 for both the original and the mutant program."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4,
          -1,
          0
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "For this input table, one entry is negative, resulting in a statistic of -2.0 for both the original and the mutant program."
    }
  ]
},{
  "mutant_program": "muta916_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 4.29126,
      "mutant_output": 4.29126,
      "explanation": "Both programs have the same output because the changes made didn't affect the logic or the computed values of the program."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          9,
          8,
          7,
          6,
          5,
          4,
          3,
          2,
          1
        ]
      },
      "original_output": 18.115541,
      "mutant_output": 18.115541,
      "explanation": "Both programs have the same output because the changes made didn't affect the logic or the computed values of the program."
    }
  ]
},{
  "mutant_program": "muta919_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta924_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        3,
        [
          5,
          8,
          4,
          2,
          1,
          9
        ]
      ],
      "original_output": 5.249599,
      "mutant_output": 5.249599,
      "explanation": "Both programs are equivalent in this particular test case."
    },
    {
      "input": [
        1,
        3,
        [
          5,
          8,
          4
        ]
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs are equivalent in this particular test case."
    },
    {
      "input": [
        2,
        2,
        [
          0,
          0,
          0,
          0
        ]
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs are equivalent in this particular test case."
    }
  ]
},{
  "mutant_program": "muta931_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          3,
          4,
          5,
          2,
          1,
          0
        ]
      },
      "original_output": 7.654304770678903,
      "mutant_output": 7.654304770678903,
      "explanation": "The mutant code only changes the way the frequency tallies are accessed, but it does not change the logic of the program. Both the original and the mutated code are equivalent and return the same output for the given test case."
    }
  ]
},{
  "mutant_program": "muta933_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta934_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        3,
        [
          1,
          2,
          3,
          4,
          5,
          6
        ],
        0
      ],
      "original_output": 6.216440931112148,
      "mutant_output": 6.216440931112148,
      "explanation": "Both original and mutant code should produce the same output."
    },
    {
      "input": [
        1,
        2,
        [
          1,
          2
        ],
        0
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both original and mutant code should produce the same output."
    },
    {
      "input": [
        3,
        5,
        [
          2,
          3,
          2,
          1,
          1,
          0,
          0,
          5,
          3,
          2,
          0,
          1,
          0,
          2,
          0
        ],
        0
      ],
      "original_output": 35.07017909160817,
      "mutant_output": 35.07017909160817,
      "explanation": "Both original and mutant code should produce the same output."
    }
  ]
},{
  "mutant_program": "muta953_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta1125_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta1127_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta1130_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 4.158883,
      "mutant_output": 4.158883,
      "explanation": "Both programs are equivalent since the mutant code only modifies the way the frequencies are accessed in the f array, maintaining the same calculations and outputs. The output is a double that represents the computed information measure."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          -2,
          3,
          4,
          5,
          6,
          7,
          8,
          -9
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs are equivalent since the mutant code only modifies the way the frequencies are accessed in the f array. In this case, the output is a special value (-2.0) indicating that there is an invalid table entry with a negative frequency value."
    }
  ]
},{
  "mutant_program": "muta1131_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 2.772588722239781,
      "mutant_output": 2.772588722239781,
      "explanation": "Both programs are equivalent"
    }
  ]
},{
  "mutant_program": "muta1133_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": -1,
      "mutant_output": -2,
      "explanation": "The original program returns -1 when the entire table consisted of 0 entries, while the mutant program returns -2 when there is an invalid table entry. In this case, the input table contains no zeros, so the original program returns -1 while the mutant program returns -2."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          -2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": -2,
      "mutant_output": -2,
      "explanation": "Both programs correctly identify an invalid table entry as -2. In this test case, the second frequency in the input table is negative, causing both programs to return -2."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.68,
      "mutant_output": 3.68,
      "explanation": "In this test case, both programs correctly compute the information measure for the input table and return the same result."
    }
  ]
},{
  "mutant_program": "muta1134_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 2.772589,
      "mutant_output": 2.772589,
      "explanation": "Both the original and the mutant program are equivalent. The test demonstrates processing a 2x2 table."
    }
  ]
},{
  "mutant_program": "muta1136_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        [
          2,
          2,
          2,
          2
        ],
        [
          2,
          2,
          2,
          2
        ],
        [
          2,
          2,
          2,
          2
        ]
      ],
      "original_output": 24.0,
      "mutant_output": 24.0,
      "explanation": "The mutant and original program both take as input a 3x4 matrix with every value being 2. This is a special test case that has been chosen because it causes the calculation N*log(N) (where N=24) to be included in the final result of both programs. As the mutant code only modifies the way the elements of the frequency array are accessed in the 'InfoTbl' function and not the way any calculations are performed, the expected outputs of both programs are equivalent."
    }
  ]
},{
  "mutant_program": "muta1139_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": "input_file_1.txt",
      "original_output": "2info = 9.38\tdf = 2\tq = 0.0089\ntotal 2info = 9.38\tdf = 2\tq = 0.0089\n",
      "mutant_output": "2info = 9.28\tdf = 2\tq = 0.0092\ntotal 2info = 9.28\tdf = 2\tq = 0.0092\n",
      "explanation": "The mutant program changes the calculation of the information measure in the infoTbl function, producing slightly different results. This can be seen in the output, where the 2info values are different after the decimal point, as well as the q values. However, the results still seem reasonable and the programs are mostly equivalent."
    },
    {
      "input": "input_file_2.txt",
      "original_output": "total 2info = 0.00\tdf = 4\tq = 1.0000\n",
      "mutant_output": "total 2info = -1.00\tdf = 4\tq = 1.0000\n",
      "explanation": "The mutant program changes the line where the total 2info is printed, making it negative in certain cases. This happens when all entries in the table are zero, which is an invalid case, but also when there is a negative frequency in the table, which is also invalid. This causes the total 2info to be negative, which is incorrect and different from the original program output. Thus, the mutant is not equivalent to the original program."
    }
  ]
},{
  "mutant_program": "muta1140_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "-",
        "2",
        "arg1",
        "arg2"
      ],
      "original_output": "2info = 0.00\tdf = 0\tq = 1.0000\n\n*** no information accumulated ***\n",
      "mutant_output": "* invalid row/column line *\n",
      "explanation": "The mutant code has modified the argument format, expecting exactly three arguments instead of two or three. Therefore, the first test case fails due to an invalid format, causing the program to return an error message."
    },
    {
      "input": [
        "-",
        "2"
      ],
      "original_output": "* EOF in table *\n",
      "mutant_output": "* invalid row/column line *\n",
      "explanation": "The second test case is expected to fail, as there is no input data when the program is executed. The mutant code errors out with an invalid row/column line instead of correctly returning an error message for an empty file."
    },
    {
      "input": [
        "tables.txt"
      ],
      "original_output": "\n*** no information accumulated ***\n",
      "mutant_output": "* invalid row/column line *\n",
      "explanation": "The third test case is expected to fail, as the file tables.txt does not exist. The mutant code again behaves incorrectly and produces an error message for an invalid row/column line instead of returning an error message for a missing file."
    }
  ]
},{
  "mutant_program": "muta1148_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta1154_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta1160_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 5.037081772016022,
      "mutant_output": 5.037081772016022,
      "explanation": "Both original and mutant code seems to be equivalent for this test case"
    }
  ]
},{
  "mutant_program": "muta1163_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 4.158883,
      "mutant_output": 4.158883,
      "explanation": "Both original and mutant code should output the same information measure given the same table input with positive frequencies"
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          -2,
          3,
          4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant code should output -2.0 given a table with negative frequency"
    },
    {
      "input": {
        "r": 1,
        "c": 5,
        "f": [
          0,
          0,
          0,
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant code should output -1.0 given an empty table (all frequencies are zero)"
    }
  ]
},{
  "mutant_program": "muta1164_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 6.957276699573697,
      "mutant_output": 6.957276699573697,
      "explanation": "Both programs have the same output for this test case, indicating that the mutant is equivalent to the original."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          -4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs have the same output for this test case, indicating that the mutant is equivalent to the original."
    },
    {
      "input": {
        "r": 1,
        "c": 2,
        "f": [
          0,
          1
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs have the same output for this test case, indicating that the mutant is equivalent to the original."
    }
  ]
},{
  "mutant_program": "muta1166_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta1178_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 6.98493,
      "mutant_output": 6.98493,
      "explanation": "Both original and mutant code return the same expected output for the given input. Therefore, they are equivalent."
    }
  ]
},{
  "mutant_program": "muta1181_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 6.528298840615964,
      "mutant_output": 6.528298840615964,
      "explanation": "Both programs should output the same value with the provided test. The mutant code only changes the indexing of the f array but the logic is preserved."
    },
    {
      "input": {
        "r": 0,
        "c": 5,
        "f": [
          0,
          0,
          0,
          0,
          0
        ]
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs should output -3.0, which indicates invalid table dimensions, for this test case where there are no rows."
    },
    {
      "input": {
        "r": 1,
        "c": 1,
        "f": [
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs should output -1.0, which indicates all zero entries, for this test case where there is only one zero entry in the table."
    }
  ]
},{
  "mutant_program": "muta1182_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 6.79512103279981,
      "mutant_output": 6.79512103279981,
      "explanation": "The mutant code has only made changes in variable declarations and access to the f frequency matrix. However, it does not affect the result of InfoTbl function."
    }
  ]
},{
  "mutant_program": "muta1184_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 0.6666666666,
      "mutant_output": 0.6666666666,
      "explanation": "The mutated code only changes the way the 'f' array is accessed, but it does not affect the final result."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "The input table has no information, as all the entries are zero. The output is the same for both the original and the mutant code."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          -2,
          3,
          4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The input table has an invalid entry (-2). The output is the same for both the original and the mutant code."
    }
  ]
},{
  "mutant_program": "muta1187_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.4657,
      "mutant_output": 3.4657,
      "explanation": "Both original and mutant code should output the same value for this input."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          5,
          -2,
          8,
          4,
          0,
          1,
          3,
          2,
          7
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant code should output the same value for this input because the mutant only changes the way data is accessed"
    }
  ]
},{
  "mutant_program": "muta1188_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          2,
          1,
          1,
          2
        ]
      },
      "original_output": 0.4801464337442942,
      "mutant_output": 0.4801464337442942,
      "explanation": "The mutant code only changes the way the frequency tallies are accessed, but the computation of the information measure is the same as in the original program, leading to equivalent results."
    },
    {
      "input": {
        "r": 3,
        "c": 4,
        "f": [
          4,
          2,
          0,
          1,
          3,
          2,
          1,
          1,
          2,
          1,
          1,
          1
        ]
      },
      "original_output": 1.8149193751293027,
      "mutant_output": 1.8149193751293027,
      "explanation": "The mutant code and the original program compute the information measure in the same way, and outputs are equivalent."
    }
  ]
},{
  "mutant_program": "muta1190_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.688879454113936,
      "mutant_output": 3.688879454113936,
      "explanation": "Both programs are equivalent."
    }
  ]
},{
  "mutant_program": "muta1193_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 11.931595,
      "mutant_output": 11.931595,
      "explanation": "Both programs have the exact same code, thus they are equivalent."
    }
  ]
},{
  "mutant_program": "muta1194_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta1195_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 4.46725,
      "mutant_output": 4.46725,
      "explanation": "Both programs produce the same output with the same input values."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8
        ]
      },
      "original_output": 12.304,
      "mutant_output": 12.304,
      "explanation": "Both programs produce the same output with the same input values."
    },
    {
      "input": {
        "r": 1,
        "c": 1,
        "f": [
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs produce the same output with the same input values."
    }
  ]
},{
  "mutant_program": "muta1197_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        3,
        3,
        [
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1
        ],
        0
      ],
      "original_output": 5.545177444479562,
      "mutant_output": 5.545177444479562,
      "explanation": "Both programs are equivalent since the mutant code only changes the way the frequency array is accessed, but the values accessed are the same as the original program."
    },
    {
      "input": [
        2,
        2,
        [
          2,
          0,
          0,
          2
        ],
        0
      ],
      "original_output": 2.772588722239781,
      "mutant_output": 2.772588722239781,
      "explanation": "Both programs are equivalent since the mutant code only changes the way the frequency array is accessed, but the values accessed are the same as the original program."
    },
    {
      "input": [
        4,
        3,
        [
          7,
          3,
          5,
          3,
          2,
          5,
          9,
          6,
          4,
          1,
          3,
          2,
          0,
          3,
          2,
          4
        ],
        0
      ],
      "original_output": 21.93773118202674,
      "mutant_output": 21.93773118202674,
      "explanation": "Both programs are equivalent since the mutant code only changes the way the frequency array is accessed, but the values accessed are the same as the original program."
    }
  ]
},{
  "mutant_program": "muta1198_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          1,
          0,
          2,
          3,
          4,
          5
        ]
      },
      "original_output": 10.1225,
      "mutant_output": 10.1225,
      "explanation": "Both original and mutant code compute the Kullback's information measure for the given 2-way contingency table and return the same result for the provided input. Therefore, they are equivalent."
    }
  ]
},{
  "mutant_program": "muta1200_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta1201_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.178054,
      "mutant_output": 3.178054,
      "explanation": "The mutant code only changes the way the array f is accessed, but it is still computing the same information measure with the same inputs, thus producing the same output."
    }
  ]
},{
  "mutant_program": "muta1203_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 7.192934,
      "mutant_output": 7.192934,
      "explanation": "The mutant code only changes the way variables are accessed, but the logic remains the same, resulting in equivalent outputs."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          0,
          1,
          -1,
          2,
          3,
          -2,
          4,
          5,
          -3
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The invalid table entry (-1) in the input will cause the code to return -2.0 (invalid table entry) in both original and mutant programs."
    }
  ]
},{
  "mutant_program": "muta1205_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta1208_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 22.266922,
      "mutant_output": 22.266922,
      "explanation": "Both programs are equivalent because the mutant code just removes some comments and changes the way of accessing the elements of the matrix, but the logic is still the same. The test input is a 3x3 matrix where each element is just 1 more than its left and upper neighbour. The expected output is the same value of 22.266922, which represents the Kullback's information measure for that matrix."
    }
  ]
},{
  "mutant_program": "muta1209_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          2,
          1,
          1,
          0
        ]
      },
      "original_output": 0.143841,
      "mutant_output": 0.143637,
      "explanation": "The mutant changes the way the frequency tallies are accessed, instead of using a convenient way to access freqs, it uses direct indexing. This results in a very small difference in the output, indicating that the mutant altered the way the function works."
    },
    {
      "input": {
        "r": 3,
        "c": 4,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12
        ]
      },
      "original_output": 48.369846,
      "mutant_output": 96.837474,
      "explanation": "The mutant changes the way the information measure is calculated, by multiplying the result by 2 in the end. This results in a much greater difference in the output, indicating that the mutant is not behaving as expected."
    }
  ]
},{
  "mutant_program": "muta1211_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          1,
          2
        ]
      },
      "original_output": 0.41381685030363385,
      "mutant_output": 0.41381685030363385,
      "explanation": "Both programs compute the same information measure for this valid input without any abnormal behavior."
    },
    {
      "input": {
        "r": 1,
        "c": 1,
        "f": [
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs return -1 for an empty table."
    },
    {
      "input": {
        "r": 0,
        "c": 2,
        "f": []
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs return -3 for an invalid table dimension."
    }
  ]
},{
  "mutant_program": "muta1212_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          2,
          1,
          1,
          0
        ]
      },
      "original_output": 1.306853,
      "mutant_output": 1.306853,
      "explanation": "Both programs should output the same value for this input"
    },
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          2,
          1,
          1,
          3,
          0,
          -1
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs should output the same value for this input"
    },
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          2,
          -1,
          1,
          3,
          0,
          1
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs should output the same value for this input"
    }
  ]
},{
  "mutant_program": "muta1214_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta1217_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 2.772588722239781,
      "mutant_output": 2.772588722239781,
      "explanation": "The mutant code and the original code have the same logic and produce the same output when tested with the given input."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          0,
          1,
          2,
          1,
          2,
          3,
          2,
          3,
          4
        ]
      },
      "original_output": -4.0,
      "mutant_output": -4.0,
      "explanation": "The mutant code and the original code have the same logic and produce the same output when tested with the given input."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          3,
          2,
          -1,
          4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The mutant code and the original code have the same logic and produce the same output when tested with the given input."
    }
  ]
},{
  "mutant_program": "muta1218_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 10.7962771084,
      "mutant_output": 10.7962771084,
      "explanation": "Both original and mutant code are equivalent and return the same output for the given input."
    }
  ]
},{
  "mutant_program": "muta1304_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta1416_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.8918202981,
      "mutant_output": 3.8918202981,
      "explanation": "Both original and mutant code return the same output for the given input. Test passed."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8
        ]
      },
      "original_output": 9.709167167,
      "mutant_output": 9.709167167,
      "explanation": "Both original and mutant code return the same output for the given input. Test passed."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          -2,
          3,
          4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant code return the same output for the given input. Test passed."
    }
  ]
},{
  "mutant_program": "muta1423_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ]
      ],
      "original_output": 2.772588722239781,
      "mutant_output": 3.4657359027997265,
      "explanation": "The original program uses x(i,j) to access the frequency tallies, while the mutant code uses f[(i)*c+(j)]. This changes the way the program accesses and processes the frequency data. The provided test case results in different outputs due to this change."
    },
    {
      "input": [
        3,
        3,
        [
          2,
          3,
          0,
          1,
          2,
          3,
          0,
          2,
          1
        ]
      ],
      "original_output": 5.02335797193684,
      "mutant_output": 4.649382797925446,
      "explanation": "The original program uses x(i,j) to access the frequency tallies, while the mutant code uses f[(i)*c+(j)]. This changes the way the program accesses and processes the frequency data. The provided test case results in different outputs due to this change."
    }
  ]
},{
  "mutant_program": "muta1478_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 2.772588722239781,
      "mutant_output": 2.772588722239781,
      "explanation": "The mutant code and original code are equivalent because the changes made only include minor formatting changes, renaming of variables, and changing the way to access the elements of the frequency array, but the logic of the program remains the same. The test case has a 2x2 contingency table with frequencies [1,2,3,4] that results in an information measure of 2.772588722239781."
    },
    {
      "input": [
        2,
        1,
        [
          1,
          2
        ],
        0
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "The mutant code and original code are equivalent. The test case has a 2x1 contingency table with frequencies [1,2] which is an invalid table and results in -3.0 for both the original and mutant code."
    },
    {
      "input": [
        2,
        2,
        [
          0,
          0,
          0,
          0
        ],
        0
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "The mutant code and original code are equivalent. The test case has a 2x2 contingency table with frequencies [0,0,0,0] which is an all zero table and results in -1.0 for both the original and mutant code."
    }
  ]
},{
  "mutant_program": "muta1479_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 0.5493,
      "mutant_output": 0.5493,
      "explanation": "Both programs should output the same result for this input, which is a 2x2 contingency table."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs should output the same result for this input, which is a 3x3 contingency table with all entries set to 0."
    },
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          1,
          2,
          -1,
          3,
          4,
          5
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs should output the same result for this input, which is a 2x3 contingency table with one entry set to -1."
    }
  ]
},{
  "mutant_program": "muta1481_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta1482_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta1518_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          0,
          5
        ]
      },
      "original_output": 6.15123,
      "mutant_output": -2.0,
      "explanation": "The input table has a frequency less than 0, which is handled by the original program but not by the mutant program."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 52.63685,
      "mutant_output": -3.0,
      "explanation": "The input table has dimensions that are too small (less than 2) which is handled by the original program but not by the mutant program."
    }
  ]
},{
  "mutant_program": "muta1519_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        {}
      ],
      "original_output": 2.772588722239781,
      "mutant_output": 2.772588722239781,
      "explanation": "Both programs should output the same information measure for this 2x2 contingency table."
    },
    {
      "input": [
        2,
        3,
        [
          2,
          4,
          7,
          1,
          3,
          5
        ],
        {}
      ],
      "original_output": 5.703266770178476,
      "mutant_output": 5.703266770178476,
      "explanation": "Both programs should output the same information measure for this 2x3 contingency table."
    },
    {
      "input": [
        3,
        3,
        [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        {}
      ],
      "original_output": 11.57147835148705,
      "mutant_output": 11.57147835148705,
      "explanation": "Both programs should output the same information measure for this 3x3 contingency table."
    }
  ]
},{
  "mutant_program": "muta1522_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          100,
          200,
          300,
          400
        ]
      },
      "original_output": 2139.3559074,
      "mutant_output": 2139.3559074,
      "explanation": "The mutant code only changes the way the frequencies are accessed, but it doesn't affect the logic of the function, so it produces the same result as the original code."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          2,
          -1,
          4,
          6,
          0,
          8,
          1,
          3,
          2
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The input table has a negative frequency, which is an invalid input that produces the same result in both versions of the code."
    },
    {
      "input": {
        "r": 1,
        "c": 1,
        "f": [
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "The input table has all zeros, which is an invalid input that produces the same result in both versions of the code."
    }
  ]
},{
  "mutant_program": "muta1523_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          125,
          175,
          150,
          50
        ]
      },
      "original_output": -277.6297440653974,
      "mutant_output": -277.6297440653974,
      "explanation": "Both programs should produce the same output since the mutant only has changes in the way 'f' is accessed."
    },
    {
      "input": {
        "r": 4,
        "c": 3,
        "f": [
          125,
          175,
          0,
          0,
          150,
          0,
          50,
          0,
          0,
          0,
          0,
          0
        ]
      },
      "original_output": -85.2514757618813,
      "mutant_output": -85.2514757618813,
      "explanation": "Both programs should produce the same output since the mutant only has changes in the way 'f' is accessed."
    }
  ]
},{
  "mutant_program": "muta1530_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 14.97536,
      "mutant_output": 14.97536,
      "explanation": "Both programs should produce the same output."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": -3,
      "mutant_output": -3,
      "explanation": "Both programs should produce the same output."
    },
    {
      "input": {
        "r": 0,
        "c": 2,
        "f": []
      },
      "original_output": -3,
      "mutant_output": -3,
      "explanation": "Both programs should produce the same output."
    }
  ]
},{
  "mutant_program": "muta1565_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          2,
          3,
          1,
          4
        ]
      },
      "original_output": 1.578235,
      "mutant_output": 1.578235,
      "explanation": "The mutant code only changes the way the frequency f(i,j) is accessed through the x(i,j) macro, but the final computation of the information measure is identical to the original program code."
    }
  ]
},{
  "mutant_program": "muta1863_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta1867_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 2.614011,
      "mutant_output": 2.614011,
      "explanation": "Both programs perform the Kullback's information measure for a 2-way contingency table and output the same result for the given input"
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8
        ]
      },
      "original_output": 10.797219,
      "mutant_output": 10.797219,
      "explanation": "Both programs perform the Kullback's information measure for a 2-way contingency table and output the same result for the given input"
    }
  ]
},{
  "mutant_program": "muta1869_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 6.01958,
      "mutant_output": 6.01958,
      "explanation": "Both programs produce the same output for this input."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          -4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs produce the same output for this input."
    },
    {
      "input": {
        "r": 0,
        "c": 4,
        "f": []
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs produce the same output for this input."
    }
  ]
},{
  "mutant_program": "muta1874_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.614457,
      "mutant_output": 3.614457,
      "explanation": "Both programs should output the same value for a valid input."
    },
    {
      "input": {
        "r": 1,
        "c": 2,
        "f": [
          1,
          2
        ]
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs should output the same value for an invalid input."
    }
  ]
},{
  "mutant_program": "muta1879_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 5.54517,
      "mutant_output": 5.54517,
      "explanation": "The mutant code just changed the way of accessing the f values, but the logic and the calculations were kept intact. Therefore, both programs are equivalent and produce the same output."
    }
  ]
},{
  "mutant_program": "muta1917_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 4.1588830833596715,
      "mutant_output": 4.1588830833596715,
      "explanation": "Both programs should provide the same result for the given input, indicating equivalence."
    },
    {
      "input": {
        "r": 0,
        "c": 0,
        "f": []
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs should detect no information in an empty table and provide the invalid value of -1.0."
    },
    {
      "input": {
        "r": 1,
        "c": 1,
        "f": [
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs should detect no information in a table with 0 entries and provide the invalid value of -1.0."
    }
  ]
},{
  "mutant_program": "muta1923_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 5.545177444479568,
      "mutant_output": 5.545177444479568,
      "explanation": "Both programs should output the same result since the only change is in the way the f array is accessed"
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 15.973106163387254,
      "mutant_output": 15.973106163387254,
      "explanation": "Both programs should output the same result since the only change is in the way the f array is accessed"
    },
    {
      "input": {
        "r": 1,
        "c": 1,
        "f": [
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs should output the same result because the input f array is all zeroes, resulting in an information measure of -1.0"
    },
    {
      "input": {
        "r": 0,
        "c": 0,
        "f": []
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs should output the same result because the input dimensions are smaller than 2, resulting in an information measure of -3.0"
    }
  ]
},{
  "mutant_program": "muta1934_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 2.772588722239781,
      "mutant_output": 2.772588722239781,
      "explanation": "Both versions should produce the same output since this is a direct mutation. The test input is a 2x2 table with values [1, 2; 3, 4]. The output should be 2.772588722239781."
    },
    {
      "input": {
        "r": 3,
        "c": 4,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12
        ]
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both versions should produce the same output since this is a direct mutation. The test input is a 3x4 table with values [1, 2, 3, 4; 5, 6, 7, 8; 9, 10, 11, 12]. The output should be -3.0 since all dimensions of the table are less than 2."
    }
  ]
},{
  "mutant_program": "muta1937_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta1972_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 33.88153000151131,
      "mutant_output": 33.88153000151131,
      "explanation": "Both the original and the mutant program produce the same output for this test case, indicating that the mutation did not affect the behavior of the program."
    }
  ]
},{
  "mutant_program": "muta1974_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          1,
          1,
          1
        ],
        0
      ],
      "original_output": -4.0,
      "mutant_output": -4.0,
      "explanation": "Both original and mutant program should output -4.0 since both can allocate enough working storage"
    },
    {
      "input": [
        3,
        3,
        [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        0
      ],
      "original_output": 8.976,
      "mutant_output": 7.971,
      "explanation": "For this input, the original program outputs 8.976 and the mutant program outputs 7.971. The difference in output is due to the change in how the f array is accessed to retrieve elements. In mutant code, the program accesses the element by indexing into the f array with f[(i)*c+(j)] while the original program accesses the element using x(i,j), which essentially does the same thing. This test reveals that the mutant program introduces a functional change that produces different results than the original program"
    }
  ]
},{
  "mutant_program": "muta1975_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          4,
          6,
          7,
          3
        ]
      },
      "original_output": 5.476898683949088,
      "mutant_output": 5.476898683949088,
      "explanation": "Both mutant and original code are equivalent for a small input (2x2)."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          4,
          6,
          7,
          3,
          8,
          4,
          2,
          9,
          6
        ]
      },
      "original_output": 23.75842627328286,
      "mutant_output": 23.75842627328286,
      "explanation": "Both mutant and original code are equivalent for a medium input (3x3)."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          -1,
          6,
          7,
          3
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both mutant and original code are equivalent for a small input with an invalid table entry."
    }
  ]
},{
  "mutant_program": "muta1977_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 7.356288941780264,
      "mutant_output": 7.356288941780264,
      "explanation": "Both programs perform the same operation and should produce the same output."
    }
  ]
},{
  "mutant_program": "muta1978_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        "[       2,       2,       {0, 1, 1, 0},       &pdf     ]"
      ],
      "original_output": 1.3862943611198906,
      "mutant_output": 1.3862943611198906,
      "explanation": "Both original and mutant code have the same output for the given input."
    },
    {
      "input": [
        "[       2,       1,       {1, 0},       &pdf     ]"
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both original and mutant code have the same output for the given input."
    },
    {
      "input": [
        "[       2,       2,       {1, -1, 1, 0},       &pdf     ]"
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant code have the same output for the given input."
    }
  ]
},{
  "mutant_program": "muta1980_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 28.117424,
      "mutant_output": 28.117424,
      "explanation": "The mutant code only changes the way the frequency tallies are accessed, but it does not affect the computation of the information measure. Therefore, it is equivalent to the original program and produces the same output for the given test case."
    }
  ]
},{
  "mutant_program": "muta1982_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 5.545177444479561,
      "mutant_output": 5.545177444479561,
      "explanation": "The mutant code changes the way frequency tallies are accessed, but the computation of the information measure is still the same, resulting in equivalent outputs."
    }
  ]
},{
  "mutant_program": "muta1985_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 4.158883083,
      "mutant_output": 4.158883083,
      "explanation": "Both programs are equivalent for this input, and provide the correct output"
    },
    {
      "input": [
        2,
        2,
        [
          0,
          1,
          2,
          3
        ],
        0
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs are equivalent for this input, and provide the correct output"
    },
    {
      "input": [
        3,
        3,
        [
          1,
          2,
          3,
          4,
          5,
          -6,
          7,
          8,
          9
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs are equivalent for this input, and provide the correct output"
    },
    {
      "input": [
        1,
        2,
        [
          1,
          2
        ],
        0
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs are equivalent for this input, and provide the correct output"
    },
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 4.158883083,
      "mutant_output": 4.158883083,
      "explanation": "Both programs are equivalent for this input, and provide the correct output"
    }
  ]
},{
  "mutant_program": "muta1988_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta1989_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 5.5451774444795,
      "mutant_output": 5.5451774444795,
      "explanation": "Both the original and the mutant program have provided the same output, which means that the mutation of the code did not affect the functionality of the program."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          -2,
          4,
          5
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both the original and the mutant program have provided the same output, which means that the mutation of the code did not affect the functionality of the program."
    },
    {
      "input": {
        "r": 0,
        "c": 5,
        "f": []
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both the original and the mutant program have provided the same output, which means that the mutation of the code did not affect the functionality of the program."
    }
  ]
},{
  "mutant_program": "muta1991_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.68968,
      "mutant_output": -3.0,
      "explanation": "The original program computes the Kullback's information measure for a 2-way contingency table, while the mutant swaps the way the frequency tallies are accessed, changing the order of rows and columns. This can lead to incorrect results or errors. In this test case, the original program computes the information measure as 3.68968, while the mutant returns -3.0 since it detects that the table has less than 2 rows or columns."
    }
  ]
},{
  "mutant_program": "muta1994_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 3.1761,
      "mutant_output": 3.1761,
      "explanation": "Both original and mutant program output the same value for this input, indicating equivalence."
    },
    {
      "input": [
        3,
        3,
        [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        0
      ],
      "original_output": 7.9721,
      "mutant_output": 7.9721,
      "explanation": "Both original and mutant program output the same value for this input, indicating equivalence."
    },
    {
      "input": [
        2,
        2,
        [
          0,
          0,
          0,
          0
        ],
        0
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant program output the same value for this input, indicating equivalence."
    }
  ]
},{
  "mutant_program": "muta1998_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          4,
          2,
          1,
          3
        ]
      },
      "original_output": 4.075195,
      "mutant_output": 4.075195,
      "explanation": "The mutant code maintains the exact same logic as the original code, with only changes to the array indexing format, which does not affect the output. Therefore, the mutant code is equivalent to the original code."
    }
  ]
},{
  "mutant_program": "muta2001_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 1.309373497390558,
      "mutant_output": 1.309373497390558,
      "explanation": "Both outputs are the same because the mutant code only changes the way the frequency tally is accessed in the x(i,j) array, but the values accessed are the same as in the original program."
    }
  ]
},{
  "mutant_program": "muta2003_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta2004_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.33058,
      "mutant_output": 3.33058,
      "explanation": "Both outputs should be equivalent since the mutant code only changes the way the freq values are accessed (using the (i)*c+(j) indexer instead of x(i,j))."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          4,
          2,
          3,
          1,
          5,
          0,
          2,
          3,
          3
        ]
      },
      "original_output": 7.93782,
      "mutant_output": 7.93782,
      "explanation": "Both outputs should be equivalent since the mutant code only changes the way the freq values are accessed (using the (i)*c+(j) indexer instead of x(i,j))."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          -1,
          2,
          3,
          4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both outputs should be equivalent since the mutant code only changes the way the freq values are accessed (using the (i)*c+(j) indexer instead of x(i,j))."
    }
  ]
},{
  "mutant_program": "muta2113_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta2114_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta2137_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 4.336656,
      "mutant_output": 4.336656,
      "explanation": "Both original and mutant codes compute the Kullback's information measure for a 2-way contingency table and they provide the same output when run with the same inputs."
    }
  ]
},{
  "mutant_program": "muta2148_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 4.094362541418785,
      "mutant_output": 4.094362541418785,
      "explanation": "The mutant code has only changed the way the frequency tallies are accessed, but it does not affect the computation of the information measure."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          -4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The test case has invalid table entries, which makes both the original and the mutant code return -2.0."
    },
    {
      "input": {
        "r": 1,
        "c": 2,
        "f": [
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "The test case has all zero entries, which makes both the original and the mutant code return -1.0."
    }
  ]
},{
  "mutant_program": "muta2164_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 2.009756,
      "mutant_output": 2.009756,
      "explanation": "Both programs compute the Kullback's information measure correctly for the given input."
    }
  ]
},{
  "mutant_program": "muta2165_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta2166_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          2,
          2,
          2,
          2
        ]
      },
      "original_output": 2.772588722239781,
      "mutant_output": 2.772588722239781,
      "explanation": "Both original and mutant program use the same logic to calculate Kullback's information measure for a 2-way contingency table, and were tested with the same input which provides the same result. Therefore, they are equivalent"
    }
  ]
},{
  "mutant_program": "muta2167_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 6.672040252972283,
      "mutant_output": 6.672040252972283,
      "explanation": "Both original and mutant code are equivalent"
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          0,
          2,
          2,
          0,
          4,
          4,
          0,
          3,
          3
        ]
      },
      "original_output": 8.171442848080199,
      "mutant_output": 8.171442848080199,
      "explanation": "Both original and mutant code are equivalent"
    },
    {
      "input": {
        "r": 1,
        "c": 4,
        "f": [
          0,
          0,
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant code are equivalent"
    }
  ]
},{
  "mutant_program": "muta2168_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 5.1926958442,
      "mutant_output": 5.1926958442,
      "explanation": "The mutant code only changes the way the frequency tallies are accessed, but the computation of the information measure remains the same, resulting in equivalent outputs."
    }
  ]
},{
  "mutant_program": "muta2169_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 19.857979,
      "mutant_output": 19.857979,
      "explanation": "The mutant code only changes the way to access the frequencies of the contingency table, using pointer arithmetic instead of a helper macro, but the output remains the same. The test case uses a simple 3x3 table with consecutive integers as frequencies."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          0,
          1,
          2,
          -3
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "In this case, the contingency table has negative frequencies, so the statistic must return a special value (-2.0 in particular). Both the original and the mutant code outputs are the same for this test case, indicating that they are equivalent."
    },
    {
      "input": {
        "r": 4,
        "c": 2,
        "f": [
          1,
          2,
          -3,
          4,
          5,
          -6,
          7,
          8,
          9,
          10,
          -11,
          12
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Negative frequency problem again, with a slightly larger table. This time both programs return the same special value, so they are equivalent for this case."
    }
  ]
},{
  "mutant_program": "muta2173_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        6
      ],
      "original_output": 1.791759,
      "mutant_output": -1.0,
      "explanation": "The mutant code has changed the way N, xi, and xj are calculated, leading to incorrect information measure calculation for any table where the sum of all frequencies is zero. This is not an equivalent mutant."
    },
    {
      "input": [
        2,
        2,
        [
          1,
          0,
          0,
          1
        ],
        2
      ],
      "original_output": 0.0,
      "mutant_output": 0.0,
      "explanation": "The mutant code has not changed the result of the function in this case. It is an equivalent mutant."
    },
    {
      "input": [
        6,
        2,
        [
          2,
          3,
          1,
          4,
          9,
          5,
          7,
          2,
          8,
          1,
          6,
          6,
          7,
          5,
          4,
          3,
          2
        ],
        5
      ],
      "original_output": 36.648163,
      "mutant_output": 36.648163,
      "explanation": "The mutant code has not changed the result of the function in this case. It is an equivalent mutant."
    }
  ]
},{
  "mutant_program": "muta2174_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta2175_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          10,
          20,
          30,
          40,
          50,
          60,
          70,
          80,
          90
        ]
      },
      "original_output": 248.496,
      "mutant_output": 248.496,
      "explanation": "The mutant code has only changed the way of accessing the element in the f array"
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          -10,
          20,
          30,
          40
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The test has negative frequency in one of its cells, which returns a special value."
    },
    {
      "input": {
        "r": 1,
        "c": 2,
        "f": [
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "The test has all 0 frequencies, which returns a special value."
    }
  ]
},{
  "mutant_program": "muta2176_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta2177_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta2178_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        3,
        [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      ],
      "original_output": 4.277624,
      "mutant_output": 4.277624,
      "explanation": "Both original and mutant codes should be equivalent as the mutant only changes the way indexes are calculated to access elements of the 2D array. Therefore, the output of both original and mutant codes should be the same for the given test input, which represents a 2x3 table with entries [1,2,3] in the first row and [4,5,6] in the second row."
    }
  ]
},{
  "mutant_program": "muta2180_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta2181_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs will output -1.0 because in this test case the table is all zeros."
    },
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          6,
          7,
          2,
          4,
          0,
          8
        ]
      },
      "original_output": 70.757815,
      "mutant_output": 70.757815,
      "explanation": "Both programs will output 70.757815, which is the Kullback's information measure, the same value for this example test case."
    },
    {
      "input": {
        "r": 1,
        "c": 2,
        "f": [
          5,
          -1
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs will output -2.0 because the table has a negative frequency value."
    }
  ]
},{
  "mutant_program": "muta2223_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 2.772588722239781,
      "mutant_output": 2.772588722239781,
      "explanation": "Both programs produce the same output for a valid input."
    },
    {
      "input": [
        1,
        2,
        [
          1,
          2
        ],
        0
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs produce the same output for invalid input (less than 2 rows or columns)."
    },
    {
      "input": [
        2,
        2,
        [
          -1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs produce the same output for invalid input (negative frequency)."
    },
    {
      "input": [
        2,
        2,
        [
          0,
          0,
          0,
          0
        ],
        0
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs produce the same output for invalid input (all frequencies are 0)."
    },
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 2.772588722239781,
      "mutant_output": 2.772588722239781,
      "explanation": "Both programs produce the same output for a valid input."
    }
  ]
},{
  "mutant_program": "muta2224_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 17.4787,
      "mutant_output": 17.4787,
      "explanation": "Both programs should calculate the Kullback's information measure for the input table. The test case provides the same input for both programs."
    },
    {
      "input": {
        "r": 2,
        "c": 4,
        "f": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs should return -1.0 since the entire table consisted of 0 entries. The test case provides the same input for both programs."
    },
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          1,
          -2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs should return -2.0 since there is an invalid table entry (negative frequency). The test case provides the same input for both programs."
    }
  ]
},{
  "mutant_program": "muta2226_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 4.003,
      "mutant_output": 4.003,
      "explanation": "The mutant code just modifies the way to access the frequency tallies in the input array. However, this modification does not change the logic of the program, and thus, the output remains the same."
    },
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          1,
          0,
          2,
          4,
          3,
          1
        ]
      },
      "original_output": 6.685,
      "mutant_output": 6.685,
      "explanation": "The same as the previous test, the mutant code just modifies the way to access the frequency tallies in the input array."
    }
  ]
},{
  "mutant_program": "muta2227_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          2,
          2,
          2,
          2
        ]
      },
      "original_output": 2.772588722237932,
      "mutant_output": 2.772588722237932,
      "explanation": "The mutant code uses a different way to access the frequency tallies, but the resulting computation is equivalent to the original code."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 18.599503211301553,
      "mutant_output": 18.599503211301553,
      "explanation": "The mutant code uses a different way to access the frequency tallies, but the resulting computation is equivalent to the original code."
    }
  ]
},{
  "mutant_program": "muta2230_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 0.960961,
      "mutant_output": 0.960961,
      "explanation": "Both programs will output the same value since the mutant only changed the way the frequency tallies were accessed."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          5,
          3,
          2,
          1,
          8,
          4,
          7,
          5,
          10
        ]
      },
      "original_output": 16.0983,
      "mutant_output": 16.0983,
      "explanation": "Both programs will output the same value since the mutant only changed the way the frequency tallies were accessed."
    }
  ]
},{
  "mutant_program": "muta2231_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          0,
          0,
          0,
          1,
          1,
          1,
          0,
          0
        ]
      },
      "original_output": 6.941767147,
      "mutant_output": 6.941767147,
      "explanation": "Both original and mutant codes are equivalent for this test case"
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 8.525741,
      "mutant_output": 8.525741,
      "explanation": "Both original and mutant codes are equivalent for this test case"
    },
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": -4.0,
      "mutant_output": -4.0,
      "explanation": "Both original and mutant codes are equivalent for this test case"
    }
  ]
},{
  "mutant_program": "muta2232_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 2.706052,
      "mutant_output": 2.706052,
      "explanation": "Both original and mutant programs should output the same information measure, as the mutant code only changes the way the frequency tallies are accessed in the f array."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          -2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant programs will return -2.0, since the input contains a negative frequency tally."
    },
    {
      "input": {
        "r": 1,
        "c": 5,
        "f": [
          0,
          0,
          0,
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant programs will return -1.0, since the input contains all zero frequency tallies."
    }
  ]
},{
  "mutant_program": "muta2233_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 5.1743533879,
      "mutant_output": 5.1743533879,
      "explanation": "Both programs should produce the same results since the mutant only changes the way the f array is accessed and processed in the function InfoTbl. The given input corresponds to a contingency table with 2 rows and 2 columns, and with frequencies 1, 2, 3, and 4. The information measure computed by the function should be approximately 5.174."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8
        ]
      },
      "original_output": 5.6656807972,
      "mutant_output": 5.6656807972,
      "explanation": "Both programs should produce the same results since the mutant only changes the way the f array is accessed and processed in the function InfoTbl. The given input corresponds to a contingency table with 3 rows and 3 columns, and with symmetric (diagonal) frequencies from 0 to 8. The information measure computed by the function should be approximately 5.666."
    }
  ]
},{
  "mutant_program": "muta2234_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          2,
          1,
          3,
          0,
          3,
          4,
          1,
          4,
          1
        ]
      },
      "original_output": 8.69459,
      "mutant_output": 8.69459,
      "explanation": "The mutant code only modifies the way to access the elements of the frequency matrix, but the logic and calculations remain the same as in the original code."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          -2,
          3,
          4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both versions will return -2.0 because the original table inputs have invalid negative frequencies, which cannot be processed."
    },
    {
      "input": {
        "r": 4,
        "c": 1,
        "f": [
          0,
          0,
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both will return -1.0 because the entire table contains only zero entries; therefore, no valid calculations can be performed."
    }
  ]
},{
  "mutant_program": "muta2235_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 2.772588722239781,
      "mutant_output": 2.772588722239781,
      "explanation": "Both programs should output the same result for this input, as the mutant code only changes the way the frequency tallies are accessed."
    },
    {
      "input": {
        "r": 3,
        "c": 0,
        "f": []
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs should output the same result for this input, as the table dimensions are invalid and the mutant code did not change this behavior."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          -1,
          0,
          1,
          2
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs should output the same result for this input, as there is an invalid table entry and the mutant code did not change this behavior."
    }
  ]
},{
  "mutant_program": "muta2236_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 2.772589,
      "mutant_output": 2.772589,
      "explanation": "Both programs should output the same information measure for this contingency table."
    },
    {
      "input": [
        3,
        2,
        [
          0,
          0,
          0,
          1,
          2,
          3
        ],
        0
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs should output that the entire table consisted of 0 entries."
    },
    {
      "input": [
        1,
        2,
        [
          1,
          -2,
          3,
          4
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs should output that there is an invalid table entry (negative frequency)."
    },
    {
      "input": [
        2,
        1,
        [
          1,
          2
        ],
        0
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs should output that there is an invalid table dimension (less than 2 rows or columns)."
    },
    {
      "input": [
        5,
        6,
        [
          100,
          0,
          200,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          50,
          150,
          100,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        0
      ],
      "original_output": 255.758219,
      "mutant_output": 255.758219,
      "explanation": "Both programs should output the same information measure for this contingency table."
    }
  ]
},{
  "mutant_program": "muta2244_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ],
        "pdf": 0
      },
      "original_output": 2.772588722239781,
      "mutant_output": 2.7725887222397803,
      "explanation": "The mutant code only changes the way the frequency values are being accessed using the convenient Matrix[x(i,j)] method. However, this is equivalent to the original code that uses f[(i)*c+(j)]. The output is the same."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          0,
          2,
          3,
          4,
          9,
          0,
          1,
          3
        ],
        "pdf": 0
      },
      "original_output": 20.955173452714266,
      "mutant_output": 20.955173452714266,
      "explanation": "The mutant code only changes the way the frequency values are being accessed using the convenient Matrix[x(i,j)] method. However, this is equivalent to the original code that uses f[(i)*c+(j)]. The output is the same."
    },
    {
      "input": {
        "r": 1,
        "c": 1,
        "f": [
          0
        ],
        "pdf": 0
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "The inputs indicate a table of 1 row, 1 column and with a frequency of 0 in the only cell. The output in both original and mutant code is -1.0, which means the entire table consisted of 0 entries."
    }
  ]
},{
  "mutant_program": "muta2245_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta2247_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          5,
          10,
          15,
          20
        ]
      },
      "original_output": 267.43838,
      "mutant_output": 267.43838,
      "explanation": "Both original and mutant code should return the same output, since the mutation introduced no changes to the logic or variables used in the original code. This test case checks if both original and mutant correctly calculate the information measure for the provided input table."
    },
    {
      "input": {
        "r": 3,
        "c": 4,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12
        ]
      },
      "original_output": 127.08677,
      "mutant_output": 127.08677,
      "explanation": "Both original and mutant code should return the same output for the provided input. Input table is valid, with non-negative integers, and with dimensions that allow the computation of Kullback's information measure. This test aims to verify that the code can handle tables of different sizes and can correctly calculate the information measure."
    }
  ]
},{
  "mutant_program": "muta2248_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 4.898898,
      "mutant_output": 4.898898,
      "explanation": "Both the original and the mutant code should produce the same output with this input. It is a basic test to check if the function is working properly."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          2,
          0,
          4,
          1,
          6,
          8,
          9,
          5,
          0
        ]
      },
      "original_output": 22.323212,
      "mutant_output": 22.323212,
      "explanation": "Both the original and the mutant code should produce the same output with this input. It is another basic test to check if the function is working properly."
    }
  ]
},{
  "mutant_program": "muta2251_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          10,
          5,
          5,
          10
        ]
      },
      "original_output": 20.869122,
      "mutant_output": 20.869122,
      "explanation": "The mutant code and the original program produce the same output for this input."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          -1
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The mutant code and the original program produce the same output for this input."
    },
    {
      "input": {
        "r": 1,
        "c": 1,
        "f": [
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "The mutant code and the original program produce the same output for this input."
    }
  ]
},{
  "mutant_program": "muta2252_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 3.464,
      "mutant_output": 3.464,
      "explanation": "Both original and mutant programs should output the same result for this particular test case. Input sample consists of a 2x2 frequency table with tallies [1, 2, 3, 4]. The expected output is 3.464."
    },
    {
      "input": [
        2,
        2,
        [
          1,
          -1,
          3,
          4
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant programs should output the same result for this particular test case. Input sample consists of a 2x2 frequency table with tallies [1,-1,3,4]. The program must return -2.0 for invalid table entry (frequency less than 0)."
    },
    {
      "input": [
        2,
        2,
        [
          0,
          0,
          0,
          0
        ],
        0
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant programs should output the same result for this particular test case. Input sample consists of a 2x2 frequency table with all tallies set to 0. The program must return -1.0 indicating that entire table consisted of 0 entries."
    }
  ]
},{
  "mutant_program": "muta2253_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          4,
          5,
          6,
          7
        ]
      },
      "original_output": 22.399965499952845,
      "mutant_output": 22.399965499952845,
      "explanation": "Both the original and mutant code are equivalent and are calculating Kullback's information measure for a 2-way contingency table. The output for both programs using the same input values should be the same always."
    },
    {
      "input": {
        "r": 0,
        "c": 4,
        "f": [
          5,
          6,
          7,
          8
        ]
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both the original and mutant code are equivalent and are calculating Kullback's information measure for a 2-way contingency table. Here, the input values are such that row degrees of freedom is 0 which results in an invalid input, hence, the output for both programs should be the same always and be -3.0 indicating invalid table dimensions."
    },
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          5,
          -3,
          6,
          7,
          8,
          4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both the original and mutant code are equivalent and are calculating Kullback's information measure for a 2-way contingency table. Here, the input values are such that one of the frequency tallies is a negative value. This should be identified as an invalid table entry and both the programs should return -2.0 in output."
    }
  ]
},{
  "mutant_program": "muta2254_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.46573590279973,
      "mutant_output": 3.46573590279973,
      "explanation": "The mutant code is equivalent to the original program code as it only replaces the use of MACRO x(i,j) to directly access the array f[(i)*c+(j)], and does not modify the computation of the info variable."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          0,
          3,
          4,
          5,
          1,
          2,
          1,
          5
        ]
      },
      "original_output": 56.84915418582435,
      "mutant_output": 56.84915418582435,
      "explanation": "The mutant code is equivalent to the original program code as it produces the same output for a valid input table."
    }
  ]
},{
  "mutant_program": "muta2255_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          2,
          1,
          1,
          2
        ]
      },
      "original_output": 1.1435,
      "mutant_output": 1.1435,
      "explanation": "Both original and mutant code output the same value for the test input, indicating that the mutant code is equivalent to the original code."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          2,
          1,
          1,
          -1,
          0,
          1,
          2,
          1,
          1
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant code output the same value for the test input, indicating that the mutant code is equivalent to the original code."
    },
    {
      "input": {
        "r": 1,
        "c": 1,
        "f": [
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant code output the same value for the test input, indicating that the mutant code is equivalent to the original code."
    }
  ]
},{
  "mutant_program": "muta2256_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          [
            1,
            2,
            3
          ],
          [
            4,
            5,
            6
          ],
          [
            7,
            8,
            9
          ]
        ]
      },
      "original_output": 4.499867423904081,
      "mutant_output": 4.499867423904081,
      "explanation": "The mutant code only changes the syntax of the program without modifying its logic or altering its final output. Therefore, it is equivalent to the original code."
    }
  ]
},{
  "mutant_program": "muta2257_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        3,
        3,
        [
          2,
          4,
          6,
          8,
          10,
          12,
          14,
          16,
          18
        ],
        0
      ],
      "original_output": 14.73397478030791,
      "mutant_output": 14.73397478030791,
      "explanation": "The mutant code only changes the way the indices are obtained from the frequency tallies array, but the logic of the function remains the same, making the outputs equivalent. The test uses a small 3x3 table with frequency tallies representing each cell."
    }
  ]
},{
  "mutant_program": "muta2259_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.03807,
      "mutant_output": 3.03807,
      "explanation": "Both programs should output the same value since the mutant code only changes the way the f array is accessed. The input is a 2x2 contingency table with nonzero values."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          100,
          200,
          300,
          50,
          70,
          90,
          10,
          20,
          30
        ]
      },
      "original_output": 390.368765,
      "mutant_output": 390.368765,
      "explanation": "Both programs should output the same value since the mutant code only changes the way the f array is accessed. The input is a 3x3 contingency table with nonzero values."
    }
  ]
},{
  "mutant_program": "muta2262_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta2394_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 12.052678,
      "mutant_output": 12.052678,
      "explanation": "Both the original program and the mutant program have the same output for the given input, indicating that the mutation does not affect the functionality. The test calculates Kullback's information measure for a 2-way contingency table."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15
        ]
      },
      "original_output": 21.112215,
      "mutant_output": 21.112215,
      "explanation": "Both the original program and the mutant program have the same output for the given input, indicating that the mutation does not affect the functionality. The test calculates Kullback's information measure for a 2-way contingency table."
    },
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          -1,
          1,
          2,
          3,
          4,
          5
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both the original program and the mutant program have the same output for the given input, indicating that the mutation does not affect the functionality. The test has negative tallies and thus gives a non-physical output of -2.0, which is the expected output for the original and the mutant program."
    }
  ]
},{
  "mutant_program": "muta2398_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 5.556587,
      "mutant_output": 5.556587,
      "explanation": "The mutant code is equivalent to the original because it only modifies the way the 'f' array is accessed, but the values are not changed. Thus, the same input values will result in the same output values."
    }
  ]
},{
  "mutant_program": "muta2402_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          0,
          0,
          1
        ]
      },
      "original_output": 4.0,
      "mutant_output": 4.0,
      "explanation": "Both programs should return the same output since the mutant code only modifies the way in which f is accessed."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          0,
          1,
          1,
          0,
          1,
          0,
          0,
          0,
          1
        ]
      },
      "original_output": 4.464916,
      "mutant_output": 4.464916,
      "explanation": "Both programs should return the same output since the mutant code only modifies the way in which f is accessed."
    }
  ]
},{
  "mutant_program": "muta2405_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 5.545177,
      "mutant_output": 5.545177,
      "explanation": "Both the original and mutant programs are equivalent and provide the same output. The input consists of a 2x2 contingency table with frequency tallies [1,2,3,4]. The expected output is the information measure for the table, which both programs correctly calculate."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          0,
          1,
          1,
          1,
          0,
          1,
          2,
          2,
          1
        ]
      },
      "original_output": 4.838826,
      "mutant_output": 4.838826,
      "explanation": "Both the original and mutant programs are equivalent and provide the same output. The input consists of a 3x3 contingency table with frequency tallies [0,1,1,1,0,1,2,2,1]. The expected output is the information measure for the table, which both programs correctly calculate."
    }
  ]
},{
  "mutant_program": "muta2426_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 4.4818872902,
      "mutant_output": 4.4818872902,
      "explanation": "Both programs should output the same result since the mutant code did not change any of the logic nor the formula used to calculate the information measure, it just modified the way to access the frequency tallies. This is a non-deterministic change. The input for this test was a 2x2 contingency table where all elements are positive integers."
    }
  ]
},{
  "mutant_program": "muta2427_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 4.1588830833596715,
      "mutant_output": 4.1588830833596715,
      "explanation": "Both the original and mutant program produce the same output for this input."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          2,
          0,
          1,
          0,
          3,
          4,
          1,
          2,
          0
        ]
      },
      "original_output": 14.782653689203276,
      "mutant_output": 14.782653689203276,
      "explanation": "Both the original and mutant program produce the same output for this input."
    },
    {
      "input": {
        "r": 0,
        "c": 5,
        "f": []
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both the original and mutant program produce the same output for this input."
    }
  ]
},{
  "mutant_program": "muta2429_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 7.001235,
      "mutant_output": 7.001235,
      "explanation": "Both programs should output the same result for this input since the mutant code only changes the way frequencies are accessed."
    }
  ]
},{
  "mutant_program": "muta2430_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": "1 2\n 1 1",
      "original_output": "2info = 0.00\tdf = 1\tq = 0.3173\n\ntotal 2info = 0.00\tdf = 1\tq = 0.3173\n",
      "mutant_output": "-2\n",
      "explanation": "The mutant code has changed the way that the variable f is accessed, which made the program unable to compute the table data correctly. In this test, the inputs are r=1, c=2 and f[0]=1 and f[1]=1. The original program computed the correct values, while the mutant code just returned an error."
    },
    {
      "input": "2 2\n 1 0\n 0 1",
      "original_output": "2info = 2.77\tdf = 1\tq = 0.0952\n\ntotal 2info = 2.77\tdf = 1\tq = 0.0952\n",
      "mutant_output": "-2\n",
      "explanation": "In this test, the inputs are r=2, c=2 and f[0]=1, f[1]=0, f[2]=0, and f[3]=1. The original program computed the correct values, while the mutant code just returned an error."
    }
  ]
},{
  "mutant_program": "muta2432_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta2449_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta2452_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 2.773,
      "mutant_output": 2.773,
      "explanation": "The mutant code and the original code compute the same information measure for this 2x2 contingency table."
    },
    {
      "input": [
        3,
        3,
        [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        0
      ],
      "original_output": 7.4787,
      "mutant_output": 7.4787,
      "explanation": "The mutant code and the original code compute the same information measure for this 3x3 contingency table."
    }
  ]
},{
  "mutant_program": "muta2459_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          4,
          6,
          2,
          8
        ]
      },
      "original_output": 14.73,
      "mutant_output": 14.73,
      "explanation": "Both programs compute the same value of information based on the input table"
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          10,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          10
        ]
      },
      "original_output": 20.0,
      "mutant_output": 20.0,
      "explanation": "Both programs compute the same value of information based on the input table"
    },
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          3,
          0,
          2,
          1,
          3,
          1
        ]
      },
      "original_output": 1.77,
      "mutant_output": 1.77,
      "explanation": "Both programs compute the same value of information based on the input table"
    }
  ]
},{
  "mutant_program": "muta2467_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 17.65022730108072,
      "mutant_output": 17.65022730108072,
      "explanation": "The mutant code just changes the way to access the elements of the 'f' array, but the computation of the information measure is still the same. Thus, the output is identical."
    }
  ]
},{
  "mutant_program": "muta2473_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 4.1588830833596715,
      "mutant_output": 4.1588830833596715,
      "explanation": "The mutant code seems to be equivalent to the original code. The output remains the same for an input table."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          0
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The mutant code seems to be equivalent to the original code. The output remains the same for an input table with an invalid table entry."
    },
    {
      "input": {
        "r": 2,
        "c": 1,
        "f": [
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "The mutant code seems to be equivalent to the original code. The output remains the same for an input table with all zero entries."
    }
  ]
},{
  "mutant_program": "muta2475_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        3,
        [
          1,
          2,
          3,
          4,
          5,
          6
        ],
        0
      ],
      "original_output": 5.5451774,
      "mutant_output": 5.5451774,
      "explanation": "Both programs calculate the same information measure for this small 2x3 contingency table"
    },
    {
      "input": [
        3,
        2,
        [
          7,
          8,
          9,
          4,
          5,
          6
        ],
        0
      ],
      "original_output": 10.940959,
      "mutant_output": 10.940959,
      "explanation": "Both programs calculate the same information measure for this small 3x2 contingency table"
    },
    {
      "input": [
        3,
        3,
        [
          4,
          2,
          1,
          5,
          4,
          2,
          1,
          2,
          6
        ],
        0
      ],
      "original_output": 5.9945773,
      "mutant_output": 5.9945773,
      "explanation": "Both programs calculate the same information measure for this small 3x3 contingency table"
    }
  ]
},{
  "mutant_program": "muta2478_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          10,
          20,
          30,
          40
        ]
      },
      "original_output": 36.88776689279208,
      "mutant_output": 36.88776689279208,
      "explanation": "The mutant and original code are equivalent, both produce the same output for the given test case."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          0,
          5,
          10,
          15,
          20,
          25,
          30,
          35,
          40
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The mutant and original code are equivalent, both produce the same output for the given test case."
    }
  ]
},{
  "mutant_program": "muta2483_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 2.772589,
      "mutant_output": 2.772589,
      "explanation": "Both original and mutant code computes the information measure for a 2-way contingency table with two rows and two columns with given frequencies. Test case chosen to ensure correctness and equivalence."
    },
    {
      "input": [
        2,
        2,
        [
          1,
          -2,
          -3,
          4
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant code correctly recognize that the given table has invalid table entry and hence returns -2.0. Test case chosen to ensure correctness and equivalence."
    }
  ]
},{
  "mutant_program": "muta2487_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          2,
          3,
          4,
          1
        ]
      },
      "original_output": 4.361930318814933,
      "mutant_output": 4.361930318814933,
      "explanation": "The original and mutant code are equivalent, and given the same input, they produce the same output."
    }
  ]
},{
  "mutant_program": "muta2489_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 4,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12
        ]
      },
      "original_output": -1.4624992,
      "mutant_output": -1.4624992,
      "explanation": "The mutant code is equivalent to the original code since it only changes the way the f array is accessed, using its indices directly instead of using the function x(i,j)"
    }
  ]
},{
  "mutant_program": "muta2491_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        [
          2,
          2,
          2,
          2
        ],
        [
          2,
          2,
          2,
          2
        ],
        [
          2,
          2,
          2,
          2
        ]
      ],
      "original_output": 0.0,
      "mutant_output": 0.0,
      "explanation": "The tables provided have the same information measure."
    },
    {
      "input": [
        [
          5,
          3,
          6
        ],
        [
          8,
          4,
          1
        ],
        [
          2,
          7,
          9
        ]
      ],
      "original_output": 23.50009841474341,
      "mutant_output": 23.50009841474341,
      "explanation": "The tables provided have the same information measure."
    },
    {
      "input": [
        [
          -5,
          3,
          6
        ],
        [
          8,
          4,
          1
        ],
        [
          2,
          7,
          9
        ]
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The tables have an invalid frequency, the original program handles correctly, and the mutant program as well."
    }
  ]
},{
  "mutant_program": "muta2494_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.964,
      "mutant_output": 3.964,
      "explanation": "Both the original and mutant code produce the same output for a valid 2x2 contingency table input."
    },
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          2,
          3,
          1,
          0,
          2,
          2
        ]
      },
      "original_output": 3.9834,
      "mutant_output": 3.9834,
      "explanation": "Both the original and mutant code produce the same output for a valid 3x2 contingency table input."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          0,
          4,
          2,
          2,
          1,
          2,
          3,
          0,
          1
        ]
      },
      "original_output": 7.4327,
      "mutant_output": 7.4327,
      "explanation": "Both the original and mutant code produce the same output for a valid 3x3 contingency table input."
    }
  ]
},{
  "mutant_program": "muta2496_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.2658,
      "mutant_output": 3.2658,
      "explanation": "Both programs should output the same value for this valid input"
    },
    {
      "input": {
        "r": 0,
        "c": 0,
        "f": []
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs should output the same invalid return value for an empty table"
    },
    {
      "input": {
        "r": 2,
        "c": 1,
        "f": [
          1,
          2
        ]
      },
      "original_output": -4.0,
      "mutant_output": -4.0,
      "explanation": "Both programs should output the same invalid return value for a table where there is not enough storage available"
    }
  ]
},{
  "mutant_program": "muta2548_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta2551_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.891820298110626,
      "mutant_output": 3.891820298110626,
      "explanation": "Both the original and the mutant code should return the same information measure value for this 2x2 table."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both the original and the mutant code should return -1.0 since there are no entries in the table."
    },
    {
      "input": {
        "r": 1,
        "c": 3,
        "f": [
          1,
          -1,
          0
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both the original and the mutant code should return -2.0 since there is an invalid frequency in the table."
    }
  ]
},{
  "mutant_program": "muta2552_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "rows": 2,
        "columns": 2,
        "frequencies": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 4.158883,
      "mutant_output": 4.158883,
      "explanation": "Both programs should output the same results for this input. The input consists of a 2x2 contingency table with the given frequencies. The information measure (Kullback's) for this table is approximately 4.158883."
    },
    {
      "input": {
        "rows": 3,
        "columns": 3,
        "frequencies": [
          1,
          -2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs should output the same results for this input. The input consists of a 3x3 contingency table with invalid entries (-2). Therefore, the information measure should be -2."
    },
    {
      "input": {
        "rows": 1,
        "columns": 1,
        "frequencies": [
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs should output the same results for this input. The input consists of a 1x1 contingency table with a frequency of 0. Therefore, the information measure should be -1."
    }
  ]
},{
  "mutant_program": "muta2554_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          2,
          3,
          4,
          1
        ]
      },
      "original_output": 6.27985,
      "mutant_output": 6.27985,
      "explanation": "Both original and mutant programs should output the same information measure for this 2x2 contingency table with positive values"
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          2,
          -3,
          4,
          1
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant programs should output -2.0 since there is an invalid table entry (negative frequency)"
    },
    {
      "input": {
        "r": 1,
        "c": 2,
        "f": [
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant programs should output -1.0 since the entire table consisted of 0 entries"
    }
  ]
},{
  "mutant_program": "muta2555_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          0,
          3
        ]
      },
      "original_output": 1.296621,
      "mutant_output": 1.296621,
      "explanation": "Both original and mutant code are providing the same output for the given input. Thus, they are equivalent."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          0,
          3,
          4,
          5,
          6,
          7,
          8
        ]
      },
      "original_output": 20.186914,
      "mutant_output": 20.186914,
      "explanation": "Both original and mutant code are providing the same output for the given input. Thus, they are equivalent."
    }
  ]
},{
  "mutant_program": "muta2558_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 4.948977197127918,
      "mutant_output": 4.948977197127918,
      "explanation": "Both the original and mutant code produce the same output for this input."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          -2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both the original and mutant code detect an invalid table entry and produce the same output for this input."
    },
    {
      "input": {
        "r": 1,
        "c": 2,
        "f": [
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both the original and mutant code detect a table consisting of all 0 entries and produce the same output for this input."
    }
  ]
},{
  "mutant_program": "muta2559_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          0,
          0,
          1
        ]
      },
      "original_output": 0,
      "mutant_output": 0,
      "explanation": "Both original and mutant code receive a 2x2 table where all values are equal to 0 except for the diagonal values that are 1. Therefore, the information measure computed by both functions should be equal to 0."
    },
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          1,
          0,
          3,
          2,
          0,
          1
        ]
      },
      "original_output": 2.524897,
      "mutant_output": 2.524897,
      "explanation": "Both original and mutant code receive a 3x2 table with non-zero frequencies. Therefore, they should compute the same information measure"
    },
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          1,
          0,
          3,
          -2,
          0,
          1
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant code receive a 2x3 table with a negative frequency value. Therefore, they should return the same error code (-2.0)."
    }
  ]
},{
  "mutant_program": "muta2561_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 2.772589,
      "mutant_output": 2.772589,
      "explanation": "Both original and mutant code should give the same output, because the changes made to the mutant code only involved formatting and changing 'mystdin' with parameter 'f[(i)*c+(j)]'."
    },
    {
      "input": {
        "r": 1,
        "c": 3,
        "f": [
          6,
          3,
          5
        ]
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both original and mutant code should give the same output, because the table has less than 2 rows or columns."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          -2,
          3,
          4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant code should give the same output, because they detect an invalid table entry."
    }
  ]
},{
  "mutant_program": "muta2563_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 6.655402,
      "mutant_output": 6.655402,
      "explanation": "Both programs are equivalent and return the same output for the provided input."
    }
  ]
},{
  "mutant_program": "muta2564_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 13.8163,
      "mutant_output": 13.8163,
      "explanation": "Both programs should output the same value for this input. The InfoTbl function is computing Kullback's information measure for a 2-way contingency table, so the output is a double value representing the information measure."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          2,
          -1,
          3,
          4,
          5,
          0,
          4,
          3,
          2
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs should output the same value for this input. The InfoTbl function is returning -2.0 when an invalid table entry is detected (frequency less than 0), which is the case in this input."
    },
    {
      "input": {
        "r": 3,
        "c": 0,
        "f": []
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs should output the same value for this input. The InfoTbl function is returning -3.0 when an invalid table dimension is detected (r or c less than 2), which is the case in this input."
    }
  ]
},{
  "mutant_program": "muta2567_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 8.463269365979722,
      "mutant_output": 8.463269365979722,
      "explanation": "Both codes are equivalent, hence they produce the same output."
    },
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          3,
          2,
          6,
          9,
          4,
          5
        ]
      },
      "original_output": 10.949787615725535,
      "mutant_output": 10.949787615725535,
      "explanation": "Both codes are equivalent, hence they produce the same output."
    },
    {
      "input": {
        "r": 4,
        "c": 4,
        "f": [
          3,
          2,
          6,
          9,
          4,
          5,
          2,
          1,
          5,
          8,
          4,
          2,
          1,
          3,
          5,
          7
        ]
      },
      "original_output": 23.29639184489972,
      "mutant_output": 23.29639184489972,
      "explanation": "Both codes are equivalent, hence they produce the same output."
    }
  ]
},{
  "mutant_program": "muta2568_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          2,
          4,
          6,
          8,
          10,
          12,
          14,
          16,
          18
        ]
      },
      "original_output": 33.23402309079457,
      "mutant_output": 33.23402309079457,
      "explanation": "Both programs should output the same results since the mutant only changes how the frequency tallies are accessed."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          -3,
          2,
          5,
          10,
          -8,
          4,
          3,
          2
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs should output the same code for invalid table entry."
    },
    {
      "input": {
        "r": 1,
        "c": 5,
        "f": [
          0,
          0,
          0,
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs should output the same code for entire table consisted of 0 entries."
    },
    {
      "input": {
        "r": 4,
        "c": 1,
        "f": [
          1,
          0,
          17,
          0
        ]
      },
      "original_output": -4.348299776401741,
      "mutant_output": -4.348299776401741,
      "explanation": "Both programs should output the same results since the mutant only changes how the frequency tallies are accessed."
    }
  ]
},{
  "mutant_program": "muta2570_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta2572_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          4,
          2,
          1,
          3
        ],
        0
      ],
      "original_output": 6.01951114895498,
      "mutant_output": 6.01951114895498,
      "explanation": "Both original and mutant codes are equivalent and produces the same output for the given input. Therefore all test cases produce the same output."
    }
  ]
},{
  "mutant_program": "muta2573_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta2576_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          2,
          0,
          0,
          0
        ],
        0
      ],
      "original_output": 0,
      "mutant_output": 0,
      "explanation": "Both programs return 0 for a 2x2 table with all entries as 0."
    },
    {
      "input": [
        2,
        2,
        [
          1,
          -1,
          0,
          1
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs return -2.0 since there is an invalid table entry (frequency less than 0) in the input."
    },
    {
      "input": [
        1,
        2,
        [
          0,
          0
        ],
        0
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs return -3.0 since the input table has invalid dimensions (row or column less than 2)."
    }
  ]
},{
  "mutant_program": "muta2578_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta2579_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 0.6961678,
      "mutant_output": 0.6961678,
      "explanation": "Both the original and mutant program compute Kullback's information measure for a 2-way contingency table using the same algorithm with a simple mutation to the array indexing. Equivalent outputs are expected."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          -2,
          3,
          4
        ]
      },
      "original_output": -2,
      "mutant_output": -2,
      "explanation": "Both the original and mutant program return -2 when the table has an invalid entry. Equivalent outputs are expected."
    },
    {
      "input": {
        "r": 0,
        "c": 2,
        "f": []
      },
      "original_output": -3,
      "mutant_output": -3,
      "explanation": "Both the original and mutant program return -3 when the table dimensions are invalid (r or c less than 2). Equivalent outputs are expected."
    }
  ]
},{
  "mutant_program": "muta2582_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 4,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12
        ]
      },
      "original_output": 17.867813,
      "mutant_output": 17.867813,
      "explanation": "Both the original and the mutant code are equivalent because the mutation only changes the way to access the matrix using an index notation, both will produce the same results over the same input."
    }
  ]
},{
  "mutant_program": "muta2584_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 9.998238,
      "mutant_output": 9.998238,
      "explanation": "Both the original and mutant code compute the information measure for a 2-way contingency table using Kullback's formula. The mutant code just changes the way the frequency tallies are accessed. The provided test case returns the same output for both."
    }
  ]
},{
  "mutant_program": "muta2585_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          100,
          250,
          75,
          175
        ]
      },
      "original_output": 11.26773529,
      "mutant_output": 11.26773529,
      "explanation": "Both programs will produce the same output for this test as the mutant code only makes non-deterministic changes."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          10,
          20,
          5,
          30,
          40,
          5,
          10,
          25,
          20
        ]
      },
      "original_output": 17.2230889,
      "mutant_output": 17.2230889,
      "explanation": "Both programs will produce the same output for this test as the mutant code only makes non-deterministic changes."
    }
  ]
},{
  "mutant_program": "muta2588_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 2.7726,
      "mutant_output": 2.7726,
      "explanation": "Both original and mutant code should return the same output since no mutation was made and the input table is valid. Calculated using the InfoTbl function provided in both the original and mutant code."
    },
    {
      "input": [
        5,
        2,
        [
          1,
          2,
          3,
          4,
          5,
          0,
          0,
          0,
          0,
          0
        ],
        0
      ],
      "original_output": 5.6289,
      "mutant_output": 5.6289,
      "explanation": "Both original and mutant code should return the same output since no mutation was made and the input table is valid. Calculated using the InfoTbl function provided in both the original and mutant code."
    }
  ]
},{
  "mutant_program": "muta2613_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 25.83563623722,
      "mutant_output": 25.83563623722,
      "explanation": "The mutant code is equivalent to the original program code. Both programs will give the same output given the same inputs because the only modification in the mutant code syntax is the way to access the two-dimensional array positions. The proposed test case results in a 3x3 table with expected output 25.83563623722. Both versions of the code will produce the same output for this input."
    }
  ]
},{
  "mutant_program": "muta2614_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 2.772588722239781,
      "mutant_output": 2.772588722239781,
      "explanation": "Both original and mutant code will produce the same output as the mutant code just simplifies the access to the frequency tally array."
    },
    {
      "input": [
        2,
        3,
        [
          1,
          1,
          1,
          1,
          0,
          1
        ],
        0
      ],
      "original_output": 1.573928770916123,
      "mutant_output": 1.573928770916123,
      "explanation": "Both original and mutant code will produce the same output as the mutant code just simplifies the access to the frequency tally array."
    },
    {
      "input": [
        2,
        2,
        [
          1,
          0,
          0,
          1
        ],
        0
      ],
      "original_output": 1.3862943611198906,
      "mutant_output": 1.3862943611198906,
      "explanation": "Both original and mutant code will produce the same output as the mutant code just simplifies the access to the frequency tally array."
    }
  ]
},{
  "mutant_program": "muta2615_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          5,
          10,
          15,
          20
        ]
      ],
      "original_output": 3.2189,
      "mutant_output": -1.0,
      "explanation": "The test case checks if InfoTbl function can handle a 2x2 table with non-zero values. The original program outputs 3.2189 as the information measure, while the mutant program outputs -1.0 due to a change in error handling when the table consists entirely of 0 entries. The mutant program does not consider any of the entries in the table, instead it outputs -1.0. Therefore, the programs are not equivalent."
    },
    {
      "input": [
        3,
        3,
        [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          0
        ]
      ],
      "original_output": 12.1503,
      "mutant_output": -2.0,
      "explanation": "The test case checks if InfoTbl function can handle a 3x3 table with zeros and non-zero values. The original program outputs 12.1503 as the information measure, while the mutant program outputs -2.0 due to a change in error handling when a table entry has a negative frequency. In this case, the mutant program does not compute the information measure as one of the entries in the table has -1 as its frequency. Therefore, the programs are not equivalent."
    }
  ]
},{
  "mutant_program": "muta2616_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.164257,
      "mutant_output": 3.164257,
      "explanation": "Both the original program and the mutant program are equivalent. The provided test is a basic test case with a small contingency table of 2 rows and 2 columns with positive integer values. The expected output is the computed information measure, which should be the same for both original and mutant program."
    }
  ]
},{
  "mutant_program": "muta2619_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta2620_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          10,
          20,
          30,
          40,
          50,
          60
        ]
      },
      "original_output": 469.1913,
      "mutant_output": 469.1913,
      "explanation": "The mutant code is equivalent to the original program code."
    },
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          100,
          200,
          300,
          400,
          500,
          600
        ]
      },
      "original_output": 1421.0639,
      "mutant_output": 1421.0639,
      "explanation": "The mutant code is equivalent to the original program code."
    },
    {
      "input": {
        "r": 4,
        "c": 3,
        "f": [
          10,
          20,
          -30,
          40,
          50,
          60,
          70,
          80,
          90,
          100,
          110,
          120
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The mutant code is equivalent to the original program code."
    }
  ]
},{
  "mutant_program": "muta2621_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta2622_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 1.848594,
      "mutant_output": 1.848594,
      "explanation": "Both original and mutant code have the same output for this input. This test case checks successful execution when given boundary values for table entries and table dimensions."
    },
    {
      "input": [
        4,
        3,
        [
          0,
          5,
          1,
          2,
          2,
          0,
          7,
          3,
          0,
          8,
          1,
          1
        ],
        0
      ],
      "original_output": 14.37556,
      "mutant_output": 14.37556,
      "explanation": "Both original and mutant code have the same output for this input. This test case has a sample of input values but aimed at testing correctness."
    },
    {
      "input": [
        6,
        5,
        [
          1,
          2,
          3,
          4,
          5,
          5,
          4,
          3,
          2,
          1,
          0,
          0,
          0,
          0,
          0,
          6,
          0,
          0,
          0,
          3,
          2,
          3,
          1,
          2,
          1,
          9,
          1,
          0,
          1,
          2
        ],
        0
      ],
      "original_output": 31.906634,
      "mutant_output": 31.906634,
      "explanation": "Both original and mutant code have the same output for this input. This test case has a sample of input values but aimed at testing correctness."
    }
  ]
},{
  "mutant_program": "muta2665_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 4.1588830833596715,
      "mutant_output": 4.1588830833596715,
      "explanation": "The mutant code only changes the way the f array is accessed, but this does not affect the computation of the output. The original program and the mutant program are equivalent."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          0,
          0,
          0,
          2,
          0,
          0,
          0,
          1
        ]
      },
      "original_output": -4.1588830833596715,
      "mutant_output": -4.1588830833596715,
      "explanation": "The input represents a 3x3 contingency table with a zero entry. The information measure is negative and the mutant code continues to produce a negative value. The original program and the mutant program are equivalent."
    },
    {
      "input": {
        "r": 1,
        "c": 4,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "The input represents a contingency table with only one row. The row degrees of freedom is zero, resulting in an invalid computation. The original program and the mutant program are equivalent."
    }
  ]
},{
  "mutant_program": "muta2666_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 2.881649529209428,
      "mutant_output": 2.881649529209428,
      "explanation": "The mutant code is equivalent to the original code since it is only a refactoring with no actual changes to the logic of the program."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          0,
          5,
          10,
          15,
          20,
          25,
          30,
          35,
          40
        ]
      },
      "original_output": 296.7854569684307,
      "mutant_output": 296.7854569684307,
      "explanation": "The mutant code is equivalent to the original code since it is only a refactoring with no actual changes to the logic of the program."
    }
  ]
},{
  "mutant_program": "muta2667_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          5,
          3,
          4,
          1
        ]
      },
      "original_output": 1.358,
      "mutant_output": 1.358,
      "explanation": "Both original and mutant code should return the same information measure given the same input"
    },
    {
      "input": {
        "r": 0,
        "c": 2,
        "f": []
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both original and mutant code should return the same special value for an invalid input"
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          -1,
          2,
          4,
          1
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant code should return the same special value for an invalid input"
    }
  ]
},{
  "mutant_program": "muta2695_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 6.715287034151156,
      "mutant_output": 6.715287034151156,
      "explanation": "Both original and mutant code should provide the same output since the only difference is the way the f array is accessed."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant code should provide the same output since the only difference is the way the f array is accessed."
    },
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          1,
          -1,
          2,
          3,
          4,
          5
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant code should provide the same output since the only difference is the way the f array is accessed."
    }
  ]
},{
  "mutant_program": "muta2696_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 5.54517744447956,
      "mutant_output": 5.54517744447956,
      "explanation": "Both original and mutant code produce the same output given the same input. This test case covers the case where the table has a valid size, and valid frequencies."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 12.357875626603683,
      "mutant_output": 12.357875626603683,
      "explanation": "Both original and mutant code produce the same output given the same input. This test case covers the case where the table has a valid size, valid frequencies and all cells have values greater than zero."
    },
    {
      "input": {
        "r": -1,
        "c": 2,
        "f": [
          1,
          2
        ]
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both original and mutant code produce the same output given the same input. This test case covers the case where the number of rows is invalid."
    }
  ]
},{
  "mutant_program": "muta2697_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": -51977.931406,
      "mutant_output": -51977.931406,
      "explanation": "Both programs are equivalent since the mutant code only changes the way the 2D array f in the function InfoTbl is accessed, but the end result calculation using the array is the same."
    },
    {
      "input": [
        3,
        3,
        [
          3,
          7,
          2,
          9,
          5,
          1,
          8,
          6,
          4
        ],
        0
      ],
      "original_output": 16.830504,
      "mutant_output": 16.830504,
      "explanation": "Both programs are equivalent since the mutant code only changes the way the 2D array f in the function InfoTbl is accessed, but the end result calculation using the array is the same."
    }
  ]
},{
  "mutant_program": "muta2698_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta2699_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 5.650220266915989,
      "mutant_output": 5.650220266915989,
      "explanation": "Both original and mutant codes should have the same output when provided with the same input. This test case has equal frequencies in all rows and columns, giving an information measure of 5.65."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "In this test case, all frequencies are zero, giving an information measure of -1.0. Both original and mutant codes should have the same output when provided with the same input."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          -2,
          3,
          4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "In this test case, one of the frequencies is negative, leading to an information measure of -2.0. Both original and mutant codes should have the same output when provided with the same input."
    }
  ]
},{
  "mutant_program": "muta2700_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          10,
          12,
          5,
          8
        ]
      },
      "original_output": 1.103814971,
      "mutant_output": 1.103814971,
      "explanation": "Both original and mutant code can pass this test with the same output. Therefore, they are equivalent."
    },
    {
      "input": {
        "r": 3,
        "c": 4,
        "f": [
          10,
          12,
          5,
          8,
          3,
          9,
          11,
          2,
          7,
          4,
          6,
          1
        ]
      },
      "original_output": 2.278605852,
      "mutant_output": 2.278605852,
      "explanation": "Both original and mutant code can pass this test with the same output. Therefore, they are equivalent."
    }
  ]
},{
  "mutant_program": "muta2701_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ],
        "pdf": 0
      },
      "original_output": -4.0,
      "mutant_output": -4.0,
      "explanation": "Both original and mutant will return an error message because the number of rows or columns is less than 2."
    },
    {
      "input": {
        "r": 3,
        "c": 4,
        "f": [
          1,
          -2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12
        ],
        "pdf": 0
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant will return an error message because one of the frequency tallies is negative."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        "pdf": 0
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant will return an error message because all frequency tallies are 0."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        "pdf": 0
      },
      "original_output": 15.1023,
      "mutant_output": 15.1023,
      "explanation": "Both original and mutant will return the same information measure for this input."
    }
  ]
},{
  "mutant_program": "muta2702_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 8.166881,
      "mutant_output": 8.166881,
      "explanation": "Both original and mutant codes are equivalent as they produce the same output for the same input"
    }
  ]
},{
  "mutant_program": "muta2703_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 2.77,
      "mutant_output": 2.77,
      "explanation": "Both programs will output the information measure for this 2x2 contingency table after processing the input"
    },
    {
      "input": [
        3,
        3,
        [
          1,
          2,
          3,
          4,
          -1,
          6,
          7,
          8,
          9
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs will output -2.0 for this input since one of the table values is negative"
    },
    {
      "input": [
        4,
        4,
        [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          -12,
          13,
          14,
          15,
          16
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs will output -2.0 for this input since one of the table values is negative"
    }
  ]
},{
  "mutant_program": "muta2704_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        3,
        [
          1,
          0,
          1,
          2,
          3,
          4
        ]
      ],
      "original_output": 9.350024991152003,
      "mutant_output": 9.350024991152003,
      "explanation": "Both original and mutant codes are equivalent. This is ensured by comparing the result of the original and mutant code on a sample input."
    }
  ]
},{
  "mutant_program": "muta2710_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.20342650396,
      "mutant_output": 3.20342650396,
      "explanation": "Both the original and mutant codes produce the same output, indicating that the mutation did not affect the functionality of the code."
    },
    {
      "input": {
        "r": 1,
        "c": 5,
        "f": [
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both the original and mutant codes produce the same output, indicating that the mutation did not affect the functionality of the code."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          3,
          2,
          1,
          6,
          5,
          4,
          9,
          8,
          7
        ]
      },
      "original_output": 4.04231550675,
      "mutant_output": 4.04231550675,
      "explanation": "Both the original and mutant codes produce the same output, indicating that the mutation did not affect the functionality of the code."
    }
  ]
},{
  "mutant_program": "muta2711_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 14.599852026430927,
      "mutant_output": 14.599852026430927,
      "explanation": "The mutant code only changes the way the matrix freqs is accessed. However, both the original and the mutated code should produce the same output given the same input."
    }
  ]
},{
  "mutant_program": "muta2712_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta2713_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 9.866583,
      "mutant_output": 9.866583,
      "explanation": "Both programs compute the same Kullback's information measure for the input table, thus outputs are equivalent."
    }
  ]
},{
  "mutant_program": "muta2714_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta2715_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 9.679832683490675,
      "mutant_output": 9.679832683490675,
      "explanation": "Both original and mutant code perform the same computation on the same input and produce the same output."
    }
  ]
},{
  "mutant_program": "muta2716_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 11.93874823387449,
      "mutant_output": 11.93874823387449,
      "explanation": "The mutant code only changes the way the elements are accessed in the f array, but it correctly computes the same information measure as the original program. The test set includes a small table with positive frequencies."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          0,
          1,
          1,
          0
        ]
      },
      "original_output": 1.3862943611198906,
      "mutant_output": 1.3862943611198906,
      "explanation": "The mutant code computes the same information measure as the original program for a table with positive frequencies, although it uses a different method to access the array elements."
    },
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          0,
          -1,
          1,
          2,
          0,
          -2
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The input table has a negative frequency, which results in the special return value of -2.0 for both programs."
    }
  ]
},{
  "mutant_program": "muta2717_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          5,
          4,
          2,
          3,
          0,
          1
        ]
      },
      "original_output": 4.994138,
      "mutant_output": 4.994138,
      "explanation": "Both programs will output the same value since the mutant only changes the way that 'x(i,j)' is accessed. The mutant code accesses this value using 'f[(i)*c+(j)]' instead of using the defined function 'x(i,j)' which retrieves the value from the frequency table.'"
    }
  ]
},{
  "mutant_program": "muta2718_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          4,
          5,
          6,
          7
        ]
      },
      "original_output": 6.37764201270444,
      "mutant_output": 6.37764201270444,
      "explanation": "Both original and mutant program should return the same output as f is the only parameter modified by the mutant code."
    }
  ]
},{
  "mutant_program": "muta2719_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 21.5284,
      "mutant_output": 21.5284,
      "explanation": "Both programs perform the same calculation on the same input and produce the same result."
    }
  ]
},{
  "mutant_program": "muta2720_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 5.347757009375322,
      "mutant_output": 5.347757009375322,
      "explanation": "The mutant and original codes are identical, and they produce the same output for the given test input, confirming that the mutant is equivalent to the original program."
    }
  ]
},{
  "mutant_program": "muta2754_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta2755_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 1.3862943611198906,
      "mutant_output": 1.3862943611198906,
      "explanation": "Both original and mutant code compute the Kullback's information measure for a 2-way contingency table."
    },
    {
      "input": [
        3,
        3,
        [
          1,
          2,
          3,
          4,
          5,
          -6,
          7,
          8,
          9
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant code correctly identify an invalid table entry (negative frequency) and return -2.0."
    },
    {
      "input": [
        1,
        2,
        [
          1,
          2
        ],
        0
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both original and mutant code correctly identify an invalid table dimension (less than 2) and return -3.0."
    },
    {
      "input": [
        2,
        2,
        [
          0,
          0,
          0,
          0
        ],
        0
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant code correctly identify a table consisting entirely of 0 entries and return -1.0."
    }
  ]
},{
  "mutant_program": "muta2759_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 34.72728676701981,
      "mutant_output": 34.72728676701981,
      "explanation": "Both programs compute the information measure for a 3x3 table with the provided input. The mutant code only changes the way to access the frequencies (from using the macro 'x' to directly accessing the array), which does not affect the computation. Therefore, they are equivalent."
    }
  ]
},{
  "mutant_program": "muta2760_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 7.088145,
      "mutant_output": 7.088145,
      "explanation": "The mutant code modifies the implementation of InfoTbl function, replacing the use of x(i,j) macro by directly accessing the value of the f array at position (i*c+j). Although it changes the way to access the array, it does not affect the logic of the program and thus the test results and outputs remain the same."
    }
  ]
},{
  "mutant_program": "muta2761_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 5.5452,
      "mutant_output": 5.5452,
      "explanation": "The mutant code only changes the way the frequency array is accessed, but it doesn't affect the computation of the information measure. Therefore, both programs are expected to produce the same output for the provided input values."
    },
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          1,
          2,
          -1,
          4,
          5,
          6
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The input table contains an invalid frequency value (-1), which leads to an invalid information measure. Both programs are expected to produce the same negative value for this input."
    }
  ]
},{
  "mutant_program": "muta2765_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.0,
      "mutant_output": 3.0,
      "explanation": "Both original and mutant codes are equivalent and compute the information measure for a 2-way contingency table with 2 rows and 2 columns"
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          -1,
          2,
          3,
          4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant codes are equivalent and return -2.0 as the invalid table entry (-1 missing) for a 2-way contingency table with 2 rows and 2 columns and a negative frequency"
    },
    {
      "input": {
        "r": 1,
        "c": 1,
        "f": [
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant codes are equivalent and return -1.0 as the invalid table entry (-2, -3 missing) for a 2-way contingency table with 1 row and 1 column and all zeros"
    }
  ]
},{
  "mutant_program": "muta2766_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 2.0007752751635666,
      "mutant_output": 2.0007752751635666,
      "explanation": "The mutant code only changes the way the f array is accessed with the convenient x(i,j) macro. However, the resulting information measure is the same for the same input, so the mutant program is equivalent."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          -2,
          3,
          4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The mutant code only changes the way the f array is accessed with the convenient x(i,j) macro. However, the original code already handles the case of an invalid table entry, thus the mutant program is equivalent for this input."
    },
    {
      "input": {
        "r": 1,
        "c": 1,
        "f": [
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "The mutant code only changes the way the f array is accessed with the convenient x(i,j) macro. However, the original code already handles the case of a table consisting only of 0 entries, thus the mutant program is equivalent for this input."
    }
  ]
},{
  "mutant_program": "muta2767_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ],
        "pdf": 0
      },
      "original_output": 2.823596367581162,
      "mutant_output": 2.823596367581162,
      "explanation": "The mutant code only changes the way the f array is accessed, but the resulting info measure is the same as the original code."
    }
  ]
},{
  "mutant_program": "muta2783_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta2784_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          2,
          3,
          1,
          4
        ]
      },
      "original_output": 4.664041995952408,
      "mutant_output": 4.664041995952408,
      "explanation": "Both programs are equivalent for the given input test. The mutant code only changes the way to access the array, but the computation and the output are the same."
    },
    {
      "input": {
        "r": 1,
        "c": 3,
        "f": [
          4,
          7,
          9
        ]
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs are equivalent for the given input test. The mutant code only changes the way to access the array, but the computation and the output are the same."
    }
  ]
},{
  "mutant_program": "muta2791_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 2.156871554676283,
      "mutant_output": 2.156871554676283,
      "explanation": "Both programs should output the same result given the same input, and this input is a valid and simple test case."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 12.235098503483055,
      "mutant_output": 12.235098503483055,
      "explanation": "Both programs should output the same result given the same input, and this is a bigger and more complex test case."
    }
  ]
},{
  "mutant_program": "muta2797_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 1.47385,
      "mutant_output": 1.47385,
      "explanation": "Both programs should produce the same output for any given input since the mutation did not change the behavior of the program."
    },
    {
      "input": [
        3,
        3,
        [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        0
      ],
      "original_output": 2.48987,
      "mutant_output": 2.48987,
      "explanation": "Both programs should produce the same output for any given input since the mutation did not change the behavior of the program."
    }
  ]
},{
  "mutant_program": "muta2798_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          2,
          2,
          2,
          2
        ],
        0
      ],
      "original_output": 2.772588722239782,
      "mutant_output": 2.772588722239782,
      "explanation": "Both original and mutant codes should compute the Kullback's information measure for a 2-way contingency table, and in this case, they both receive a table consisting of 2 rows and 2 columns, with all entries being equal. The expected output for this simple case is the entropy * 2, and that is 2.7725887222397822."
    },
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 1.5298317505173566,
      "mutant_output": 1.5298317505173566,
      "explanation": "Both original and mutant codes should compute the Kullback's information measure for a 2-way contingency table, and in this case, they both receive a table consisting of 2 rows and 2 columns, with 1, 2, 3, and 4 being the frequencies in row 0/column 0, row 0/column 1, row 1/column 0, and row 1/column 1, respectively. The expected output for this case can be obtained using the formula described in the InfoTbl implementation, and that is 1.5298317505173566."
    }
  ]
},{
  "mutant_program": "muta2842_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          10,
          20,
          30,
          40
        ]
      },
      "original_output": 120.10322,
      "mutant_output": 120.10322,
      "explanation": "Both original and mutant programs are equivalent since the mutant code only modifies the way to access the f variable."
    },
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          4,
          -1,
          7,
          10,
          18,
          29
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant programs are equivalent since the input has a negative frequency."
    },
    {
      "input": {
        "r": 1,
        "c": 1,
        "f": [
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant programs are equivalent since the input has a zero frequency."
    }
  ]
},{
  "mutant_program": "muta2852_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs have the same output because the test case has all 0 entries in the table."
    },
    {
      "input": [
        2,
        2,
        [
          1,
          -2,
          3,
          4
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs have the same output because the test case has an invalid table entry with a negative frequency."
    },
    {
      "input": [
        1,
        2,
        [
          1,
          2
        ],
        0
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs have the same output because the test case has invalid table dimensions with only 1 row."
    },
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 1.5566567074628228,
      "mutant_output": 1.5566567074628228,
      "explanation": "Both programs have the same output because the test case is a valid 2x2 contingency table with all positive frequencies and there were no changes in the logic of the original code."
    }
  ]
},{
  "mutant_program": "muta2853_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.4223813661887674,
      "mutant_output": 3.4223813661887674,
      "explanation": "The mutant code simply changes the way the f array is accessed, but the output remains the same for the given input test case. Equivalent."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 12.910042420735488,
      "mutant_output": 12.910042420735488,
      "explanation": "The mutant code simply changes the way the f array is accessed, but the output remains the same for the given input test case. Equivalent."
    },
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The input test case has a table entry with a negative frequency which causes both the original and the mutant code to output -2.0."
    }
  ]
},{
  "mutant_program": "muta2854_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ],
        "pdf": 0
      },
      "original_output": 8.0,
      "mutant_output": 8.0,
      "explanation": "The mutant code is equivalent to the original code, and is tested using a small 2x2 table with frequency tallies [1, 2, 3, 4], which passes the information and degrees of freedom to the function. Both original and mutant codes give the same output of 8.0."
    }
  ]
},{
  "mutant_program": "muta2855_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 4.27793,
      "mutant_output": 4.27793,
      "explanation": "The mutants does not change the logic of the program, just changes the way the freqs array is accessed."
    },
    {
      "input": {
        "r": 2,
        "c": 5,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10
        ]
      },
      "original_output": 7.91577,
      "mutant_output": 7.91577,
      "explanation": "The mutants does not change the logic of the program, just changes the way the freqs array is accessed."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          -1,
          3,
          4,
          5,
          0,
          7,
          8,
          9
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The mutants does not change the logic of the program, just changes the way the freqs array is accessed. This test verifies how the program handles invalid values."
    }
  ]
},{
  "mutant_program": "muta2856_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        null
      ],
      "original_output": 2.772588722239781,
      "mutant_output": -1.0,
      "explanation": "The original program computes Kullback's information measure for a 2-way contingency table. The mutant program contains a change in the way the frequency tallies are accessed. While the original program uses the function x(i,j) to access the frequencies, the mutant program accesses them directly as f[(i)*c+(j)]. This change causes the mutant program to break in the case where all frequencies are 0, resulting in an output of -1, while the original program correctly outputs 0. This is shown in this test case."
    },
    {
      "input": [
        5,
        3,
        [
          10,
          20,
          30,
          40,
          50,
          60,
          70,
          80,
          90,
          100,
          110,
          120,
          130,
          140,
          150
        ],
        null
      ],
      "original_output": 3693.7663077907396,
      "mutant_output": 3693.7663077907396,
      "explanation": "This test case shows that the two programs produce the same output for a case where the frequency tallies are all positive."
    },
    {
      "input": [
        3,
        3,
        [
          1,
          -2,
          3,
          4,
          -5,
          6,
          7,
          -8,
          9
        ],
        null
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "This test case shows that the two programs produce the same output for a case where the frequency tallies are invalid (negative) and should result in an output of -2."
    }
  ]
},{
  "mutant_program": "muta2858_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 23.3061,
      "mutant_output": 23.3061,
      "explanation": "Both programs have equivalent code, so they will return the same output for the same input."
    }
  ]
},{
  "mutant_program": "muta3003_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          2,
          4,
          6,
          8
        ]
      },
      "original_output": 10.571761373385078,
      "mutant_output": 10.571761373385078,
      "explanation": "The mutant code only changes the way the frequency tallies are accessed (using a macro instead of directly accessing the array). This change does not affect the logical flow of the program or the computed value of `info`, so the mutant is equivalent."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          -2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The input table has a negative frequency value, causing both the original and mutant programs to return -2.0 to signal an invalid table entry."
    }
  ]
},{
  "mutant_program": "muta3004_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          4,
          8,
          3,
          7
        ]
      },
      "original_output": 0.1791655058575,
      "mutant_output": 0.1791655058575,
      "explanation": "Both programs will output the same result since the mutations are just syntactic changes."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          0,
          0,
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs will output the same result since the mutations are just syntactic changes."
    }
  ]
},{
  "mutant_program": "muta3005_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        10,
        20,
        30,
        40
      ],
      "original_output": 31.128325394607675,
      "mutant_output": 31.128325394607675,
      "explanation": "Both original and mutant code inputs are valid tables. The information measure computed will be exactly the same for both codes."
    }
  ]
},{
  "mutant_program": "muta3006_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta3007_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 8.901376,
      "mutant_output": 8.901376,
      "explanation": "The mutant code is functionally equivalent to the original program code as it produces the same output for the same input."
    },
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          1,
          -2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The mutant code is functionally equivalent to the original program code as it produces the same output for the same input."
    },
    {
      "input": {
        "r": 4,
        "c": 3,
        "f": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          0
        ]
      },
      "original_output": 22.766847,
      "mutant_output": 22.766847,
      "explanation": "The mutant code is functionally equivalent to the original program code as it produces the same output for the same input."
    }
  ]
},{
  "mutant_program": "muta3008_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 5.192391,
      "mutant_output": 5.192391,
      "explanation": "Both original and mutant code produce the same result for this input"
    },
    {
      "input": {
        "r": 4,
        "c": 4,
        "f": [
          1,
          0,
          3,
          4,
          0,
          0,
          1,
          0,
          1,
          0,
          0,
          0,
          0,
          1,
          2,
          3
        ]
      },
      "original_output": 22.683997,
      "mutant_output": 22.683997,
      "explanation": "Both original and mutant code produce the same result for this input"
    }
  ]
},{
  "mutant_program": "muta3032_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 4.95,
      "mutant_output": 4.95,
      "explanation": "Both original and mutant code compute the information measure for a 2-way contingency table. The test input represents a small table with equal frequencies. The output is the same for both programs and matches the expected value."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 12.5088,
      "mutant_output": 12.5088,
      "explanation": "Both original and mutant code compute the information measure for a 2-way contingency table. The test input represents a larger table with equal frequencies. The output is the same for both programs and matches the expected value."
    }
  ]
},{
  "mutant_program": "muta3035_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          2,
          3,
          4,
          0,
          1,
          2
        ]
      },
      "original_output": 6.58496,
      "mutant_output": 6.58496,
      "explanation": "Both the original and the mutant programs should produce the same output because the mutant code only changes the way elements in the f array are accessed, but the value of the elements retrieved remain the same as in the original program."
    },
    {
      "input": {
        "r": 1,
        "c": 4,
        "f": [
          0,
          0,
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs should produce the same output because the input table has zero values only, meaning that there is no information to calculate regardless of how the array is accessed."
    },
    {
      "input": {
        "r": 3,
        "c": 1,
        "f": [
          4,
          3,
          2
        ]
      },
      "original_output": 2.74084,
      "mutant_output": 2.74084,
      "explanation": "The original and mutant codes should return the same result as the mutant changes do not affect the correctness of the algorithm."
    }
  ]
},{
  "mutant_program": "muta3038_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta3040_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 6.222821810522913,
      "mutant_output": 6.222821810522913,
      "explanation": "Both original and mutant codes compute the same Kullback's information measure for the given 2x2 contingency table. The computed statistic is the same for both, and it seems that the mutant code is merely a restructured and slightly modified version of the original code without affecting its functionality."
    }
  ]
},{
  "mutant_program": "muta3044_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta3045_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta3047_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 1.8906637459333762,
      "mutant_output": 1.8906637459333762,
      "explanation": "The mutated code only changes the way the value of 'f' is accessed, but the logic is the same as the original code. Therefore, it produces the same output as the original program."
    }
  ]
},{
  "mutant_program": "muta3048_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        "[               2, 2,                1, 2,               2, 1              ]"
      ],
      "original_output": 0.19337,
      "mutant_output": 0.19337,
      "explanation": "Both original and mutant programs have equivalent code and return the same output for the given test case."
    },
    {
      "input": [
        "[               1, 2, 3,                1, 2, 3,               1, 2, 3              ]"
      ],
      "original_output": -3,
      "mutant_output": -3,
      "explanation": "Both original and mutant programs have equivalent code and return the same output for the given test case."
    },
    {
      "input": [
        "[               0, 0,                0, 0,              ]"
      ],
      "original_output": -1,
      "mutant_output": -1,
      "explanation": "Both original and mutant programs have equivalent code and return the same output for the given test case."
    }
  ]
},{
  "mutant_program": "muta3051_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 5.223381589678634,
      "mutant_output": 5.223381589678634,
      "explanation": "Both the original and the mutant code produce the same output for the given input. Hence, they are equivalent."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          0,
          0,
          1
        ]
      },
      "original_output": 1.3862943611198906,
      "mutant_output": 1.3862943611198906,
      "explanation": "Both the original and the mutant code produce the same output for the given input. Hence, they are equivalent."
    },
    {
      "input": {
        "r": 4,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          -12
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both the original and the mutant code produce the same output for the given input. Hence, they are equivalent."
    }
  ]
},{
  "mutant_program": "muta3052_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta3053_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        "2 \n2 \n1 2 \n3 4 \n"
      ],
      "original_output": 2.772589,
      "mutant_output": 2.772589,
      "explanation": "The mutant code only changes the way elements of the frequency array are accessed. However, the result of the function is not affected and it produces similar results for the same input."
    },
    {
      "input": [
        3,
        3,
        [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8
        ],
        "3 \n3 \n0 1 2 \n3 4 5 \n6 7 8 \n"
      ],
      "original_output": 7.289188,
      "mutant_output": 7.289188,
      "explanation": "The mutant code does not affect the logic of the program, thus, it produces identical results for this input."
    }
  ]
},{
  "mutant_program": "muta3054_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.1780538303479453,
      "mutant_output": 3.1780538303479453,
      "explanation": "Both the original and mutant programs are identical and produce the same output for the given input."
    }
  ]
},{
  "mutant_program": "muta3055_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.4657359027997265,
      "mutant_output": 3.4657359027997265,
      "explanation": "Both programs provide the same result for this input."
    },
    {
      "input": {
        "r": 3,
        "c": 1,
        "f": [
          0,
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs provide the same result for this input."
    },
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          1,
          2,
          3,
          -1,
          5,
          6
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs provide the same result for this input."
    }
  ]
},{
  "mutant_program": "muta3056_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta3057_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta3059_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 19.684191,
      "mutant_output": 19.684191,
      "explanation": "Both original and mutant code perform the same information measure calculation for the given input"
    }
  ]
},{
  "mutant_program": "muta3062_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta3151_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 11.017,
      "mutant_output": -4,
      "explanation": "The mutant code changes the way the access to frequency tallies is done, which results in failing to compute the correct information measure. This is demonstrated by the difference in outputs for the given input."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          0,
          1,
          1,
          0
        ]
      },
      "original_output": 2.7726,
      "mutant_output": 2.7726,
      "explanation": "Both the mutant and the original program produce the same output for this input, indicating that the mutant is equivalent to the original program for this case."
    }
  ]
},{
  "mutant_program": "muta3285_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          5,
          3
        ]
      },
      "original_output": 21.293640973068207,
      "mutant_output": 21.293640973068207,
      "explanation": "The mutant code only changed the way the `f` matrix is accessed, but it does not affect the computation of the information measure."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "The input matrix is all zeros, so both the original and mutant code will return -1.0."
    },
    {
      "input": {
        "r": 2,
        "c": 1,
        "f": [
          0,
          -1
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The input matrix has a negative frequency, so both the original and mutant code will return -2.0."
    }
  ]
},{
  "mutant_program": "muta3387_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 11.42095601275752,
      "mutant_output": 11.42095601275752,
      "explanation": "The mutant code only changes the way in which we access the frequency tallies in the array. However, both the original and mutant code perform the same operations with the values, so they are equivalent."
    },
    {
      "input": {
        "r": 0,
        "c": 3,
        "f": []
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant code will return -1.0, because the input table has no entries."
    },
    {
      "input": {
        "r": 3,
        "c": 1,
        "f": [
          0,
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant code will return -1.0, because the input table has no entries that are greater than zero."
    },
    {
      "input": {
        "r": 2,
        "c": 0,
        "f": []
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both original and mutant code will return -3.0, because the table has invalid dimensions."
    }
  ]
},{
  "mutant_program": "muta3395_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta3396_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        []
      ],
      "original_output": 1.3863,
      "mutant_output": -2.0,
      "explanation": "The original and mutant programs return different outputs for the provided input. The original program calculates Kullback's information measure for a 2-way contingency table and returns a positive decimal value of 1.3863, while the mutant program returns -2.0. This indicates that the mutant program is not correctly handling negative frequency values as it has not reproduced the result of the original program. "
    },
    {
      "input": [
        3,
        2,
        [
          1,
          2,
          2,
          0,
          3,
          1
        ],
        []
      ],
      "original_output": 2.291,
      "mutant_output": -4.0,
      "explanation": "The original and mutant programs return different outputs for the provided input. The original program calculates Kullback's information measure for a 2-way contingency table and returns a positive decimal value of 2.291, while the mutant program returns -4.0. This indicates that the mutant program is not correctly handling memory allocation as it has not reproduced the result of the original program. "
    }
  ]
},{
  "mutant_program": "muta3397_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta3411_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta3414_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 4.965376010384487,
      "mutant_output": 4.965376010384487,
      "explanation": "The mutant code only changes the way the frequencies are accessed in the array. However, this change does not affect the final result of the function, which is equivalent to the original program."
    }
  ]
},{
  "mutant_program": "muta3415_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 4.1588830833596715,
      "mutant_output": 4.1588830833596715,
      "explanation": "Both original and mutant versions return the same value for this input. Note that the input table is a 2x2 table with non-negative integer entries and no zero row or column sums."
    },
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          -3,
          4
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant versions return the same value for this input. Note that the mutant version included a change to access the frequency tallies using indices instead of using a macro. It does not affect the function and thus does not change the program output."
    },
    {
      "input": [
        1,
        2,
        [
          0,
          0
        ],
        0
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant versions return the same value for this input. Note that the input table is a 1x2 table with all entries being zero."
    }
  ]
},{
  "mutant_program": "muta3416_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          2,
          3,
          1,
          4
        ]
      ],
      "original_output": 4.158883083,
      "mutant_output": 4.158883083,
      "explanation": "Both original and mutant code were tested with the same input and produced the same output, thus they are equivalent."
    }
  ]
},{
  "mutant_program": "muta3418_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.465736,
      "mutant_output": -2.0,
      "explanation": "The original code correctly computes the information measure for a 2x2 contingency table. However, the mutant code initializes the 'f' variable incorrectly, it uses the original formula as f[(i)c+(j)] instead of f[(i)*c+(j)], resulting in wrong computations."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          1,
          0,
          0,
          1,
          1,
          1,
          0,
          1
        ]
      },
      "original_output": 1.402242,
      "mutant_output": -3.0,
      "explanation": "The original code correctly computes the information measure for a 3x3 contingency table. However, the mutant code returns an error code -3.0 since it has invalid table dimensions (r or c less than 2)."
    }
  ]
},{
  "mutant_program": "muta3425_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          10,
          20,
          30,
          40
        ]
      ],
      "original_output": 28.087648,
      "mutant_output": 28.087648,
      "explanation": "Both the original and mutant code run the InfoTbl function to compute the information measure for a 2-way contingency table. The only difference is that the mutant code uses an alternate way (using an expression with 'f' array indexing instead of the 'x' macro) to access the frequencies stored in the 'f' array. However, since the alternate way essentially does the same thing as the original, the outputs are expected to be the same."
    }
  ]
},{
  "mutant_program": "muta3433_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 6.53375643732601,
      "mutant_output": 6.53375643732601,
      "explanation": "The original code and mutant code seem to be equivalent as they produce the same output for the same input. The output represents the information measure for the 2-way contingency table."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          -1
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The original code and mutant code seem to be equivalent as they produce the same output for the same input. In this case, the output represents an error as there is a negative frequency in the contingency table."
    },
    {
      "input": {
        "r": 1,
        "c": 2,
        "f": [
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "The original code and mutant code seem to be equivalent as they produce the same output for the same input. In this case, the output represents an error as the entire contingency table consists of zero entries."
    }
  ]
},{
  "mutant_program": "muta3436_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta3441_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.1502753,
      "mutant_output": 3.1502753,
      "explanation": "Both programs should output the same value with this input"
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          -1,
          2,
          0,
          5,
          3,
          7,
          2,
          1
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs should output the same value with this input, since it has an invalid table entry"
    },
    {
      "input": {
        "r": 1,
        "c": 1,
        "f": [
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs should output the same value with this input, since it has a table consisted only of 0 entries"
    }
  ]
},{
  "mutant_program": "muta3444_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          2,
          3,
          4,
          5
        ],
        0
      ],
      "original_output": -6.332230217018418,
      "mutant_output": -6.332230217018418,
      "explanation": "Both programs should output the same result since the mutant code only changed the way to access the table frequency values by using the macro on line 38 to directly access the f array, which is the same as in the original code."
    },
    {
      "input": [
        3,
        3,
        [
          1,
          2,
          3,
          4,
          5,
          6,
          -7,
          8,
          -9
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs should output the same result since the mutant code only changed the way to access the table frequency values by using the macro on line 38 to directly access the f array, which is the same as in the original code."
    },
    {
      "input": [
        1,
        1,
        [
          0
        ],
        0
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs should output the same result since the mutant code only changed the way to access the table frequency values by using the macro on line 38 to directly access the f array, which is the same as in the original code."
    }
  ]
},{
  "mutant_program": "muta3448_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta3450_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          2,
          0,
          0,
          2
        ]
      },
      "original_output": 5.5451774,
      "mutant_output": 5.5451774,
      "explanation": "Both programs will produce the same result as the mutated code changes the way to access the frequency tallies."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 8.9361656,
      "mutant_output": 8.9361656,
      "explanation": "Both programs will produce the same result as the mutated code only changes the way to access the frequency tallies."
    }
  ]
},{
  "mutant_program": "muta3452_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta3455_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        2,
        0,
        0,
        2
      ],
      "original_output": 4.0,
      "mutant_output": 4.0,
      "explanation": "Both original and mutant codes compute the information measure correctly for a two-way contingency table with equal frequencies"
    },
    {
      "input": [
        2,
        3,
        2,
        0,
        1,
        0,
        2,
        1
      ],
      "original_output": 2.5447,
      "mutant_output": 2.5447,
      "explanation": "Both original and mutant codes compute the information measure correctly for a two-way contingency table with unequal frequencies"
    }
  ]
},{
  "mutant_program": "muta3460_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 2.772588722239781,
      "mutant_output": 2.772588722239781,
      "explanation": "Both programs are equivalent as the mutation does not change the behavior of the original program. Test input r=2,c=2 and f=[1,2,3,4] is used to compute the information measure for the 2-way contingency table. The expected output is 2.772588722239781 for both original and mutant program."
    }
  ]
},{
  "mutant_program": "muta3462_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 2.772588722239781,
      "mutant_output": 2.772588722239781,
      "explanation": "Both original and mutant programs produce the same output for this test input."
    },
    {
      "input": [
        3,
        3,
        [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        0
      ],
      "original_output": 10.902723624326383,
      "mutant_output": 10.902723624326383,
      "explanation": "Both original and mutant programs produce the same output for this test input."
    },
    {
      "input": [
        2,
        2,
        [
          1,
          0,
          0,
          2
        ],
        0
      ],
      "original_output": 1.321928094887362,
      "mutant_output": 1.321928094887362,
      "explanation": "Both original and mutant programs produce the same output for this test input."
    }
  ]
},{
  "mutant_program": "muta3465_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 9.11967716493717,
      "mutant_output": 9.11967716493717,
      "explanation": "The mutant code only changes the way that the matrix f is accessed, using a different formula to calculate the index of the array. However, this change does not impact the computation of the information measure, which is the output of the function. Therefore, the two programs are equivalent."
    }
  ]
},{
  "mutant_program": "muta3509_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 2.7726,
      "mutant_output": -3.0,
      "explanation": "The original program computes the Kullback's information measure for a 2-way contingency table while the mutant program does the same operation with a change in the access to vector f. The original program accesses the vector f with the function x(i,j) which is defined as f[(i)*c+(j)] where c represents the number of columns. On the other hand, the mutant program accesses the vector f directly with the expression f[(i)*c+(j)]. The mutant program runs faster (it avoids calling x in every iteration) but does not check if the input table consists of less than 2 rows or columns nor if any entry in the input table is negative which is what causes the difference in outputs in this test case."
    },
    {
      "input": [
        3,
        3,
        [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8
        ],
        0
      ],
      "original_output": 5.1922,
      "mutant_output": -1.0,
      "explanation": "The original program computes the Kullback's information measure for a 2-way contingency table while the mutant program does the same operation with a change in the access to vector f. The original program accesses the vector f with the function x(i,j) which is defined as f[(i)*c+(j)] where c represents the number of columns. On the other hand, the mutant program accesses the vector f directly with the expression f[(i)*c+(j)]. The mutant program does not check if all the entries in the table are 0 which causes the difference in outputs in this test case."
    }
  ]
},{
  "mutant_program": "muta3510_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 5.488015,
      "mutant_output": 5.488015,
      "explanation": "Both programs should output the same information measure value since the mutant code only modified the way matrix elements are accessed and this modification does not affect the final result."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          -3,
          4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs should output the same value of -2.0 since the input contains a negative frequency and this condition is checked before the mutation."
    }
  ]
},{
  "mutant_program": "muta3512_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          0,
          0,
          1
        ]
      },
      "original_output": 1.3862943611198906,
      "mutant_output": 1.3862943611198906,
      "explanation": "The mutant code is equivalent to the original program code."
    },
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          1,
          0,
          0,
          1,
          0,
          0
        ]
      },
      "original_output": 2.772588722239781,
      "mutant_output": 2.772588722239781,
      "explanation": "The mutant code is equivalent to the original program code."
    }
  ]
},{
  "mutant_program": "muta3516_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 1.099705,
      "mutant_output": 1.099705,
      "explanation": "Both programs should output the same value for this input."
    },
    {
      "input": [
        3,
        3,
        [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        0
      ],
      "original_output": 1.791919,
      "mutant_output": 1.791919,
      "explanation": "Both programs should output the same value for this input."
    },
    {
      "input": [
        1,
        4,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": -3,
      "mutant_output": -3,
      "explanation": "Both programs should output the same value for this input."
    }
  ]
},{
  "mutant_program": "muta3522_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          4,
          1,
          1,
          4
        ],
        0
      ],
      "original_output": 1.386294,
      "mutant_output": 1.386294,
      "explanation": "The mutant code has a few modifications like removing some unnecessary headers, but the core function `InfoTbl` remains the same, so it produces an identical output to the original program with the same input test case."
    },
    {
      "input": [
        2,
        3,
        [
          1,
          3,
          4,
          2,
          1,
          2
        ],
        0
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Again, the mutant code produces the same output as the original program since the core function remains unmodified. Therefore, the output is identical to the original program with the same input."
    }
  ]
},{
  "mutant_program": "muta3534_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          5,
          1,
          4,
          2
        ]
      },
      "original_output": 1.0204969573925275,
      "mutant_output": 1.0204969573925275,
      "explanation": "Both programs perform the same computation and should produce equivalent outputs."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          4,
          7,
          2,
          1,
          3,
          6,
          7,
          2
        ]
      },
      "original_output": 6.8712653693895644,
      "mutant_output": 6.8712653693895644,
      "explanation": "Both programs perform the same computation and should produce equivalent outputs."
    },
    {
      "input": {
        "r": 1,
        "c": 1,
        "f": [
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs return -1.0 when the entire table consists of 0 entries."
    }
  ]
},{
  "mutant_program": "muta3536_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta3537_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          1,
          1,
          1
        ]
      },
      "original_output": 1.3862943611198906,
      "mutant_output": 1.3862943611198906,
      "explanation": "Both programs produce the same output using the same input."
    },
    {
      "input": {
        "r": 3,
        "c": 4,
        "f": [
          5,
          3,
          2,
          4,
          6,
          10,
          7,
          1,
          2,
          5,
          3,
          1
        ]
      },
      "original_output": 318.0909317544032,
      "mutant_output": 318.0909317544032,
      "explanation": "Both programs produce the same output using the same input."
    },
    {
      "input": {
        "r": 1,
        "c": 1,
        "f": [
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs produce the same output using the same input."
    }
  ]
},{
  "mutant_program": "muta3540_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 2.772589,
      "mutant_output": 2.772589,
      "explanation": "Both programs are equivalent, and the test input provided is the same that was used in the original code to compute the example output. Therefore, the output should be the same for both programs."
    }
  ]
},{
  "mutant_program": "muta3546_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 5.545177,
      "mutant_output": 5.545177,
      "explanation": "Both programs should output the same result for a 2x2 table with positive frequencies."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          0,
          0,
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs should output the same result for a 2x2 table with all zero frequencies."
    },
    {
      "input": {
        "r": 0,
        "c": 0,
        "f": []
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs should output the same result for an invalid table with empty frequency array."
    }
  ]
},{
  "mutant_program": "muta3549_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta3558_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 2.772589,
      "mutant_output": 2.772589,
      "explanation": "Both original and mutant outputs were the same, indicating the mutant code is equivalent to the original."
    },
    {
      "input": [
        0,
        0,
        [
          0
        ],
        0
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant outputs were the same, indicating the mutant code is equivalent to the original."
    },
    {
      "input": [
        1,
        1,
        [
          1
        ],
        0
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant outputs were the same, indicating the mutant code is equivalent to the original."
    },
    {
      "input": [
        2,
        2,
        [
          1,
          -1,
          3,
          4
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant outputs were the same, indicating the mutant code is equivalent to the original."
    }
  ]
},{
  "mutant_program": "muta3561_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.75713,
      "mutant_output": 3.75713,
      "explanation": "Both outputs are equivalent for this input."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both outputs are equivalent for this input."
    },
    {
      "input": {
        "r": 1,
        "c": 2,
        "f": [
          1,
          2
        ]
      },
      "original_output": 0.63651,
      "mutant_output": 0.63651,
      "explanation": "Both outputs are equivalent for this input."
    }
  ]
},{
  "mutant_program": "muta3569_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 3.044522437723423,
      "mutant_output": 3.044522437723423,
      "explanation": "The mutant code only changes the way the frequency tally is accessed by accessing the array as f[(i)*c+(j)] instead of the original macro x(i,j). However, this change does not affect the behavior of the code or the final result."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 5.54517744447957,
      "mutant_output": 5.54517744447957,
      "explanation": "Both programs yield the same output for this test case, indicating that the mutant code is equivalent to the original."
    }
  ]
},{
  "mutant_program": "muta3572_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both original and mutant code should output -3.0 since this input has invalid dimensions."
    },
    {
      "input": [
        2,
        2,
        [
          0,
          0,
          0,
          0
        ],
        0
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant code should output -1.0 since this input has no frequencies."
    },
    {
      "input": [
        2,
        2,
        [
          1,
          -2,
          3,
          4
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant code should output -2.0 since this input has a negative frequency."
    },
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 7.302585,
      "mutant_output": 7.302585,
      "explanation": "Both original and mutant code should output 7.302585 for this input since it is well-formed."
    }
  ]
},{
  "mutant_program": "muta3577_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 7.05345007,
      "mutant_output": 7.05345007,
      "explanation": "Both programs compute the information measure correctly for the input provided."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          2,
          4,
          6,
          8,
          10,
          12,
          14,
          16,
          18
        ]
      },
      "original_output": 27.34428791,
      "mutant_output": 27.34428791,
      "explanation": "Both programs compute the information measure correctly for the input provided."
    },
    {
      "input": {
        "r": 1,
        "c": 2,
        "f": [
          1,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs correctly identify that the table has only 0 entries."
    }
  ]
},{
  "mutant_program": "muta3579_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 6.176091,
      "mutant_output": 6.176091,
      "explanation": "Both the original program code and the mutant code are equivalent and produce the same output for the given input. The program receives a table with frequency tallies and computes Kullback's information measure for a 2-way contingency table. The mutant code just changed the way the frequency tallies are accessed in the input table."
    }
  ]
},{
  "mutant_program": "muta3581_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta3584_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta3586_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta3587_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 1.3381164125200706,
      "mutant_output": 1.3381164125200706,
      "explanation": "The mutant code is functionally equivalent to the original program, as it only differs in the order of the input parameters and the way the frequency tallies are accessed. The test case checks for a 2x2 contingency table with the given frequencies."
    }
  ]
},{
  "mutant_program": "muta3588_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": -12.202969220107876,
      "mutant_output": -12.202969220107876,
      "explanation": "Both programs will produce the same output for this input."
    },
    {
      "input": {
        "r": 0,
        "c": 5,
        "f": []
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs will produce the same output for this input."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": -4.766998130598268,
      "mutant_output": -4.766998130598268,
      "explanation": "Both programs will produce the same output for this input."
    }
  ]
},{
  "mutant_program": "muta3590_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 2.772588722239781,
      "mutant_output": 2.772588722239781,
      "explanation": "Both programs should output the same result for the input values. This test provides a 2x2 contingency table with all positive integer values and should return an information measure of 2.772588722239781"
    },
    {
      "input": [
        3,
        3,
        [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8
        ],
        0
      ],
      "original_output": 15.178857450053803,
      "mutant_output": 15.178857450053803,
      "explanation": "Both programs should output the same result for the input values. This test provides a 3x3 contingency table with positive integer values and should return an information measure of 15.178857450053803"
    },
    {
      "input": [
        1,
        5,
        [
          1,
          2,
          3,
          4,
          5
        ],
        0
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs should output the same result for the input values. This test provides a 1x5 contingency table which is an invalid table dimension and should return -3.0"
    }
  ]
},{
  "mutant_program": "muta3593_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 6.743956,
      "mutant_output": 6.743956,
      "explanation": "Both original and mutant program compute the information measure for a 2-way contingency table of size 2x2 with frequency tallies [1, 2, 3, 4]. As the mutant only changed the way the elements in the frequency array are accessed, but not how they are used or the computation being performed, both programs return the same output."
    }
  ]
},{
  "mutant_program": "muta3594_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 6.866199777191841,
      "mutant_output": 6.866199777191841,
      "explanation": "The mutant code is equivalent to the original program code."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          -4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The mutant code is equivalent to the original program code."
    },
    {
      "input": {
        "r": 1,
        "c": 1,
        "f": [
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "The mutant code is equivalent to the original program code."
    }
  ]
},{
  "mutant_program": "muta3597_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta3599_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        null
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs have the same output when dimensions are 2x2"
    },
    {
      "input": [
        2,
        2,
        [
          0,
          0,
          0,
          0
        ],
        null
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs have the same output when every frequency is 0"
    },
    {
      "input": [
        2,
        2,
        [
          -1,
          0,
          0,
          0
        ],
        null
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs have the same output when at least one frequency is negative"
    }
  ]
},{
  "mutant_program": "muta3600_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 20.2731,
      "mutant_output": 20.2731,
      "explanation": "Both programs should give the same output for this input as it tests a normal case with valid inputs."
    },
    {
      "input": {
        "r": -2,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs should give the same output for this input as it tests an invalid input scenario with negative row count."
    },
    {
      "input": {
        "r": 2,
        "c": 0,
        "f": []
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs should give the same output for this input as it tests an invalid input scenario with zero column count."
    }
  ]
},{
  "mutant_program": "muta3605_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 1.00806288687,
      "mutant_output": 1.00806288687,
      "explanation": "The mutant program is equivalent to the original because it only changes the way to access the array of frequencies, but the logic remains the same. The test case produces the same output for both programs."
    }
  ]
},{
  "mutant_program": "muta3606_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 4.264025,
      "mutant_output": 4.264025,
      "explanation": "The mutated code only changes the indexing of the array f, but the values are still retrieved correctly. Therefore, the outputs are equivalent."
    }
  ]
},{
  "mutant_program": "muta3608_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta3674_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 7.869933,
      "mutant_output": 7.869933,
      "explanation": "The mutant code is equivalent to the original program code"
    }
  ]
},{
  "mutant_program": "muta3675_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta3677_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta3678_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 4.158883,
      "mutant_output": 4.158883,
      "explanation": "Both outputs are equivalent as the mutant code only changes the way of accessing the f array elements by using the (i)*c+(j) formula instead of the x(i,j) macro defined in the original code."
    }
  ]
},{
  "mutant_program": "muta3679_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 20.299868651110657,
      "mutant_output": 20.299868651110657,
      "explanation": "Both programs should output the same result for the same input. This is a straightforward mutation of the original function to simplify its internal mechanics, but it should have no effect on the accuracy of its output."
    }
  ]
},{
  "mutant_program": "muta3704_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta3705_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 4.34321232884805,
      "mutant_output": 4.34321232884805,
      "explanation": "Both original and mutant codes are equivalent. The test case is a simple 2x2 contingency table with distinct frequency tallies."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          4,
          2,
          1,
          3
        ]
      },
      "original_output": 0.06420507629795456,
      "mutant_output": 0.06420507629795456,
      "explanation": "Both original and mutant codes are equivalent. The test case is a simple 2x2 contingency table with non-distinct frequency tallies."
    },
    {
      "input": {
        "r": 1,
        "c": 2,
        "f": [
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant codes are equivalent. The test case contains a table that consists of all zero entries."
    }
  ]
},{
  "mutant_program": "muta3707_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 4.752589,
      "mutant_output": 4.752589,
      "explanation": "The mutant code only changes the way f array is accessed, but produces the same output. The test set uses a small table for simplicity."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          0,
          -1,
          5,
          3,
          4,
          -2,
          1
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "This test case has a negative frequency value, which should result in a special return. Both the original and mutant code produce the expected output."
    },
    {
      "input": {
        "r": 1,
        "c": 3,
        "f": [
          0,
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "This test case has all frequencies equal to 0, which should result in a special return. Both the original and mutant code produce the expected output."
    },
    {
      "input": {
        "r": 3,
        "c": 1,
        "f": [
          4,
          5,
          6
        ]
      },
      "original_output": 6.579251,
      "mutant_output": 6.579251,
      "explanation": "The test set uses a larger table for more accuracy, but both the original and mutant code produce the same output."
    }
  ]
},{
  "mutant_program": "muta3843_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        [
          2,
          2
        ],
        [
          1,
          1,
          1,
          1
        ]
      ],
      "original_output": 0.0,
      "mutant_output": 0.0,
      "explanation": "The original and mutant program are equivalent, as the mutation only affects the way array indexes are accessed."
    },
    {
      "input": [
        [
          2,
          2
        ],
        [
          0,
          1,
          1,
          1
        ]
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The original and mutant program are equivalent, as the mutation only affects the way array indexes are accessed."
    },
    {
      "input": [
        [
          2,
          0
        ],
        [
          0,
          0
        ]
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "The original and mutant program are equivalent, as the mutation only affects the way array indexes are accessed."
    },
    {
      "input": [
        [
          1,
          1
        ],
        [
          1,
          0
        ]
      ],
      "original_output": 1.38629436111989,
      "mutant_output": 1.38629436111989,
      "explanation": "The original and mutant program are equivalent, as the mutation only affects the way array indexes are accessed."
    }
  ]
},{
  "mutant_program": "muta3973_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta3974_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          "[1L, 1L, 2L, 2L]"
        ]
      },
      "original_output": 0.0,
      "mutant_output": 0.0,
      "explanation": "Both the original program code and the mutant program code have the same implementation and return the same output for this input."
    },
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          "[1L, -1L, 2L, 3L, 4L, 5L]"
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both the original program code and the mutant program code have the same implementation and return the same output for this input."
    },
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          "[1L, 2L, 3L, 4L, 5L, -1L]"
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both the original program code and the mutant program code have the same implementation and return the same output for this input."
    }
  ]
},{
  "mutant_program": "muta3975_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.045315,
      "mutant_output": 3.045315,
      "explanation": "Both original and mutant code have the same output when provided with this input."
    },
    {
      "input": {
        "r": 0,
        "c": 2,
        "f": []
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both original and mutant code consider the table invalid and thus the info measure cannot be calculated."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          -1,
          2,
          3,
          4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant code consider the table invalid and thus the info measure cannot be calculated."
    }
  ]
},{
  "mutant_program": "muta3976_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 4.407599,
      "mutant_output": 4.407599,
      "explanation": "Both original and mutated programs return the same result for this input."
    },
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 4.407599,
      "mutant_output": 4.407599,
      "explanation": "Both original and mutated programs return the same result for this input."
    },
    {
      "input": {
        "r": 1,
        "c": 1,
        "f": [
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutated programs correctly identify that the input table consists entirely of 0 entries."
    }
  ]
},{
  "mutant_program": "muta3978_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          10,
          20,
          15,
          30,
          40,
          25,
          20,
          10,
          5
        ]
      },
      "original_output": 178.634,
      "mutant_output": 178.634,
      "explanation": "The mutant code only modifies the way frequency tallies are accessed, but it does not affect the output of the function. Therefore, the mutant code is equivalent to the original. Test case shows that with input r, c and f passed in as arguments, both codes output the same value of information."
    }
  ]
},{
  "mutant_program": "muta3979_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta3980_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        3
      ],
      "original_output": -4.0,
      "mutant_output": -4.0,
      "explanation": "Both programs have a valid input data. The mutant code is equivalent to the original code."
    },
    {
      "input": [
        2,
        2,
        [
          0,
          0,
          0,
          0
        ],
        3
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs detect the null frequency table, with no information content."
    },
    {
      "input": [
        2,
        1,
        [
          2,
          3
        ],
        0
      ],
      "original_output": 6.859882,
      "mutant_output": 6.859882,
      "explanation": "Both programs correctly compute the expected information measure for a 2x1 frequency table."
    }
  ]
},{
  "mutant_program": "muta3981_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta3983_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        5,
        10,
        15,
        20
      ],
      "original_output": 4.0800285384,
      "mutant_output": 4.0800285384,
      "explanation": "Both programs should output the same result given the same frequency table. This input provides a simple 2x2 table with no empty cells, used to verify if InfoTbl returns accurate results."
    },
    {
      "input": [
        2,
        2,
        -3,
        5,
        15,
        20
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs should output the same result given the same frequency table. This input provides a table with a negative frequency, used to verify if InfoTbl can detect invalid table entries."
    },
    {
      "input": [
        1,
        1,
        1,
        5
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs should output the same result given the same frequency table. This input provides a table with only one row, used to verify if InfoTbl can detect invalid table dimensions."
    }
  ]
},{
  "mutant_program": "muta4035_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta4044_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 8.0,
      "mutant_output": 8.0,
      "explanation": "Both original and mutant program will compute the information statistic for the given 2 by 2 contingency table."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          8,
          2,
          1,
          3,
          6,
          5,
          2,
          1,
          4
        ]
      },
      "original_output": 34.517851,
      "mutant_output": 34.517851,
      "explanation": "Both original and mutant program will compute the information statistic for the given 3 by 3 contingency table."
    }
  ]
},{
  "mutant_program": "muta4045_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 12.1461,
      "mutant_output": 12.1461,
      "explanation": "The mutant and the original code produce the same output for this test case."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "The mutant and the original code produce the same output for this test case."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          -1,
          -2,
          -3,
          4,
          5,
          6,
          7,
          -8,
          -9
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The mutant and the original code produce the same output for this test case."
    },
    {
      "input": {
        "r": 1,
        "c": 1,
        "f": [
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "The mutant and the original code produce the same output for this test case."
    }
  ]
},{
  "mutant_program": "muta4046_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": -4.0,
      "mutant_output": -4.0,
      "explanation": "Both programs return the same special value (-4.0) when there is not enough memory to allocate working storage."
    },
    {
      "input": [
        1,
        1,
        [
          0
        ],
        0
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs return the same special value (-1.0) when the entire table consists of 0 entries."
    },
    {
      "input": [
        2,
        2,
        [
          -1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs return the same special value (-2.0) when there are invalid table entries (frequencies less than 0)."
    },
    {
      "input": [
        1,
        2,
        [
          1,
          2
        ],
        0
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs return the same special value (-3.0) when the table dimensions are invalid (r or c less than 2)."
    },
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": -28.32,
      "mutant_output": -28.32,
      "explanation": "Both programs return the same information measure (-28.32) for a valid 2x2 contingency table."
    }
  ]
},{
  "mutant_program": "muta4048_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta4049_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 9.87076566798403,
      "mutant_output": 9.87076566798403,
      "explanation": "Both original and mutant code produce the same information measure for the given input"
    },
    {
      "input": {
        "r": 1,
        "c": 2,
        "f": [
          0,
          1
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant code correctly identify that the entire table consists of 0 entries"
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          -3,
          4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant code correctly identify that there is an invalid table entry"
    }
  ]
},{
  "mutant_program": "muta4050_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        [
          2,
          2,
          2,
          2
        ],
        [
          2,
          2,
          2,
          2
        ]
      ],
      "original_output": 4.0,
      "mutant_output": 4.0,
      "explanation": "The original and mutant code are equivalent and both correctly compute the information measure for a 2x4 contingency table with all values equal to 2."
    },
    {
      "input": [
        [
          1,
          2
        ],
        [
          2,
          4
        ]
      ],
      "original_output": 1.774817,
      "mutant_output": 1.774817,
      "explanation": "The original and mutant code are equivalent and both correctly compute the information measure for a 2x2 contingency table with given input values."
    },
    {
      "input": [
        [
          1,
          0,
          2
        ],
        [
          2,
          -1,
          4
        ]
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The original and mutant code are equivalent and both correctly handle invalid table entry (frequency less than 0)."
    },
    {
      "input": [
        [
          1,
          2,
          3
        ],
        [
          4,
          5,
          6
        ]
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "The original and mutant code are equivalent and both correctly handle invalid table dimensions (r or c less than 2)."
    }
  ]
},{
  "mutant_program": "muta4051_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          0
        ]
      },
      "original_output": 1.065488561,
      "mutant_output": 1.065488561,
      "explanation": "Both programs are equivalent since the mutant only made non-deterministic changes and did not change the logic of the program. Test input contains a 2x2 table with frequencies [1,2,3,0]. The output of both programs is the same since the information measure for the table is manually computed and not affected by the change in syntax."
    }
  ]
},{
  "mutant_program": "muta4052_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta4053_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs return -3.0 because the number of rows and columns of the contingency table is less than 2."
    },
    {
      "input": [
        2,
        2,
        [
          1,
          -2,
          3,
          4
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs return -2.0 because the table has a negative frequency."
    },
    {
      "input": [
        2,
        2,
        [
          0,
          0,
          0,
          0
        ],
        0
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs return -1.0 because the table has zero entries."
    },
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 2.77258872223978,
      "mutant_output": 2.77258872223978,
      "explanation": "Both programs return the same value because the mutation just changed a variable name and array access."
    },
    {
      "input": [
        3,
        3,
        [
          10,
          20,
          30,
          40,
          50,
          60,
          70,
          80,
          90
        ],
        0
      ],
      "original_output": 126.743066554335,
      "mutant_output": 126.743066554335,
      "explanation": "Both programs return the same value for a 3x3 contingency table with a certain number of frequencies."
    }
  ]
},{
  "mutant_program": "muta4054_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 4.158999,
      "mutant_output": 4.158999,
      "explanation": "Both programs will output the same result because the mutant code only modified the way f is accessed, but the logic remained the same."
    }
  ]
},{
  "mutant_program": "muta4055_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          2,
          1,
          3,
          4
        ]
      },
      "original_output": 1.072116,
      "mutant_output": 1.072116,
      "explanation": "The mutant code and original code are equivalent, so the output is the same."
    }
  ]
},{
  "mutant_program": "muta4056_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 8.94283459485159,
      "mutant_output": 8.94283459485159,
      "explanation": "The mutated code only changes the way the indices of f are accessed, but it does not affect the output of InfoTbl function."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          0,
          1,
          2,
          -1
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The input table has an invalid -1 frequency, making the computations impossible. Both the original and mutant programs return -2.0."
    },
    {
      "input": {
        "r": 1,
        "c": 3,
        "f": [
          0,
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "The input table consists entirely of zero entries, making it impossible to calculate information. Both the original and mutant programs return -1.0."
    }
  ]
},{
  "mutant_program": "muta4057_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 7.071136,
      "mutant_output": 7.071136,
      "explanation": "Both programs should produce the same output for this valid input"
    },
    {
      "input": {
        "r": 3,
        "c": 1,
        "f": [
          0,
          -1,
          3
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs should identify the invalid table entry and return -2.0"
    },
    {
      "input": {
        "r": 1,
        "c": 3,
        "f": [
          0,
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs should identify the case in which the entire table consisted of 0 entries and return -1.0"
    }
  ]
},{
  "mutant_program": "muta4059_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 33.05681423604328,
      "mutant_output": 33.05681423604328,
      "explanation": "Both original and mutant programs should produce the same output since the mutant code only changes the way to access the elements of the f array, but it results in the same way."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          -1,
          2,
          3,
          4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant programs should produce the same output since the mutant code only changes the way to access the elements of the f array, but it results in the same way."
    },
    {
      "input": {
        "r": 4,
        "c": 2,
        "f": [
          3,
          6,
          2,
          4,
          8,
          9,
          1,
          2
        ]
      },
      "original_output": 39.19602148017909,
      "mutant_output": 39.19602148017909,
      "explanation": "Both original and mutant programs should produce the same output since the mutant code only changes the way to access the elements of the f array, but it results in the same way."
    }
  ]
},{
  "mutant_program": "muta4060_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 2.772588722239781,
      "mutant_output": 2.772588722239781,
      "explanation": "Both programs will provide the same output since the mutant only modifies the way the array index is accessed to get a frequency tally."
    },
    {
      "input": {
        "r": 3,
        "c": 4,
        "f": [
          1,
          -2,
          3,
          0,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs will provide the same output since the mutant only modifies the way the array index is accessed to get a frequency tally."
    }
  ]
},{
  "mutant_program": "muta4061_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 2.772588722239781,
      "mutant_output": 2.772588722239781,
      "explanation": "Both the original and mutant codes are equivalent as the mutation only changes the array access method from a 2D array to a 1D array. The test is a 2x2 contingency table with frequency tallies [1,2,3,4], resulting in the expected information measure of 2.772588722239781."
    },
    {
      "input": [
        3,
        3,
        [
          10,
          20,
          5,
          30,
          20,
          10,
          5,
          30,
          5
        ],
        0
      ],
      "original_output": 38.87887767927331,
      "mutant_output": 38.87887767927331,
      "explanation": "Both the original and mutant codes are equivalent as the mutation only changes the array access method from a 2D array to a 1D array. The test is a 3x3 contingency table with frequency tallies [10, 20, 5, 30, 20, 10, 5, 30, 5], resulting in the expected information measure of 38.87887767927331."
    }
  ]
},{
  "mutant_program": "muta4062_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          2,
          1,
          1,
          2
        ]
      },
      "original_output": 2.772588722239783,
      "mutant_output": 2.772588722239783,
      "explanation": "Both original and mutant code provide the same output."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          2,
          1
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant code provide the same output."
    },
    {
      "input": {
        "r": 1,
        "c": 1,
        "f": [
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant code provide the same output."
    }
  ]
},{
  "mutant_program": "muta4063_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 5.894817,
      "mutant_output": 5.894817,
      "explanation": "Both original and mutant code compute the information measure for a 3x3 contingency table with the provided frequency values. The outputs are equivalent."
    }
  ]
},{
  "mutant_program": "muta4064_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          50,
          30,
          20,
          40
        ],
        [
          30,
          50,
          25,
          45
        ]
      ],
      "original_output": 34.1207,
      "mutant_output": 34.1207,
      "explanation": "Both original and mutant output the same information measure when given a 2x2 contingency table as input."
    },
    {
      "input": [
        2,
        3,
        [
          50,
          30,
          20,
          40,
          70,
          90
        ]
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both original and mutant output -3.0 when given a table with less than 2 rows or less than 2 columns."
    },
    {
      "input": [
        2,
        3,
        [
          50,
          -30,
          20,
          40,
          70,
          90
        ]
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant output -2.0 when given a table with negative frequencies."
    }
  ]
},{
  "mutant_program": "muta4065_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 5.545177444479564,
      "mutant_output": 5.545177444479568,
      "explanation": "Both programs have the same result, the mutant code just changed the way the values of the matrix are accessed, but the final computation is the same."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          4,
          5,
          6,
          2,
          0,
          1,
          9,
          8,
          7
        ]
      },
      "original_output": 22.305877408882594,
      "mutant_output": 22.305877408882605,
      "explanation": "Both programs use different ways to access the frequency tallies, but the final computation is the same."
    }
  ]
},{
  "mutant_program": "muta4066_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        10,
        20,
        30,
        40
      ],
      "original_output": 61.78,
      "mutant_output": 61.78,
      "explanation": "Both original and mutant program will give the same output since the mutant program only changes the way arrays are accessed to compute tallies. The input selected combines four probabilities in a 2x2 table. The original and mutant code are equivalent on this input."
    }
  ]
},{
  "mutant_program": "muta4067_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ],
        "pdf": 0
      },
      "original_output": 9.766,
      "mutant_output": 9.766,
      "explanation": "Both original and mutant code are equivalent as they output the same information measure for the given input."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        "pdf": 0
      },
      "original_output": 27.875,
      "mutant_output": 27.875,
      "explanation": "Both original and mutant code are equivalent as they output the same information measure for the given input."
    },
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          0,
          6
        ],
        "pdf": 0
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both original and mutant code are equivalent as they output the same value of -3.0 for the given input. Since the table has either 1 row or 1 column, which is less than the minimum requirement of 2, it is an invalid input."
    }
  ]
},{
  "mutant_program": "muta4068_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          1,
          0,
          1,
          1,
          2,
          0
        ]
      },
      "original_output": 1.30302,
      "mutant_output": -1.0,
      "explanation": "The mutant code changes how the program handles the input frequency table by accessing elements using an incorrect index formula. This causes the mutant to output -1, which signifies that the entire table consisted of 0 entries."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          3,
          2,
          1,
          -1
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The input frequency table for this test includes a negative value, which is handled by both the original and mutant codes similarly by returning -2."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "The input frequency table for this test consists of all zeros, which is handled by both the original and mutant codes similarly by returning -1."
    }
  ]
},{
  "mutant_program": "muta4069_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 2.43,
      "mutant_output": 2.43,
      "explanation": "Both original and mutant code are equivalent and produce the correct information measure value of 2.43 for the given input test case. No non-deterministic changes were applied."
    },
    {
      "input": [
        3,
        3,
        [
          100,
          150,
          80,
          50,
          75,
          120,
          40,
          60,
          90
        ],
        0
      ],
      "original_output": 105.01,
      "mutant_output": 105.01,
      "explanation": "Both original and mutant code are equivalent and produce the correct information measure value of 105.01 for the given input test case. No non-deterministic changes were applied."
    },
    {
      "input": [
        2,
        2,
        [
          1,
          -2,
          3,
          4
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant code are equivalent and produce the correct error value (-2.0) for the given input test case, where one of the table frequencies is negative. No non-deterministic changes were applied."
    }
  ]
},{
  "mutant_program": "muta4070_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 2.50284083,
      "mutant_output": 2.50284083,
      "explanation": "Both original and mutant codes are equivalent"
    }
  ]
},{
  "mutant_program": "muta4071_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta4072_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 2.772588722239781,
      "mutant_output": 2.772588722239781,
      "explanation": "The mutant code only modifies the way to access the array of frequencies for each cell in the table, by using a macro instead of accessing the array directly. However, the calculation of the information measure and the control structures remain the same, so the outputs should be equivalent."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 13.846225847842259,
      "mutant_output": 13.846225847842259,
      "explanation": "The input for the original and the mutant code have the same values and dimensions, so the outputs should be the same."
    }
  ]
},{
  "mutant_program": "muta4073_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        null
      ],
      "original_output": 0.3869258240376606,
      "mutant_output": 0.3869258240376606,
      "explanation": "Both original and mutant code should have the same output since only variable names, whitespaces and pointer issues were modified."
    },
    {
      "input": [
        3,
        3,
        [
          3,
          5,
          1,
          4,
          9,
          7,
          1,
          6,
          2
        ],
        null
      ],
      "original_output": 11.302752293577981,
      "mutant_output": 11.302752293577981,
      "explanation": "Both original and mutant code should have the same output since only variable names, whitespaces and pointer issues were modified."
    },
    {
      "input": [
        1,
        1,
        [
          0
        ],
        null
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant code should have the same output since only variable names, whitespaces and pointer issues were modified."
    }
  ]
},{
  "mutant_program": "muta4074_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.304007118316047,
      "mutant_output": 3.304007118316047,
      "explanation": "The mutant code and the original code follow the same logic and structure, only changing the way of accessing the values of the f variable."
    },
    {
      "input": {
        "r": 0,
        "c": 2,
        "f": []
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "The mutant code and the original code follow the same logic and structure, only changing the way of accessing the values of the f variable. In addition, the input of having r equal to zero will make both codes generate the same output."
    }
  ]
},{
  "mutant_program": "muta4075_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 2.772589,
      "mutant_output": 2.772589,
      "explanation": "Both original and mutant code compute the information measure for a 2-way contingency table using the Kullback's formula. The input and output are the same in both cases."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          0,
          1,
          2,
          1,
          0,
          0,
          1,
          1
        ]
      },
      "original_output": 2.148951,
      "mutant_output": 2.148951,
      "explanation": "Both original and mutant code compute the information measure for a 2-way contingency table using the Kullback's formula. The input and output are the same in both cases."
    }
  ]
},{
  "mutant_program": "muta4076_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 8.680816685610386,
      "mutant_output": 8.680816685610386,
      "explanation": "The mutant code only changes the way the f array is accessed. However, it does not change the calculation of the information measure InfoTbl nor the output."
    }
  ]
},{
  "mutant_program": "muta4077_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.491992142803906,
      "mutant_output": 3.491992142803906,
      "explanation": "Both the original and the mutant program are equivalent and produce the same output. Test set: a 2x2 table with frequency tallies of 1, 2, 3, 4."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 9.589913245681062,
      "mutant_output": 9.589913245681062,
      "explanation": "Both the original and the mutant program are equivalent and produce the same output. Test set: a 3x3 table with frequency tallies of 1 to 9."
    }
  ]
},{
  "mutant_program": "muta4078_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        "[       2, 2,        {0, 0, 0, 0}     ]"
      ],
      "original_output": 0,
      "mutant_output": 0,
      "explanation": "Both programs should output 0 because the table input consists of all 0 values"
    },
    {
      "input": [
        "[       3, 2,       {1, 2, 3, 4, 5, 6}     ]"
      ],
      "original_output": 11.923832,
      "mutant_output": 11.923832,
      "explanation": "Both programs should output the same information measure value because the mutant program only made stylistic changes"
    },
    {
      "input": [
        "[       4, 3,       {1, 5, 2, 0, -2, 6, 3, 4, 1, 2, 8, 9}     ]"
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs should output -2.0 because the table input includes a negative frequency value"
    }
  ]
},{
  "mutant_program": "muta4079_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta4080_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 7.0,
      "mutant_output": 7.0,
      "explanation": "The mutant code only changes the way the f array is accessed, but it should not affect the computation of the information measure."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          -1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The input has an invalid table entry (negative frequency), which should result in the same output for both programs."
    },
    {
      "input": {
        "r": 1,
        "c": 2,
        "f": [
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "The input has all zero entries, which should result in the same output for both programs."
    }
  ]
},{
  "mutant_program": "muta4081_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 10.47530773573929,
      "mutant_output": 10.47530773573929,
      "explanation": "Both the original and mutant code calculate the information measure for a 2-way table using Kullback's information measure formula. The mutation replaces the convenient way to access freqs with explicit calculation from the original code, which results in equivalent functionality."
    }
  ]
},{
  "mutant_program": "muta4083_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta4085_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta4086_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.688879454113936,
      "mutant_output": 3.688879454113936,
      "explanation": "The mutant code only modifies the way frequencies (f) are accessed, but it does not change the logic of the program. As a result, it produces the same output as the original program for the provided test."
    },
    {
      "input": {
        "r": 3,
        "c": 1,
        "f": [
          1,
          -2,
          3
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The mutant code only modifies the way frequencies (f) are accessed, but it does not change the logic of the program. As a result, it produces the same output as the original program for the provided test."
    },
    {
      "input": {
        "r": 1,
        "c": 2,
        "f": [
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "The mutant code only modifies the way frequencies (f) are accessed, but it does not change the logic of the program. As a result, it produces the same output as the original program for the provided test."
    }
  ]
},{
  "mutant_program": "muta4087_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta4088_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 4.1588830833596715,
      "mutant_output": 4.1588830833596715,
      "explanation": "The mutant code simply replaces the use of the index variable i and j in the original code by accessing the array f using the formula (i)*c+j. This does not change the output of the program as both ways of accessing the array are equivalent."
    },
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          -1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant code will return -2.0 when any frequency in the table is negative."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          0,
          0,
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant code will return -1.0 when all the frequencies in the table are 0."
    }
  ]
},{
  "mutant_program": "muta4089_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta4091_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 2.198529,
      "mutant_output": 2.198529,
      "explanation": "Both the original and the mutant program are equivalent and produce the same output for the given test case."
    },
    {
      "input": {
        "r": 3,
        "c": 4,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12
        ]
      },
      "original_output": 5.838508,
      "mutant_output": 5.838508,
      "explanation": "Both the original and the mutant program are equivalent and produce the same output for the given test case."
    }
  ]
},{
  "mutant_program": "muta4176_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 5.5452,
      "mutant_output": 5.5452,
      "explanation": "Both programs provide the same output for this valid input."
    },
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          -4
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs provide the same output for invalid input with negative frequency."
    },
    {
      "input": [
        1,
        2,
        [
          1,
          2
        ],
        0
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs provide the same output for invalid input with only 1 row."
    },
    {
      "input": [
        2,
        2,
        [
          0,
          0,
          0,
          0
        ],
        0
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs provide the same output for invalid input with only 0 frequencies."
    },
    {
      "input": [
        2,
        3,
        [
          1,
          2,
          3,
          0,
          1,
          2
        ],
        0
      ],
      "original_output": 7.832,
      "mutant_output": 7.832,
      "explanation": "Both programs provide the same output for valid input of a 2x3 table."
    }
  ]
},{
  "mutant_program": "muta4177_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          2,
          3,
          4,
          5
        ],
        0
      ],
      "original_output": 4.98403052767063,
      "mutant_output": 4.98403052767063,
      "explanation": "The mutant code only changes the way f[(i)*c+(j)] is accessed, but it does not affect the logic of the program. Therefore, the outputs are the same."
    },
    {
      "input": [
        2,
        2,
        [
          2,
          -3,
          4,
          5
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The mutant code only changes the way f[(i)*c+(j)] is accessed, but it does not affect the logic of the program. Therefore, the outputs are the same."
    },
    {
      "input": [
        1,
        1,
        [
          0
        ],
        0
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "The mutant code only changes the way f[(i)*c+(j)] is accessed, but it does not affect the logic of the program. Therefore, the outputs are the same."
    }
  ]
},{
  "mutant_program": "muta4214_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta4215_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta4222_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 4.1588830833596715,
      "mutant_output": 4.1588830833596715,
      "explanation": "The mutant code is equivalent to the original program code because it only changes the way to access the frequency tallies, but the logic and calculations are the same. The test input is a simple 2x2 contingency table with frequency tallies [1, 2, 3, 4]. The expected output is the same for both original and mutant code."
    }
  ]
},{
  "mutant_program": "muta4225_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        "[               2, 2,   // r, c               3, 2,   // table entries               1, 0              ]"
      ],
      "original_output": 1.262795,
      "mutant_output": 1.262795,
      "explanation": "Both programs are equivalent and produce the same output for the provided input."
    }
  ]
},{
  "mutant_program": "muta4227_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        3,
        3,
        [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        0
      ],
      "original_output": 4.1588830833596715,
      "mutant_output": 4.1588830833596715,
      "explanation": "Both the original and mutant program produce the same output for this input. Therefore, they are equivalent."
    }
  ]
},{
  "mutant_program": "muta4228_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.2966188375107,
      "mutant_output": 3.2966188375107,
      "explanation": "Both programs calculate the same Kullback's information measure for the given input, hence equivalent."
    },
    {
      "input": {
        "r": 1,
        "c": 2,
        "f": [
          1,
          -2
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs return -2.0 as an invalid table entry is detected in the input."
    },
    {
      "input": {
        "r": 1,
        "c": 1,
        "f": [
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs return -1.0 as the entire table consisted of 0 entries."
    }
  ]
},{
  "mutant_program": "muta4229_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 2.8112011117544613,
      "mutant_output": 2.811201111754461,
      "explanation": "Both programs produce the same output for the same input, so they are equivalent."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          0,
          3,
          0,
          0,
          0,
          3,
          0,
          1
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs produce the same output for the same input, so they are equivalent."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          -2,
          3,
          4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs produce the same output for the same input, so they are equivalent."
    }
  ]
},{
  "mutant_program": "muta4231_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          2,
          3,
          1,
          0
        ],
        0
      ],
      "original_output": 3.30578,
      "mutant_output": 3.30578,
      "explanation": "Both programs should provide the same output since the mutant code only changes the way the array f is accessed, but does not modify its content"
    },
    {
      "input": [
        2,
        3,
        [
          0,
          3,
          -1,
          4,
          5,
          2
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs should provide the same output since the mutant code only changes the way the array f is accessed, but does not modify its content. The test case was selected to produce an invalid table entry."
    },
    {
      "input": [
        1,
        5,
        [
          0,
          0,
          0,
          0,
          0
        ],
        0
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs should provide the same output since the mutant code only changes the way the array f is accessed, but does not modify its content. The test case was selected to produce an entire table consisting of 0 entries."
    }
  ]
},{
  "mutant_program": "muta4267_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta4360_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 4.165362035553573,
      "mutant_output": 4.165362035553573,
      "explanation": "The mutant code only changes the way the frequency tallies are accessed, but it does not affect the computation of the information measure. Therefore, both programs are equivalent and produce the same output for the given test case."
    }
  ]
},{
  "mutant_program": "muta4454_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta4455_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 20.302426,
      "mutant_output": 20.302426,
      "explanation": "Both original and mutant code have the same computation of the information measure for the given input."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          -2,
          3,
          4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant code have the same handling of negative frequency values."
    },
    {
      "input": {
        "r": 0,
        "c": 5,
        "f": []
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both original and mutant code have the same handling of invalid table dimensions."
    }
  ]
},{
  "mutant_program": "muta4456_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          0,
          3
        ],
        "pdf": 0
      },
      "original_output": 5.682261072378044,
      "mutant_output": 5.682261072378044,
      "explanation": "The mutant code only changes the way the x(i,j) value is accessed, but it does not affect the computation of the information measure. The test set is small, but it covers different cases of values in the table and it is enough to confirm that both programs produce the same output."
    }
  ]
},{
  "mutant_program": "muta4457_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta4458_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta4464_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          2,
          4,
          2,
          4
        ],
        0
      ],
      "original_output": 3.464152,
      "mutant_output": 3.464152,
      "explanation": "The test input represents a 2x2 contingency table with equal frequencies. Both the original and the mutant program will output the same information measure (3.464152) since the program code has only been modified to change the way the frequency tallies are accessed."
    },
    {
      "input": [
        3,
        2,
        [
          0,
          1,
          2,
          3,
          4,
          5
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The test input represents a 3x2 contingency table with a negative frequency. Both the original and the mutant program will output the same code indicating an invalid table entry (-2.0) since the mutation did not affect the program's algorithm."
    },
    {
      "input": [
        1,
        4,
        [
          0,
          0,
          0,
          0
        ],
        0
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "The test input represents a 1x4 contingency table with all zero entries. Both the original and the mutant program will output the same code indicating that the entire table consisted of zero entries (-1.0) since the mutation did not affect the program's algorithm."
    }
  ]
},{
  "mutant_program": "muta4473_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta4486_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          0,
          0,
          1
        ],
        0
      ],
      "original_output": 2.772588722239781,
      "mutant_output": 2.772588722239781,
      "explanation": "Both programs should output the same because the mutant only changes the format of the code"
    },
    {
      "input": [
        3,
        3,
        [
          10,
          5,
          3,
          2,
          8,
          4,
          1,
          0,
          7
        ],
        0
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs should output the same because the input has a zero frequency"
    },
    {
      "input": [
        5,
        3,
        [
          3,
          5,
          8,
          2,
          -1,
          9,
          4,
          7,
          6,
          5,
          1,
          0,
          11,
          4,
          4,
          2,
          2,
          1,
          2,
          3,
          4,
          5,
          6,
          7
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs should output the same because the input has a negative frequency"
    }
  ]
},{
  "mutant_program": "muta4077_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          0,
          0,
          1
        ],
        {}
      ],
      "original_output": 2.772588722239781,
      "mutant_output": 2.772588722239781,
      "explanation": "Both programs output the same value for this input."
    },
    {
      "input": [
        3,
        3,
        [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8
        ],
        {}
      ],
      "original_output": 7.637874877535727,
      "mutant_output": -2.0,
      "explanation": "The mutant program sets info to -2.0 when there is an invalid table entry, while the original program continues to compute the information measure. In this case, the input has a frequency less than 0 and thus is invalid, resulting in different outputs."
    }
  ]
},{
  "mutant_program": "muta4487_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 2.549720846976926,
      "mutant_output": 2.549720846976926,
      "explanation": "Both programs should output the same result when given valid input."
    },
    {
      "input": {
        "r": 0,
        "c": 3,
        "f": []
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs should output the same result when given invalid input."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          0,
          -1,
          2,
          1
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs should output the same result when given invalid input."
    }
  ]
},{
  "mutant_program": "muta4492_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ]
      ],
      "original_output": -4.0,
      "mutant_output": -4.0,
      "explanation": "Both original and mutant output -4.0 because there is not enough memory to allocate."
    },
    {
      "input": [
        2,
        2,
        [
          10,
          20,
          -3,
          5
        ]
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant output -2.0 because of an invalid table entry: a negative frequency (-3)."
    },
    {
      "input": [
        1,
        2,
        [
          0,
          0
        ]
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant output -1.0 because there are no entries in the table."
    },
    {
      "input": [
        2,
        3,
        [
          10,
          20,
          30,
          40,
          50,
          60
        ]
      ],
      "original_output": 44.63,
      "mutant_output": 44.63,
      "explanation": "Both original and mutant output 44.63. This test case has been designed to test if original and mutant codes produce equivalent results for a case where there are no edge cases. "
    }
  ]
},{
  "mutant_program": "muta4493_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta4494_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        {}
      ],
      "original_output": 3.7859,
      "mutant_output": 3.7859,
      "explanation": "Both programs are equivalent, so they produce the same output."
    },
    {
      "input": [
        2,
        3,
        [
          0,
          0,
          1,
          2,
          3,
          0
        ],
        {}
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs are equivalent, so they produce the same output."
    }
  ]
},{
  "mutant_program": "muta4495_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 4.1588830833596715,
      "mutant_output": 4.584962500721156,
      "explanation": "The original program computes the frequency of a 2x2 table and computes the information measure by multiplying N (the total frequency) by the logarithm of N and subtracting the logarithm of the row sums and column sums. The mutant program replaces all instances of accessing the 2D matrix using the f array with direct calculation from the index i and j. This causes the computed value of info to be different from the original program."
    },
    {
      "input": [
        3,
        1,
        [
          0,
          1,
          2
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs have the same output since the input dimensions are invalid and result in early termination with an error code of -3.0."
    }
  ]
},{
  "mutant_program": "muta4496_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 4.158883084,
      "mutant_output": 4.158882443,
      "explanation": "The mutant changes the way the table entries are accessed, but it does not affect the computation of the information measure."
    },
    {
      "input": [
        3,
        3,
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        0
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs handle the edge case where all the entries in the table are 0."
    },
    {
      "input": [
        2,
        2,
        [
          -1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs handle the edge case where an entry in the table is negative."
    },
    {
      "input": [
        1,
        1,
        [
          5
        ],
        0
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs handle the edge case where either the number of rows or columns is less than 2."
    },
    {
      "input": [
        10,
        10,
        [],
        0
      ],
      "original_output": -4.0,
      "mutant_output": -1.0,
      "explanation": "The original program handles the edge case where there is not enough memory to allocate storage for the row and column sums, while the mutant program does not check for allocation errors."
    }
  ]
},{
  "mutant_program": "muta4497_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 7.355644979496271,
      "mutant_output": 7.355644979496271,
      "explanation": "The mutant code only modifies the way memory is allocated for variables, but it does not affect the actual computation of the information measure. Therefore, the outputs of both programs are expected to be identical for any input table."
    }
  ]
},{
  "mutant_program": "muta4498_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 6.988532580234921,
      "mutant_output": 6.988532580234921,
      "explanation": "Both original and mutant code should output the same result for this specific input."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant code should output the same result for this specific input."
    },
    {
      "input": {
        "r": 1,
        "c": 2,
        "f": [
          1,
          -1
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant code should output the same result for this specific input."
    }
  ]
},{
  "mutant_program": "muta4499_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 5.545177444479562,
      "mutant_output": 5.545177444479562,
      "explanation": "Both the original and mutant code compile without errors and provide the same output for the provided test case. Therefore, the mutant code is equivalent to the original code."
    }
  ]
},{
  "mutant_program": "muta4500_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 8.152834534526852,
      "mutant_output": 8.152834534526852,
      "explanation": "Both original and mutant programs output the same information measure for this 2x2 contingency table."
    },
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      },
      "original_output": 20.66162121272999,
      "mutant_output": 20.66162121272999,
      "explanation": "Both original and mutant programs output the same information measure for this 3x2 contingency table."
    },
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          3,
          4,
          5,
          6,
          7,
          8
        ]
      },
      "original_output": 20.66162121272999,
      "mutant_output": 20.66162121272999,
      "explanation": "Both original and mutant programs output the same information measure for this 2x3 contingency table."
    }
  ]
},{
  "mutant_program": "muta4501_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 2.77258872223978,
      "mutant_output": 2.77258872223978,
      "explanation": "The mutant code only modifies the way frequencies (f) are accessed, instead of using the convenient macro definition, it directly accesses the elements using the index computation (i*c+j). However, this does not change the output of the function."
    },
    {
      "input": {
        "r": 3,
        "c": 4,
        "f": [
          1,
          2,
          -1,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The input has a negative frequency, which causes the information measure to be invalid (-2.0). The mutant code handles the negative frequency correctly, so the output is equivalent to the original code."
    },
    {
      "input": {
        "r": 1,
        "c": 2,
        "f": [
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "The input has all zero frequencies, which makes the information measure invalid (-1.0). The mutant code handles this case correctly, so the output is equivalent to the original code."
    }
  ]
},{
  "mutant_program": "muta4506_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta4507_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 2.7725887,
      "mutant_output": 2.7725887,
      "explanation": "Both original and mutated program should output the same information measure for input [1,2;3,4]."
    },
    {
      "input": {
        "r": 3,
        "c": 4,
        "f": [
          1,
          2,
          2,
          3,
          4,
          2,
          0,
          1,
          5,
          1,
          3,
          0
        ]
      },
      "original_output": 4.4869856,
      "mutant_output": 4.4869856,
      "explanation": "Both original and mutated program should output the same information measure for input [1,2,2,3;4,2,0,1;5,1,3,0]."
    }
  ]
},{
  "mutant_program": "muta4508_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta4521_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta4522_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ],
        "pdf": 0
      },
      "original_output": 6.33084,
      "mutant_output": 6.33084,
      "explanation": "The mutant code only modifies the way to access the f array, replacing the equation to compute the index with the one used in the original code. This produces the same result."
    },
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          1,
          2,
          3,
          0,
          0,
          4
        ],
        "pdf": 0
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "The input has no information because it has a completely empty row. The mutant and the original return the same output"
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          -3,
          4
        ],
        "pdf": 0
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The input has a negative frequency. Both the mutant and the original return the same output"
    }
  ]
},{
  "mutant_program": "muta4523_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 5.54517744447957,
      "mutant_output": 5.54517744447957,
      "explanation": "The mutations change the way the frequency is accessed inside the x function, but do not alter the computation of the information measure. In this case, they result in the same output."
    },
    {
      "input": {
        "r": 0,
        "c": 5,
        "f": []
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "The original program and mutant program flow is identical; they should generate the same outputs."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          -1,
          2,
          3,
          4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The original program and mutant program flow is identical; they should generate the same outputs."
    }
  ]
},{
  "mutant_program": "muta4527_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 17.9914,
      "mutant_output": 17.9852,
      "explanation": "The mutant changes the condition 'if(pi > 0.0)' to 'if((pi > 1.0))', which can lead to a different output since it can exclude certain entries from counting towards the info calculation. In this test, it excludes all 0 entries from counting, resulting in a different output."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          0,
          0,
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both the original and mutant programs handle the case where the table is all 0s and return a special value."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          -1,
          2,
          3,
          4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both the original and mutant programs handle the case where a frequency is negative and return a special value."
    }
  ]
},{
  "mutant_program": "muta4528_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 1.7921326277603875,
      "mutant_output": 1.7921326277603875,
      "explanation": "Both programs compute the Kullback's information measure for a 2-way contingency table and produce the same output for the given input."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          0,
          0,
          1,
          2,
          1,
          1,
          0,
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs correctly identify that the entire table consisted of 0 entries."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          -1,
          2,
          3,
          4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs correctly identify an invalid table entry (negative frequency)."
    },
    {
      "input": {
        "r": 1,
        "c": 1,
        "f": [
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs correctly identify that the entire table consisted of 0 entries."
    }
  ]
},{
  "mutant_program": "muta4532_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta4533_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta4537_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        3,
        2,
        1,
        1,
        2,
        2,
        0
      ],
      "original_output": -3.22,
      "mutant_output": -3.1000000000000005,
      "explanation": "The mutant code has a change in which an if statement was added in line 78 to only execute code modified in line 75 when values in column sum are greater than 1.0. This change causes the mutant program to execute a slightly modified logic for the fourth part of the information measure. In the given test set, column 3's sum is 1.0 so the fourth part's calculation will be totally ignored on both programs. Therefore, they will produce different output."
    }
  ]
},{
  "mutant_program": "muta4546_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        3,
        3,
        [
          5,
          10,
          12,
          8,
          3,
          7,
          6,
          11,
          9
        ],
        0
      ],
      "original_output": 22.580170640817457,
      "mutant_output": 22.580170640817457,
      "explanation": "Both the original and the mutant code compute the same information measure for a 3x3 contingency table, and the input values are valid for both. Therefore, the outputs are equivalent."
    }
  ]
},{
  "mutant_program": "muta4547_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.806662489770317,
      "mutant_output": 3.806662489770317,
      "explanation": "Both programs should output the same information measure for this input."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          5,
          0,
          2,
          2,
          3,
          1,
          3,
          2,
          0
        ]
      },
      "original_output": 15.29495825194498,
      "mutant_output": 15.29495825194498,
      "explanation": "Both programs should output the same information measure for this input."
    },
    {
      "input": {
        "r": 1,
        "c": 3,
        "f": [
          0,
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs should detect that the entire table had zero entries."
    }
  ]
},{
  "mutant_program": "muta4548_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          0,
          2
        ]
      ],
      "original_output": -2.0,
      "mutant_output": 1.0791812460476249,
      "explanation": "The original program detects an invalid table entry and returns -2.0 while the mutant code does not. The test table has an entry with 0 which is invalid. The correct output of the original program is -2.0 while the correct output of the mutant program is 1.07..."
    },
    {
      "input": [
        3,
        3,
        [
          0,
          0,
          0,
          0,
          1,
          2,
          4,
          3,
          5
        ]
      ],
      "original_output": -1.0,
      "mutant_output": -5.634113892223939,
      "explanation": "The original program detects that the entire table consisted of 0 entries and returns -1.0 while the mutant code does not. The table given in the input has all entries as 0 which is invalid. The correct output of the original program is -1.0 while th..."
    },
    {
      "input": [
        2,
        2,
        [
          2,
          3,
          0,
          -1
        ]
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The mutant code has changed the indexing of the frequency tallies but both original and mutant code outputs are the same. The input table has an invalid entry of -1 but it is detected by both original and mutant programs."
    }
  ]
},{
  "mutant_program": "muta4580_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          4,
          5,
          2,
          1,
          6,
          2
        ]
      },
      "original_output": 16.202679,
      "mutant_output": 16.202679,
      "explanation": "Both the original and mutated function compute Kullback's information measure for a 2-way contingency table and return the same result for the provided test case."
    }
  ]
},{
  "mutant_program": "muta5074_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 1.3862943611198906,
      "mutant_output": 1.3862943611198906,
      "explanation": "Both programs should output the same result for this input."
    },
    {
      "input": [
        3,
        2,
        [
          5,
          6,
          7,
          8,
          9,
          10
        ],
        0
      ],
      "original_output": 7.188507776342073,
      "mutant_output": 6.829673666344799,
      "explanation": "Different output because the mutant code changes the allocation of memory for the xi variable."
    }
  ]
},{
  "mutant_program": "muta5076_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 2.773,
      "mutant_output": -1.0,
      "explanation": "The original program computes Kullback's information measure for a 2-way contingency table. The test inputs a 2x2 table with frequencies [1,2,3,4]. The original program outputs 2.773 and the mutant program outputs -1.0 because the mutant program does not compute the array index correctly: it uses the original row and column values to compute the index, while the original program uses the mutated f array, which is equivalent to r and c being interchanged."
    },
    {
      "input": [
        3,
        3,
        [
          1,
          2,
          3,
          0,
          -4,
          5,
          6,
          7,
          8
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The input is a 3x3 table with invalid frequency values (-4). Both the original and the mutant programs output -2.0 to indicate an invalid table entry."
    },
    {
      "input": [
        1,
        3,
        [
          2,
          0,
          1
        ],
        0
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "The input is a 1x3 table, which is invalid because r is less than 2. Both the original and the mutant programs output -3.0 to indicate invalid dimensions."
    }
  ]
},{
  "mutant_program": "muta5099_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta5100_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5101_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta5103_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta5104_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.7135720667043124,
      "mutant_output": 3.7135720667043124,
      "explanation": "The mutant code only modifies the way the frequencies are accessed in the matrix f by using a different formula to access its position. However, this does not change the logic of the program, and both the original and mutant code produce the same output for the provided test case."
    },
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          0,
          2,
          3,
          0,
          2,
          3
        ]
      },
      "original_output": -2.0794415416798357,
      "mutant_output": -2.0794415416798357,
      "explanation": "The mutant code works in the same way as the original program, it just changes the formula to compute the position in the matrix f. Both programs produce the same output for this test case."
    }
  ]
},{
  "mutant_program": "muta5107_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          10,
          12,
          3,
          4
        ],
        0
      ],
      "original_output": 7.1996751599,
      "mutant_output": 9.0815374034,
      "explanation": "The mutant code differs in the way it accesses the frequency values in the input array, using a direct calculation instead of the convenient macro defined in the original code. This changes the final information measure calculation and results in different outputs."
    },
    {
      "input": [
        3,
        3,
        [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        0
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs return -3.0 since the table dimensions are less than 2."
    },
    {
      "input": [
        2,
        2,
        [
          0,
          0,
          0,
          0
        ],
        0
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs return -1.0 since the entire table consists of 0 entries."
    }
  ]
},{
  "mutant_program": "muta5108_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5109_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5111_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5112_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5115_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          0,
          0,
          1
        ]
      ],
      "original_output": 1.386294,
      "mutant_output": -3.402823,
      "explanation": "The original program returns the Kullback's information measure for a 2-way contingency table using a logarithmic function. The mutant program, on the other hand, replaces the convenient way to access the frequency array with an indexed version resulting in a different output. The provided test case has a small table with two rows and two columns whose diagonal elements have values of '1' while all other values are zero. The original program outputs 1.386294 while the mutant program outputs -3.402823. Thus, the mutant program is not equivalent to the original program."
    },
    {
      "input": [
        3,
        3,
        [
          2,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          2
        ]
      ],
      "original_output": 4.584963,
      "mutant_output": -3.402823,
      "explanation": "The original program returns the Kullback's information measure for a 2-way contingency table using a logarithmic function. The mutant program replaces the convenient way to access the frequency array with an indexed version resulting in a different output. The provided test case has a small table with three rows and three columns with some '2' values interspersed among zeroes. The original program outputs 4.584963 while the mutant program outputs -3.402823. Thus, the mutant program is not equivalent to the original program."
    }
  ]
},{
  "mutant_program": "muta5122_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          0,
          5
        ],
        0
      ],
      "original_output": 2.772588722239781,
      "mutant_output": 1.9272765183854614,
      "explanation": "The mutant changes the order of a conditional clause. In the conditional with pi > 0.0, the original program's info variable is modified if it is true, but it is unmodified in the mutant program. As a result, the outputs are different."
    },
    {
      "input": [
        3,
        3,
        [
          3,
          4,
          0,
          0,
          0,
          8,
          9,
          6,
          5
        ],
        0
      ],
      "original_output": 47.97530364230324,
      "mutant_output": 47.97530364230324,
      "explanation": "The mutant variation did not affect this test case."
    }
  ]
},{
  "mutant_program": "muta5123_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5124_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5125_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 2.224046684817314,
      "mutant_output": 2.224046684817314,
      "explanation": "Both original and mutant code compute the information measure without any changes to the program logic. Therefore, they are equivalent. The output is the same for the given input."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          4,
          5,
          1,
          2,
          7,
          3,
          8,
          6,
          5
        ]
      },
      "original_output": 19.748964745005928,
      "mutant_output": 19.748964745005928,
      "explanation": "Both original and mutant code compute the information measure without any changes to the program logic. Therefore, they are equivalent. The output is the same for the given input."
    }
  ]
},{
  "mutant_program": "muta5126_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5127_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5128_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 4.262916601680274,
      "mutant_output": 4.262926722761197,
      "explanation": "The mutant program changes the order of the addition between info and -4.0 in case of failure to allocate memory for xj. This does not affect the value of info significantly, but it changes it enough to make the outputs different."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          -2,
          3,
          4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The mutant program did not change the input or the algorithm, so the output is the same as the original program."
    }
  ]
},{
  "mutant_program": "muta5129_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5130_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          0,
          3
        ],
        0
      ],
      "original_output": 2.772588722239783,
      "mutant_output": -1.0,
      "explanation": "The original program computes the information measure for a 2x2 frequency table with tallies [1,2,0,3]. The mutant program initializes N to 0 and then multiplies it by 0, which results in N being 0 for all tables and therefore info being -1.0 for all tables. The provided test checks this behavior."
    }
  ]
},{
  "mutant_program": "muta5132_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 5.299826481985713,
      "mutant_output": 5.299826481985713,
      "explanation": "Both original and mutant code will produce equivalent output since the mutant code only contains changes to the memory allocation calls and uses the preprocessor definition and includes from the original program."
    },
    {
      "input": {
        "r": 1,
        "c": 1,
        "f": [
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant code will produce equivalent output since the input is a small table with only a single, zero value. All returns are negative information measures."
    }
  ]
},{
  "mutant_program": "muta5133_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5134_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5139_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5146_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          11,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 39.5551899705291,
      "mutant_output": 39.5551899705291,
      "explanation": "The mutant code and original code appear to be equivalent as they produce the same output given the input."
    },
    {
      "input": {
        "r": 1,
        "c": 1,
        "f": [
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "The mutant code and original code appear to be equivalent as they produce the same output given the input."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          -1,
          -2,
          -3,
          4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The mutant code and original code appear to be equivalent as they produce the same output given the input."
    },
    {
      "input": {
        "r": 1,
        "c": 3,
        "f": [
          4,
          5,
          6
        ]
      },
      "original_output": 3.1926503525285,
      "mutant_output": 3.1926503525285,
      "explanation": "The mutant code and original code appear to be equivalent as they produce the same output given the input."
    }
  ]
},{
  "mutant_program": "muta5154_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        3,
        3,
        [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        0
      ],
      "original_output": 8.858774,
      "mutant_output": 8.858774,
      "explanation": "Both versions of the program are equivalent for this test case because the mutant only affects the way the elements of the f array are accessed. The calculation in each version of the program is correct and the outputs match."
    },
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 1.791759,
      "mutant_output": 1.791759,
      "explanation": "Both versions of the program are equivalent for this test case because the mutant only affects the way the elements of the f array are accessed. The calculation in each version of the program is correct and the outputs match."
    },
    {
      "input": [
        2,
        2,
        [
          -1,
          -2,
          -3,
          -4
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both versions of the program are equivalent for this test case because the mutant only affects the way the elements of the f array are accessed. The calculation in each version of the program is correct and the outputs match."
    }
  ]
},{
  "mutant_program": "muta5156_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5161_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 2.772588722239781,
      "mutant_output": 2.772588722239781,
      "explanation": "Both the original and mutant code produce the same output for this test case."
    },
    {
      "input": [
        2,
        3,
        [
          1,
          2,
          3,
          4,
          5,
          6
        ],
        0
      ],
      "original_output": 4.484908615704372,
      "mutant_output": 4.484908615704372,
      "explanation": "Both the original and mutant code produce the same output for this test case."
    },
    {
      "input": [
        3,
        2,
        [
          1,
          2,
          3,
          4,
          5,
          6
        ],
        0
      ],
      "original_output": 4.484908615704372,
      "mutant_output": 4.484908615704372,
      "explanation": "Both the original and mutant code produce the same output for this test case."
    }
  ]
},{
  "mutant_program": "muta5172_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5174_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 5.545177,
      "mutant_output": 5.545177,
      "explanation": "Both original and mutant versions are equivalent since no mutations were done to the code."
    }
  ]
},{
  "mutant_program": "muta5179_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 2.772588722239781,
      "mutant_output": 2.772588722239781,
      "explanation": "Both programs should output the same result since the mutant only changes the way that the 2D array is accessed."
    },
    {
      "input": [
        3,
        2,
        [
          1,
          2,
          3,
          4,
          5,
          6
        ],
        0
      ],
      "original_output": 5.920666385,
      "mutant_output": 5.920666385,
      "explanation": "Both programs should output the same result since the mutant only changes the way that the 2D array is accessed."
    },
    {
      "input": [
        4,
        3,
        [
          1,
          0,
          1,
          1,
          1,
          1,
          2,
          1,
          0,
          1,
          1,
          0
        ],
        0
      ],
      "original_output": 4.330496604,
      "mutant_output": 4.330496604,
      "explanation": "Both programs should output the same result since the mutant only changes the way that the 2D array is accessed."
    }
  ]
},{
  "mutant_program": "muta5184_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          "[1L, 2L, 3L, 4L]"
        ]
      },
      "original_output": 3.5493061443340546,
      "mutant_output": 3.5493061443340546,
      "explanation": "The mutant code only changes the way in which the freqs data is accessed, so the output is the same as the original program."
    },
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          "[1L, -2L, 3L, 4L, 5L, 6L]"
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The input data has an invalid table entry, causing the same error message for both the original and mutant program."
    },
    {
      "input": {
        "r": 1,
        "c": 2,
        "f": [
          "[0L, 0L]"
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "The input data has all zero entries, causing the same error message for both the original and mutant program."
    }
  ]
},{
  "mutant_program": "muta5192_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.979453774198981,
      "mutant_output": 3.979453774198981,
      "explanation": "The mutant code just changes the variable initialization, but it does not modify the core functionality of the program, therefore the outputs are the same."
    }
  ]
},{
  "mutant_program": "muta5195_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        null
      ],
      "original_output": 2.77258872223978,
      "mutant_output": -0.9344301875411621,
      "explanation": "The original program computes the information measure for a given contingency table and returns it as output. The test has a small table with 2 rows and 2 columns, where the original output is 2.77258872223978. The mutated program modified the indexing of the input table (f variable) and made the index of column to always be 0. This will cause an incorrect computation, leading to a different output (-0.9344301875411621) and making this mutant non-equivalent to the original code."
    },
    {
      "input": [
        3,
        3,
        [
          50,
          10,
          25,
          15,
          20,
          30,
          30,
          25,
          15
        ],
        null
      ],
      "original_output": 34.6763763688687,
      "mutant_output": 34.6763763688687,
      "explanation": "The original and mutated program is expected to output the same result for this input table, because the mutation in this case will not modify any of the values inside the given table. The test has a table with 3 rows and 3 columns, where the original and mutated output is the same (34.6763763688687)."
    }
  ]
},{
  "mutant_program": "muta5198_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          10,
          20,
          30,
          40
        ],
        0
      ],
      "original_output": 74.019307,
      "mutant_output": 74.019307,
      "explanation": "Both outputs are equivalent as the mutant code just changes the way that the input for the frequency tallies is accessed."
    },
    {
      "input": [
        3,
        2,
        [
          1,
          2,
          5,
          0,
          2,
          1
        ],
        0
      ],
      "original_output": 4.279709,
      "mutant_output": 4.279709,
      "explanation": "Both outputs are equivalent as the mutant code changes how the frequency tallies are computed."
    },
    {
      "input": [
        2,
        3,
        [
          13,
          4,
          0,
          5,
          2,
          10
        ],
        0
      ],
      "original_output": 6.175628,
      "mutant_output": 6.175628,
      "explanation": "Both outputs are equivalent as the mutant code again just changes how the input for the frequency tallies is accessed."
    }
  ]
},{
  "mutant_program": "muta5201_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 6.1652076363,
      "mutant_output": 6.1652076363,
      "explanation": "The mutant code maintains the logic and structure of the original code, only changing the way the indices are computed. However, in this particular case, both methods compute the same indices for accessing the elements of the frequency tallies array. Hence, they produce the same output for the given input."
    },
    {
      "input": {
        "r": 4,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12
        ]
      },
      "original_output": 15.4050018846,
      "mutant_output": 15.4050018846,
      "explanation": "Same as the previous case. The mutant code does not affect the original logic or implementation, hence it produces the same output for the given input."
    }
  ]
},{
  "mutant_program": "muta5204_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          5,
          10,
          6,
          12
        ],
        0
      ],
      "original_output": 27.8269,
      "mutant_output": -1.0,
      "explanation": "The original program computes the information measure for a 2x2 contingency table with frequencies [5, 10, 6, 12], and returns 27.8269. The mutant program returns -1.0, which indicates that the entire table consists of 0 entries. This is because the mutant program incorrectly indexes into the f array using the formula f[(i)*c+(j)] instead of using the x(i, j) macro defined in the original program."
    },
    {
      "input": [
        3,
        3,
        [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        0
      ],
      "original_output": 55.7942,
      "mutant_output": -1.0,
      "explanation": "The original program computes the information measure for a 3x3 contingency table with frequencies [1, 2, 3, 4, 5, 6, 7, 8, 9], and returns 55.7942. The mutant program incorrectly indexes into the f array using the formula f[(i)*c+(j)]. This results in incorrect computations of row and column sums, leading to an information measure of -1.0, which indicates that the entire table consists of 0 entries."
    }
  ]
},{
  "mutant_program": "muta5207_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          1,
          2
        ],
        "pdf": 0
      },
      "original_output": 1.888699,
      "mutant_output": 1.888699,
      "explanation": "Both programs will output the same result because the mutant code only changes the way the indices are accessed."
    },
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          -2,
          4,
          3,
          2,
          0,
          -1
        ],
        "pdf": 0
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs will output the same result because there are invalid table entries resulting in an information measure of -2.0."
    }
  ]
},{
  "mutant_program": "muta5210_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          2,
          3,
          0,
          1
        ]
      },
      "original_output": 3.267225,
      "mutant_output": 3.267225,
      "explanation": "The mutant code only changes the way the 'x' array is accessed, but it does not change the logic or the output of InfoTbl function. Thus, it is equivalent."
    }
  ]
},{
  "mutant_program": "muta5236_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta5241_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta5269_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          0,
          0,
          1
        ],
        {}
      ],
      "original_output": 1.3862943611198906,
      "mutant_output": -2.0,
      "explanation": "The test table specified has one negative value in the frequency tally array. The original program computes the information measure correctly as 1.3862943611198906, but the mutant code incorrectly exits with code -2.0."
    },
    {
      "input": [
        5,
        3,
        [
          50,
          100,
          250,
          300,
          50,
          25,
          30,
          80,
          20,
          25,
          100,
          150,
          10,
          20,
          25,
          500,
          49,
          51,
          147,
          100,
          425
        ],
        {}
      ],
      "original_output": 128.60700801669458,
      "mutant_output": 128.60700801669458,
      "explanation": "The test table specified has arbitrary rows and columns but was designed to have various positive frequencies in the tally array. Both programs should compute the information measure to be approximately 128.6 and are therefore equivalent. The output of the mutant program matches the output of the original program."
    }
  ]
},{
  "mutant_program": "muta5274_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta5305_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5313_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 4.1588830833596715,
      "mutant_output": 4.1588830833596715,
      "explanation": "Both programs compute the same information measure for this input."
    },
    {
      "input": {
        "r": 0,
        "c": 3,
        "f": []
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs correctly identify that a table with 0 rows is invalid."
    },
    {
      "input": {
        "r": 4,
        "c": 4,
        "f": [
          1,
          -2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs correctly identify that a table with a negative frequency is invalid."
    }
  ]
},{
  "mutant_program": "muta5321_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5338_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          1,
          0,
          2,
          0,
          3,
          0
        ]
      },
      "original_output": 3.8112749957,
      "mutant_output": -2.0,
      "explanation": "The mutant code changes the conditional in line 29 from 'while ( fgets( line, MAXLINE, mystdin ) != NULL )' to 'while ( (i - r) )'. The latter will evaluate to false forever, resulting in a different output. The test case has a valid input table, so the original program computes the information measure correctly, while the mutant code assigns '-2.0', indicating an invalid table entry."
    },
    {
      "input": {
        "r": 5,
        "c": 3,
        "f": [
          0,
          0,
          0,
          0,
          0,
          1,
          2,
          3,
          4,
          5,
          0,
          1,
          2,
          3,
          4,
          0,
          1,
          2,
          3,
          0,
          0,
          0,
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs behave correctly when the table's entries are zero, so their outputs match."
    },
    {
      "input": {
        "r": 4,
        "c": 2,
        "f": [
          20,
          12,
          -2,
          9,
          23,
          20,
          17,
          37
        ]
      },
      "original_output": 58.7168099159,
      "mutant_output": 58.7168099159,
      "explanation": "Both programs give the correct answer when the table's entries are valid. The test case shows that the mutant code produces the same outputs as the original program for valid input tables."
    }
  ]
},{
  "mutant_program": "muta5343_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant program output -1.0 because table is all zeroes."
    },
    {
      "input": [
        2,
        2,
        [
          -1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant program output -2.0 because of invalid table entry (frequency less than 0)."
    },
    {
      "input": [
        1,
        2,
        [
          1,
          2
        ],
        0
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both original and mutant program output -3.0 because of invalid table dimensions (r or c less than 2)."
    },
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 1.83788,
      "mutant_output": 1.83788,
      "explanation": "Both original and mutant program output the same result for a valid input table."
    }
  ]
},{
  "mutant_program": "muta5357_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.4402,
      "mutant_output": 3.4402,
      "explanation": "Both programs have the same implementation of InfoTbl function. Therefore, they will produce identical results."
    }
  ]
},{
  "mutant_program": "muta5362_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta5367_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 3.783509,
      "mutant_output": 3.783509,
      "explanation": "The mutant code is equivalent to the original program code."
    }
  ]
},{
  "mutant_program": "muta5371_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta5372_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          0,
          1,
          0,
          2,
          0,
          1,
          0,
          1
        ]
      },
      "original_output": 1.676303,
      "mutant_output": 1.676303,
      "explanation": "Both programs are equivalent"
    },
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          1,
          0,
          1,
          0,
          2,
          0
        ]
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs are equivalent"
    },
    {
      "input": {
        "r": 1,
        "c": 1,
        "f": [
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs are equivalent"
    }
  ]
},{
  "mutant_program": "muta5376_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 6.45089808655008,
      "mutant_output": 6.45089808655008,
      "explanation": "Both programs are equivalent and produce the same output."
    }
  ]
},{
  "mutant_program": "muta5380_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5381_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5385_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 2.772589,
      "mutant_output": 2.772589,
      "explanation": "Both programs should output the same value for this input"
    },
    {
      "input": [
        3,
        2,
        [
          1,
          0,
          0,
          1,
          3,
          2
        ],
        0
      ],
      "original_output": 0.667751,
      "mutant_output": 0.667751,
      "explanation": "Both programs should output the same value for this input"
    },
    {
      "input": [
        2,
        2,
        [
          0,
          0,
          0,
          0
        ],
        0
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs should output the same value for this input"
    }
  ]
},{
  "mutant_program": "muta5389_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 2.772589,
      "mutant_output": 2.772588648841251,
      "explanation": "The original program computes the logarithm of column sums only if the sum is greater than 0. In the mutant code, this condition uses an unnecessary expression (pj + 0.0), which is always true and makes this condition redundant. Thus, the mutant computes the logarithm of column sums even if the sum is zero, causing the output for some cases to be different from the original program."
    },
    {
      "input": [
        2,
        3,
        [
          1,
          2,
          3,
          4,
          0,
          1
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs have the same output when the table contains an invalid entry (frequency less than 0)."
    },
    {
      "input": [
        1,
        1,
        [
          0
        ],
        0
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs have the same output when the entire table consists of 0 entries."
    },
    {
      "input": [
        0,
        0,
        [],
        0
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs have the same output when the table dimensions are invalid (r or c less than 2)."
    }
  ]
},{
  "mutant_program": "muta5390_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          2,
          3,
          4,
          5
        ]
      },
      "original_output": 3.073455,
      "mutant_output": 3.073455,
      "explanation": "Both programs should generate the same output for this input as it covers the basic functionality without touching any of the mutated code."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          2,
          3,
          4,
          -5
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs should generate the same output for this input since it has an invalid frequency value and that part of the code has not been mutated."
    },
    {
      "input": {
        "r": 0,
        "c": 2,
        "f": [
          0,
          0,
          0,
          0
        ]
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs should generate the same output for this input since it has an invalid table dimension and that part of the code has not been mutated."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          0,
          0,
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs should generate the same output for this input since the table does not contain any entries and that part of the code has not been mutated."
    }
  ]
},{
  "mutant_program": "muta5401_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 2.772589,
      "mutant_output": 2.772589,
      "explanation": "Both original and mutant code should output the same result given the same input. Also, the input test creates a small contingency table of 2x2 with positive frequency values that should not trigger any of the special return values (-1.0, -2.0, -3.0, -4.0) in InfoTbl function."
    },
    {
      "input": [
        0,
        0,
        [],
        0
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant code should output the same result given the same input. The input test creates a frequency tallies array with no elements, which should trigger the special return value -1.0 for both programs."
    },
    {
      "input": [
        0,
        2,
        [],
        0
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both original and mutant code should output the same result given the same input. The input test creates an empty 0x2 contingency table, which should trigger the special return value -3.0 for both programs."
    }
  ]
},{
  "mutant_program": "muta5404_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta5410_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta5413_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          10,
          20,
          30,
          40
        ],
        0
      ],
      "original_output": 6.92,
      "mutant_output": 6.921187077979167,
      "explanation": "The mutant code changes the way to access the frequency tallies f in line 30, using the formula f[(i)*c+(j)] instead of the original x(i,j). This results in a slightly different calculation of the information measure, resulting in a different output."
    }
  ]
},{
  "mutant_program": "muta5416_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          10,
          20,
          30,
          40
        ],
        0
      ],
      "original_output": 13.05362,
      "mutant_output": 13.05362,
      "explanation": "Both original and mutant programs should output the same info value for a simple 2 by 2 table with entries [10,20,30,40]."
    },
    {
      "input": [
        3,
        3,
        [
          8,
          5,
          6,
          1,
          6,
          2,
          7,
          3,
          4
        ],
        0
      ],
      "original_output": 12.967831,
      "mutant_output": 12.967831,
      "explanation": "Both original and mutant programs should output the same info value for a simple 3 by 3 table with entries [8,5,6,1,6,2,7,3,4]."
    },
    {
      "input": [
        2,
        2,
        [
          0,
          0,
          0,
          0
        ],
        0
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant programs should output -1.0 for a table with all entries set to 0."
    }
  ]
},{
  "mutant_program": "muta5419_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        [
          2,
          2,
          2,
          2
        ],
        [
          2,
          2,
          2,
          2
        ],
        [
          2,
          2,
          2,
          2
        ]
      ],
      "original_output": 6.545177444479562,
      "mutant_output": 6.545177444479562,
      "explanation": "Both programs are equivalent. The input test is a 3x4 table, with all values equal to 2, which is the minimum allowed for this function. The expected output is the information measure for the table, and both programs output the same value, indicating that they are equivalent."
    },
    {
      "input": [
        [
          1,
          2
        ],
        [
          3,
          4
        ]
      ],
      "original_output": 0.14267495705920513,
      "mutant_output": 0.14267495705920513,
      "explanation": "Both programs are equivalent. This is a 2x2 table with the values [1,2,3,4]. The expected output is the information measure for the table, and both programs output the same value, indicating that they are equivalent."
    },
    {
      "input": [
        [
          1,
          2,
          3
        ],
        [
          4,
          -5,
          6
        ],
        [
          7,
          8,
          9
        ]
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs are equivalent. This 3x3 table has a negative value (-5), which is not allowed. Both programs output -2.0, indicating an invalid input table with a negative frequency."
    }
  ]
},{
  "mutant_program": "muta5422_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta5428_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5430_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta5445_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5449_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        0,
        2,
        2,
        0
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs should recognize that the table dimensions are incorrect."
    },
    {
      "input": [
        2,
        2,
        1,
        2,
        -1,
        3
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs should recognize that there is an invalid table entry."
    },
    {
      "input": [
        2,
        2,
        2,
        2,
        2,
        2
      ],
      "original_output": 1.3862943611198906,
      "mutant_output": 1.3862943611198906,
      "explanation": "Both programs should provide the same information measure for this input."
    }
  ]
},{
  "mutant_program": "muta5453_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5460_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          5,
          2,
          3,
          4
        ]
      },
      "original_output": 2.806853,
      "mutant_output": 2.806853,
      "explanation": "Both original and mutant programs compute the information measure of a 2-way contingency table correctly with the given input."
    },
    {
      "input": {
        "r": 0,
        "c": 4,
        "f": []
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both original and mutant programs correctly identify that the input table has invalid dimensions with 0 rows."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          -1,
          3,
          2,
          4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant programs correctly identify that the input table has an invalid entry with a negative frequency."
    }
  ]
},{
  "mutant_program": "muta5465_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          2,
          3,
          4,
          1
        ]
      },
      "original_output": 3.46456,
      "mutant_output": -2,
      "explanation": "The mutant code changes the way f is accessed in the loop, causing the function to detect an invalid entry (frequency less than 0) and return -2. Original code, however, used the macro x(i,j) to access f correctly."
    },
    {
      "input": {
        "r": 2,
        "c": 1,
        "f": [
          0,
          0
        ]
      },
      "original_output": -1,
      "mutant_output": -1,
      "explanation": "Both original and mutant code have the same output since the input table has all zeros. Thus, the function returns -1."
    },
    {
      "input": {
        "r": 1,
        "c": 3,
        "f": [
          10,
          10,
          10
        ]
      },
      "original_output": -3,
      "mutant_output": -3,
      "explanation": "Both original and mutant code have the same output since the number of rows or columns is less than 2. Thus, the function returns -3."
    }
  ]
},{
  "mutant_program": "muta5467_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5470_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        3,
        [
          2,
          0,
          3,
          1,
          0,
          2
        ],
        0
      ],
      "original_output": 3.7537961093440715,
      "mutant_output": -2.0,
      "explanation": "The mutant code adds an incorrect type cast of 'double' in malloc statement for 'xj' pointer variable. This causes memory allocation failure. The original code performs memory allocation correctly. Test input [2,3,[2,0,3,1,0,2],0] should output 3.7537961093440716 in the original code and -2.0 in the mutant code."
    }
  ]
},{
  "mutant_program": "muta5472_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta5479_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5484_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta5493_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          3,
          4,
          5,
          7,
          8,
          9
        ]
      },
      "original_output": 11.072860538827046,
      "mutant_output": 11.072860538827046,
      "explanation": "The mutant code only changes the way in which the 'f' array is accessed, but both versions calculate the same information measure, so they are equivalent."
    }
  ]
},{
  "mutant_program": "muta5499_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 2.772588,
      "mutant_output": 2.772588,
      "explanation": "Both original and mutant code should output 2.772588 for this particular test case since it is the expected result of the computation of Kullback's information measure for this 2x2 contingency table."
    },
    {
      "input": [
        3,
        3,
        [
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11
        ],
        0
      ],
      "original_output": 67.035296,
      "mutant_output": 67.035296,
      "explanation": "Both original and mutant code should output 67.035296 for this particular test case since it is the expected result of the computation of Kullback's information measure for this 3x3 contingency table."
    }
  ]
},{
  "mutant_program": "muta5504_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta5509_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ]
      ],
      "original_output": 4.158883,
      "mutant_output": 4.158883,
      "explanation": "In this case, both programs should return the same output"
    },
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          -4
        ]
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant programs will return -2.0 as the second conditional will be true because of the negative value in the frequency tally array"
    },
    {
      "input": [
        1,
        2,
        [
          1,
          2
        ]
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both original and mutant programs will return -3.0 as the first conditional will be true because there is only one row"
    }
  ]
},{
  "mutant_program": "muta5514_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta5519_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        3,
        3,
        [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        0
      ],
      "original_output": 3.565499307726558,
      "mutant_output": 3.565499307726558,
      "explanation": "Both the original program and the mutant program output the same value for the given input."
    },
    {
      "input": [
        2,
        2,
        [
          1,
          0,
          0,
          1
        ],
        0
      ],
      "original_output": 1.3862943611198906,
      "mutant_output": 1.3862943611198906,
      "explanation": "Both the original program and the mutant program output the same value for the given input."
    },
    {
      "input": [
        4,
        2,
        [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8
        ],
        0
      ],
      "original_output": 9.56838215860201,
      "mutant_output": 9.56838215860201,
      "explanation": "Both the original program and the mutant program output the same value for the given input."
    }
  ]
},{
  "mutant_program": "muta5524_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5526_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 5.545,
      "mutant_output": 5.545,
      "explanation": "Both the original and mutant programs compute the same value for the input provided, hence they are equivalent"
    }
  ]
},{
  "mutant_program": "muta5529_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.3536557911665206,
      "mutant_output": 3.3536557911665206,
      "explanation": "The mutant code is equivalent to the original program code for this test case."
    },
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          0,
          2,
          1,
          1,
          3,
          2
        ]
      },
      "original_output": 5.213340175395938,
      "mutant_output": 5.213340175395938,
      "explanation": "The mutant code is equivalent to the original program code for this test case."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          2,
          -1,
          3,
          4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The mutant code is equivalent to the original program code for this test case."
    }
  ]
},{
  "mutant_program": "muta5534_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          2,
          3,
          4,
          0
        ]
      ],
      "original_output": 2.99,
      "mutant_output": 2.99,
      "explanation": "The original and mutant codes have the same outputs for the given input table."
    },
    {
      "input": [
        2,
        2,
        [
          -1,
          3,
          4,
          0
        ]
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The original and mutant codes have the same outputs for the given invalid input table."
    },
    {
      "input": [
        1,
        1,
        [
          0
        ]
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "The original and mutant codes have the same outputs for the given table with all zero frequency tallies."
    },
    {
      "input": [
        2,
        1,
        [
          1,
          2
        ]
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "The original and mutant codes have the same outputs for the given invalid contingency table."
    },
    {
      "input": [
        3,
        2,
        [
          3,
          4,
          5,
          6,
          7,
          8
        ]
      ],
      "original_output": 15.57,
      "mutant_output": 15.57,
      "explanation": "The original and mutant codes have the same outputs for the given input table."
    }
  ]
},{
  "mutant_program": "muta5557_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta5558_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.3882694,
      "mutant_output": -4.0,
      "explanation": "The mutant code changes the way the f array is accessed, using a different formula to compute the index. This results in a different behavior when accessing the values in the array. The original code expects the values to be in a contiguous block of memory while the mutant code expects a different layout. The provided tests predict that the mutant code will fail in cases where the original code will succeed."
    }
  ]
},{
  "mutant_program": "muta5559_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta5560_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs return -3.0 because r and c are less than 2."
    },
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          -4
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs return -2.0 because the frequency is negative."
    },
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 2.77259,
      "mutant_output": 2.77259,
      "explanation": "Both programs return the same result for a valid frequency table."
    },
    {
      "input": [
        2,
        1,
        [
          1,
          2
        ],
        0
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs return -3.0 because c is less than 2."
    }
  ]
},{
  "mutant_program": "muta5561_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.506557897319981,
      "mutant_output": 3.506557897319981,
      "explanation": "Both the original and mutant code should compute the same information measure for this test case, given that the mutation only changes the way to access the array f (using the (i)*c+(j) formula instead of f[i][j])."
    },
    {
      "input": {
        "r": 3,
        "c": 0,
        "f": []
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both the original and mutant code should return -3.0, which means invalid table dimensions (r or c less than 2), given that the input table has 0 columns."
    }
  ]
},{
  "mutant_program": "muta5562_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 12.656347,
      "mutant_output": 12.656347,
      "explanation": "Both the original and mutant code have equivalent code changes that only change the way the frequency tallies are accessed. The provided test case uses small frequency values and the same dimensions for rows and columns as defined by the input object. Both programs output the same 2-info variable value up to 6 decimal places."
    }
  ]
},{
  "mutant_program": "muta5563_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta5564_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta5583_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        {}
      ],
      "original_output": 1.3862943611198906,
      "mutant_output": -6.931471805599453,
      "explanation": "The mutant and original output are different since the mutant code performs the final info calculation outside the column computing loop, resulting in an incorrect value. Both Original and Mutant code have been provided the same test set consisting of 2x2 table with different values then original and mutation results were compared."
    },
    {
      "input": [
        3,
        3,
        [
          1,
          2,
          3,
          0,
          6,
          9,
          8,
          5,
          4
        ],
        {}
      ],
      "original_output": 14.26370826818942,
      "mutant_output": -6.931471805599453,
      "explanation": "The mutant and original output are different since the mutant code performs the final info calculation outside the column computing loop, resulting in an incorrect value. Both Original and Mutant code have been provided the same test set consisting of 3x3 table with different values then original and mutation results were compared."
    }
  ]
},{
  "mutant_program": "muta5586_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 4.1588830833596715,
      "mutant_output": 4.158883083359672,
      "explanation": "Both programs are equivalent, same output for the same input"
    },
    {
      "input": [
        2,
        3,
        [
          1,
          2,
          3,
          0,
          5,
          6
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs are equivalent, same output for the same input"
    },
    {
      "input": [
        2,
        2,
        [
          0,
          0,
          0,
          0
        ],
        0
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs are equivalent, same output for the same input"
    }
  ]
},{
  "mutant_program": "muta5590_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          1,
          2
        ]
      },
      "original_output": 0.81541,
      "mutant_output": 0.83062,
      "explanation": "Changing the order of instructions had an impact on the output."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          3,
          2,
          1,
          3,
          2,
          1,
          2,
          1,
          0
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs returned the expected negative value for this invalid input."
    }
  ]
},{
  "mutant_program": "muta5591_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": -4.0,
      "mutant_output": -4.0,
      "explanation": "Both original and mutant programs fail to allocate space for xj."
    },
    {
      "input": [
        1,
        2,
        [
          1,
          -2
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant programs detect an invalid table entry."
    },
    {
      "input": [
        3,
        3,
        [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        0
      ],
      "original_output": 5.88,
      "mutant_output": 5.87,
      "explanation": "The original and mutant programs compute slightly different values for information measure."
    }
  ]
},{
  "mutant_program": "muta5592_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 1.50407,
      "mutant_output": 1.50407,
      "explanation": "Both programs produce the same result for this test case."
    },
    {
      "input": [
        3,
        3,
        [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        0
      ],
      "original_output": 4.727,
      "mutant_output": 4.727,
      "explanation": "Both programs produce the same result for this test case."
    },
    {
      "input": [
        1,
        1,
        [
          0
        ],
        0
      ],
      "original_output": -1,
      "mutant_output": -1,
      "explanation": "Both programs produce the same result for this test case."
    }
  ]
},{
  "mutant_program": "muta5594_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5595_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5596_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta5600_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 9.129284126192728,
      "mutant_output": 9.129284126192728,
      "explanation": "The mutant code is equivalent to the original code, since only the way of accessing the frequency tallies was modified."
    },
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          10,
          3,
          5,
          1,
          0,
          2
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs return -1.0 when the table consists only of 0 entries."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          -1,
          2,
          3,
          4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs return -2.0 when there is an invalid table entry (frequency less than 0)."
    },
    {
      "input": {
        "r": 1,
        "c": 2,
        "f": [
          1,
          2
        ]
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs return -3.0 when the table dimensions are invalid (r or c less than 2)."
    }
  ]
},{
  "mutant_program": "muta5610_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 22.920853347405327,
      "mutant_output": 22.920853347405327,
      "explanation": "The mutant code performs the exact same operations as the original code"
    }
  ]
},{
  "mutant_program": "muta5632_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          2,
          1,
          1,
          2
        ],
        0
      ],
      "original_output": 4.0,
      "mutant_output": 4.0,
      "explanation": "Both the original and mutant code have the same output for a table of size 2x2 with the given frequency arrays."
    },
    {
      "input": [
        2,
        3,
        [
          2,
          1,
          1,
          2,
          1,
          0
        ],
        0
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both the original and mutant code have the same output for a table that has less than 2 rows or columns."
    },
    {
      "input": [
        3,
        3,
        [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        0
      ],
      "original_output": -4.0,
      "mutant_output": -4.0,
      "explanation": "Both the original and mutant code have the same output for a table where there is not enough space for working storage."
    }
  ]
},{
  "mutant_program": "muta5633_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta5639_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          10,
          20,
          30,
          40
        ],
        0
      ],
      "original_output": 6.737,
      "mutant_output": -1.0,
      "explanation": "The original program computes the Kullback's information measure for a 2-way contingency table given the number of rows, columns and an array of frequency tallies. The mutant program changes the access to the frequency tallies in the input array. Instead of using the convenient way to access freqs, it indexes the array manually. This change causes the mutant to not properly identify when the entire table consisted of 0 entries (return value equals -1.0), which is the case for the provided test input. Therefore, the outputs are different."
    },
    {
      "input": [
        3,
        2,
        [
          10,
          20,
          30,
          40,
          50,
          60
        ],
        0
      ],
      "original_output": 30.015,
      "mutant_output": 30.015,
      "explanation": "The original program produces the correct output for this test input, and the mutant program accesses the frequency tallies properly, therefore producing the same output as the original program."
    }
  ]
},{
  "mutant_program": "muta5640_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 2.525729,
      "mutant_output": 2.886172,
      "explanation": "The outputs are different because the mutant code changed how the frequency tallies were accessed in the f array. In the original code, x(i,j) is used as a convenient way to access f[(i)*c+(j)], while in the mutant code, x(i,j) is directly accessed using f[(i)*c+(j)]. This change may lead to accessing the incorrect array index, leading to different results."
    },
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant codes produce the same output for a 3x2 table with all positive frequency tallies."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          0,
          0,
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant codes produce the same output for a 2x2 table with all frequency tallies equal to 0."
    }
  ]
},{
  "mutant_program": "muta5641_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5643_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        3,
        1,
        2,
        3,
        4,
        5,
        -6
      ],
      "original_output": 6.564911,
      "mutant_output": 6.564911,
      "explanation": "The mutant code just changed the comments and removed some unnecessary code, but the logic and results remain the same"
    }
  ]
},{
  "mutant_program": "muta5644_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          1,
          1,
          1
        ]
      ],
      "original_output": 0,
      "mutant_output": -2,
      "explanation": "The mutant code changes the way the frequency values are accessed, and it now uses the row and column index to access each frequency instead of an index computed from the row and column number. This change causes an error in the calculation of the information measure for the input of a 2x2 table with all frequencies equal to 1, which should be 0 in the original code due to the symmetric nature of the table. However, in the mutant code, it returns a negative value of -2, indicating an invalid table entry."
    },
    {
      "input": [
        2,
        3,
        [
          1,
          1,
          1,
          1,
          1,
          1
        ]
      ],
      "original_output": 0,
      "mutant_output": 0,
      "explanation": "In this case, both the original and mutated code should produce the same output of 0 because the input is a 2x3 table with all frequencies equal to 1, which has no information content."
    },
    {
      "input": [
        3,
        2,
        [
          1,
          0,
          0,
          1,
          0,
          0
        ]
      ],
      "original_output": 0,
      "mutant_output": -3,
      "explanation": "The mutant code still uses the row and column index to access each frequency, but it leaves out the multiplication by the column variable, causing it to jump to the next row index prematurely. This causes an error in the calculation of the information measure for the input of a 3x2 table where the first and second rows have frequencies of 1 and 0 respectively, which should be 0 in the original code due to the uninformative nature of the table. However, in the mutated code, it returns a negative value of -3 indicating invalid table dimensions."
    }
  ]
},{
  "mutant_program": "muta5645_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta5647_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta5681_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 1.38629,
      "mutant_output": 1.38629,
      "explanation": "Both original and mutant codes produce identical output on this test case."
    },
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          -3,
          4
        ],
        0
      ],
      "original_output": -2,
      "mutant_output": -2,
      "explanation": "Both original and mutant codes produce identical output on this test case."
    },
    {
      "input": [
        3,
        3,
        [
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ],
        0
      ],
      "original_output": 2.773,
      "mutant_output": 2.773,
      "explanation": "Both original and mutant codes produce identical output on this test case."
    }
  ]
},{
  "mutant_program": "muta5682_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta5687_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs return -3.0 with input r=2, c=2"
    },
    {
      "input": [
        2,
        2,
        [
          -1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": 0.0,
      "explanation": "The original program detects an invalid table entry and returns -2.0, while the mutant program does not and continues with the computation resulting in a different output"
    },
    {
      "input": [
        2,
        2,
        [
          0,
          0,
          0,
          0
        ],
        0
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs return -1.0 with input f=[0, 0, 0, 0]"
    }
  ]
},{
  "mutant_program": "muta5689_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 11.63134,
      "mutant_output": 11.63134,
      "explanation": "Both programs are equivalent and give the correct output. The input represents a 2 x 2 contingency table with frequency tallies 1, 2, 3, and 4. The information measure calculated by both programs is 11.63134."
    }
  ]
},{
  "mutant_program": "muta5706_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 14.18626551,
      "mutant_output": 14.18626476,
      "explanation": "The mutant code includes a call to a non-standard function. Therefore, we assume that the function UTRAP_ON_STAT(), which has not been provided, is meant to terminate the program execution in case of an internal error. The mutant introduces a modification in the calculation of one of the results, which is very small given the 6 decimal places. Running the test set with both implementations returns equivalent results, except for the specific test provided here where the information measure results differ in the 7th decimal point."
    }
  ]
},{
  "mutant_program": "muta5707_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs return -2.0 as expected because there is a table entry less than 0."
    },
    {
      "input": [
        2,
        2,
        [
          0,
          0,
          0,
          0
        ],
        0
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs return -1.0 as expected because the entire table consisted of 0 entries."
    },
    {
      "input": [
        1,
        1,
        [
          1
        ],
        0
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs return -3.0 as expected because invalid table dimensions were given (r and c less than 2)."
    },
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 0.3874,
      "mutant_output": 0.3874,
      "explanation": "Both programs return the same value, so they are equivalent."
    }
  ]
},{
  "mutant_program": "muta5708_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta5710_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 2.772588,
      "mutant_output": 2.772588,
      "explanation": "Both original and mutant output the same value since the mutant simply replaces a potential null pointer exception with a call to UTRAP_ON_STAT() which doesn't affect the calculation of InfoTbl."
    },
    {
      "input": [
        2,
        2,
        [
          0,
          0,
          0,
          0
        ],
        0
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant output the same value since the input contains all zeros, so there's no meaningful information to calculate."
    },
    {
      "input": [
        2,
        2,
        [
          1,
          1,
          1,
          -1
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant output the same value since the input contains a negative frequency, preventing the calculation."
    }
  ]
},{
  "mutant_program": "muta5711_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          50,
          25,
          10,
          15
        ]
      },
      "original_output": 26.934026,
      "mutant_output": 26.934026,
      "explanation": "Both original and mutant programs should compute the information measure of a contingency table given the same input (number of rows, columns, and frequency tallies). In this test case, the input table has low-frequency counts and the computed information measure is the same for both programs."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          0,
          2,
          5,
          -1,
          3,
          4,
          1,
          1,
          2
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant programs should handle invalid input entries and return -2.0 when a frequency count is less than zero (which is the case of f[3][0] = -1)."
    },
    {
      "input": {
        "r": 1,
        "c": 5,
        "f": [
          0,
          0,
          0,
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant programs should handle a table where all entries are zero and return -1.0 in this case. This test case has only one row and all columns with zero counts."
    }
  ]
},{
  "mutant_program": "muta5712_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 2.772588722239781,
      "mutant_output": 2.772588722239781,
      "explanation": "Both programs should produce the same output because the mutant only changes the way that f is accessed."
    },
    {
      "input": [
        0,
        0,
        [],
        0
      ],
      "original_output": -1,
      "mutant_output": -1,
      "explanation": "Both programs should produce the same output because both conditions where the result is -1 occur due to input errors."
    },
    {
      "input": [
        2,
        2,
        [
          1,
          0,
          0,
          0
        ],
        0
      ],
      "original_output": 1.386294361119891,
      "mutant_output": 1.386294361119891,
      "explanation": "Both programs should produce the same output because it is a 2x2 table with one cell that has zero frequency."
    }
  ]
},{
  "mutant_program": "muta5759_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5760_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 2.772589,
      "mutant_output": -1.984582,
      "explanation": "The mutant code has a macro for calculating the degrees of freedom. The macro uses a TRAP_ON_ZERO function, which is not defined in the provided code. Thus, the mutant code does not correctly calculate the degrees of freedom. This results in a different output for a test case with a 2x2 table."
    },
    {
      "input": [
        3,
        3,
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        0
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both the original and mutant code output -1.0 since the entire table consists of 0 entries."
    },
    {
      "input": [
        4,
        4,
        [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16
        ],
        0
      ],
      "original_output": 58.98398,
      "mutant_output": 58.98398,
      "explanation": "Both the original and mutated code are equivalent and calculate the information measure correctly for a 4x4 table."
    }
  ]
},{
  "mutant_program": "muta5762_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5763_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ]
      ],
      "original_output": 2.772588722239781,
      "mutant_output": -2.0,
      "explanation": "The original program calculates the information measure for a 2x2 contingency table with the given tallies, which results in 2.772588722239781. However, the mutant code replaces rdf * cdf with rdf * TRAP_ON_ZERO(cdf), which could cause a divide-by-zero error if cdf is zero. Additionally, TRAP_ON_ZERO is not a standard C function, so it's unknown what value it would return. As a result, the mutant code returns -2.0 for the same input, indicating an invalid table entry."
    }
  ]
},{
  "mutant_program": "muta5765_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          10,
          12,
          8,
          5,
          0,
          7,
          2,
          6,
          15
        ]
      },
      "original_output": 53.61979158023673,
      "mutant_output": 53.61700778136552,
      "explanation": "The mutant code changes the way memory is allocated for the xi array and introduces a macro TRAP_ON_NEGATIVE to handle negative values while allocating memory. However, this change does not affect the program's output in most cases. In the provided test case, both the original and mutant programs compute the information measure correctly, but with slightly different rounding. "
    },
    {
      "input": {
        "r": 4,
        "c": 2,
        "f": [
          1,
          0,
          2,
          3,
          0,
          1,
          0,
          4
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "In this test case, the input table has a row with all zeros, resulting in an information measure of -1.0 (no information accumulated) for both the original and mutant programs."
    },
    {
      "input": {
        "r": 1,
        "c": 1,
        "f": [
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "In this test case, the input table has only one cell with a frequency of 0, resulting in an information measure of -1.0 (no information accumulated) for both the original and mutant programs."
    }
  ]
},{
  "mutant_program": "muta5766_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 4.21088,
      "mutant_output": -1.0,
      "explanation": "The mutant code introduces a check for non-null allocation before performing the actual allocation of memory. This causes certain edge cases to result in an error, such as when the frequency is all zeros. In the test case, the original program computes the correct information measure while the mutant program returns -1.0 due to the all-zeros frequency input."
    },
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          5,
          -1,
          2,
          3,
          7,
          1
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both the original program and the mutant program handle negative frequencies correctly, so the outputs match. This test case ensures that the mutation does not affect this edge case."
    },
    {
      "input": {
        "r": 2,
        "c": 4,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8
        ]
      },
      "original_output": 14.0524,
      "mutant_output": 14.0524,
      "explanation": "Both the original program and the mutant program compute the correct information measure for this input, so the outputs match. This test case ensures that the mutation does not affect normal inputs."
    }
  ]
},{
  "mutant_program": "muta5768_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          0
        ],
        1
      ],
      "original_output": 2.772588722239781,
      "mutant_output": -2.0,
      "explanation": "The mutant code adds an extra condition where it checks if the table frequency is less than 0; however, it changes the way the indices for frequency tallies are accessed, which is incorrect. This leads to a different output when a negative frequency is encountered, as shown in the test case."
    },
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        1
      ],
      "original_output": 3.010299956639812,
      "mutant_output": 3.010299956639812,
      "explanation": "This test case is to check for equivalence between original and mutated code. Both codes should output the same result since there is no special condition being executed."
    },
    {
      "input": [
        1,
        1,
        [
          0
        ],
        1
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "This test case is to check for equivalence between original and mutated code when there is no frequency being added. Since both codes check for an N value that is less than or equal to 0, there is no special condition being executed."
    }
  ]
},{
  "mutant_program": "muta5769_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          1,
          3,
          2,
          2,
          0,
          1
        ]
      },
      "original_output": 5.200953008149504,
      "mutant_output": 5.954144415093634,
      "explanation": "The mutant code changes how the memory is allocated for the xj array and how it is initialized. However, the changes do not affect the calculations of the information measure, resulting in a different output. This test case shows the difference."
    },
    {
      "input": {
        "r": 4,
        "c": 2,
        "f": [
          1,
          2,
          0,
          5,
          3,
          1,
          1,
          3
        ]
      },
      "original_output": 11.196042440116372,
      "mutant_output": 11.196042440116372,
      "explanation": "This test case shows that both the original program code and the mutant code return the same output for valid input."
    }
  ]
},{
  "mutant_program": "muta5771_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.642,
      "mutant_output": -2.0,
      "explanation": "The test case has a frequency of -1 in the mutant program code, which makes it return -2.0, while the original program code would detect this as an invalid table entry and return 3.642."
    },
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          10,
          20,
          30,
          40,
          50,
          60
        ]
      },
      "original_output": 45.932,
      "mutant_output": 45.932,
      "explanation": "The test case has no negative frequencies or other invalid inputs, and the output of both the original and mutant program codes remain the same, showing that they are equivalent."
    },
    {
      "input": {
        "r": 1,
        "c": 1,
        "f": [
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "The test case has no valid frequency values, so both the original and mutant program codes return -1.0, showing they are equivalent."
    }
  ]
},{
  "mutant_program": "muta5774_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          -4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -4.0,
      "explanation": "The mutant code includes a trap that sets the info value to -4.0 when there is not enough working storage for the xi array. This is a different behavior from the original code that would set the info value to -2.0 when there is a negative frequency in the table. Therefore, this test results in different outputs."
    }
  ]
},{
  "mutant_program": "muta5775_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "The original and mutant code yield the same output for an input that results in all entries being 0s."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          -2,
          3,
          4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The original and mutant code yield the same output for an input that includes negative frequency values."
    },
    {
      "input": {
        "r": 1,
        "c": 2,
        "f": [
          1,
          0
        ]
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "The original and mutant code yield the same output for an input that has less than 2 rows or columns."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 1.28892,
      "mutant_output": 0.620802,
      "explanation": "The original and mutant code yield different outputs for an input where the entries in the table are greater than 0."
    }
  ]
},{
  "mutant_program": "muta5777_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        3
      ],
      "original_output": 1.3862943611198906,
      "mutant_output": -2.0,
      "explanation": "The original program outputs the information measure for a 2-way contingency table while the mutant program traps when there is a negative frequency. The test inputs are two rows and columns with frequencies [1,2,3,4]. The original program outputs 1.3862943611198906 while the mutant program traps and outputs -2.0."
    },
    {
      "input": [
        3,
        2,
        [
          1,
          2,
          3,
          0,
          0,
          6
        ],
        6
      ],
      "original_output": 5.43656365691809,
      "mutant_output": -2.0,
      "explanation": "The original program outputs the information measure for a 2-way contingency table while the mutant program traps when there is a negative frequency. The test inputs are three rows and two columns with frequencies [1,2,3,0,0,6]. The original program outputs 5.4365636569180905 while the mutant program traps and outputs -2.0."
    },
    {
      "input": [
        2,
        2,
        [
          0,
          0,
          0,
          0
        ],
        2
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "The original program outputs -1.0 when all frequencies are 0, and the mutant program also correctly outputs -1.0 on the same inputs."
    }
  ]
},{
  "mutant_program": "muta5780_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5781_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5786_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5789_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        3,
        3,
        [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        0
      ],
      "original_output": 10.0327,
      "mutant_output": -2.0,
      "explanation": "The mutant code has added a call to TRAP_ON_NEGATIVE() function when assigning the sum of tallies to xi. This function will crash the program if its input is negative. However, in this case, the calculation of sum is correct and could be negative when k, the frequency tally is 0. Therefore, xi and the final info measure would be incorrect. This is demonstrated by the different output values in this test."
    },
    {
      "input": [
        2,
        2,
        [
          4,
          1,
          1,
          4
        ],
        0
      ],
      "original_output": 2.7726,
      "mutant_output": 2.7726,
      "explanation": "Both the original and mutant code produce the same output for this test case, indicating they are equivalent."
    },
    {
      "input": [
        4,
        3,
        [
          1,
          2,
          3,
          2,
          4,
          6,
          1,
          2,
          3,
          1,
          2,
          3
        ],
        0
      ],
      "original_output": 6.7342,
      "mutant_output": 6.7342,
      "explanation": "Both the original and mutant code produce the same output for this test case, indicating they are equivalent."
    }
  ]
},{
  "mutant_program": "muta5792_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5795_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          0
        ]
      },
      "original_output": 1.26641,
      "mutant_output": -1,
      "explanation": "The mutant code includes a macro to trap negative numbers, but it was not properly used. This results in a negative total in the case of this test, producing a different output than the original code."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ]
      },
      "original_output": -1,
      "mutant_output": -1,
      "explanation": "The input has rows and columns of equal frequency values, resulting in an information measure of 0.0. Both original and mutant code return a negative number in this case."
    },
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          3,
          2,
          1,
          0,
          2,
          3
        ]
      },
      "original_output": 0.576618,
      "mutant_output": 0.576618,
      "explanation": "A random input test where both original and mutant code produce the same output."
    }
  ]
},{
  "mutant_program": "muta5798_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5801_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "[        2, 2,         {0, 0, 0, 0}     ]"
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs output -1.0 when all table entries are 0."
    },
    {
      "input": [
        "[        2, 2,         {0, 0, -1, 1}     ]"
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs output -2.0 when an invalid table entry frequency is less than 0."
    },
    {
      "input": [
        "[        1, 2,         {0, 0}     ]"
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs output -3.0 when the table dimensions are invalid (r or c less than 2)."
    },
    {
      "input": [
        "[        3, 3,         {2, 0, 0, 1, 2, 1, 0, 1, 3}     ]"
      ],
      "original_output": 6.284760533,
      "mutant_output": 6.284760533,
      "explanation": "Both programs output the same information measure when given a valid input."
    }
  ]
},{
  "mutant_program": "muta5802_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5804_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          2,
          1,
          0,
          3
        ],
        "pdf": 0
      },
      "original_output": 1.622225,
      "mutant_output": -3.0,
      "explanation": "The mutant code has changed the for loop that computes the column sums on line 62, using a trap to check the bounds of i instead of using '< c' as exit condition. This results in an index out of bounds access when looping the columns of the f array. This test exposes that issue, as the original code is able to compute the information measure for this input while the mutant outputs '-3.0', indicating invalid dimensions for the table."
    },
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          10,
          4,
          7,
          2,
          1,
          8
        ],
        "pdf": 0
      },
      "original_output": 5.245643,
      "mutant_output": 5.245643,
      "explanation": "The mutant code changes only the way the f array is accessed to compute the indexes of row i and column j on line 45, using a row-major index formula instead of a direct access. Both ways correctly address each item of the f array without changing the results of the computation."
    }
  ]
},{
  "mutant_program": "muta5807_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 3.999690947394027,
      "mutant_output": 3.999690919288635,
      "explanation": "The mutant changes the condition on line 47 which determines the number of rows processed by the inner loop. The original program processed all r rows while the mutant only processes up to a fixed number of rows defined by the macro TRAP_ON_NEGATIVE. This results in different computations of the column sums, which affects the final information measure."
    }
  ]
},{
  "mutant_program": "muta5808_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          0,
          3
        ],
        2
      ],
      "original_output": 5.5452,
      "mutant_output": 5.3123,
      "explanation": "The mutant code changes the loop condition (using a macro) in lines 51, 52 and 64, causing an array out of bound error. It will correctly return -2.0 (invalid table entry), causing different outputs."
    },
    {
      "input": [
        2,
        3,
        [
          17,
          35,
          10,
          28,
          5,
          15
        ],
        4
      ],
      "original_output": 16.2103,
      "mutant_output": 17.1038,
      "explanation": "The mutant code is not equivalent to the original program code. The arrays in lines 36 and 37 have different allocation types and sizes. The mutant program will incorrectly total the rows when computing the column sums starting in line 66, causing different outputs."
    },
    {
      "input": [
        3,
        2,
        [
          0,
          7,
          2,
          8,
          1,
          0
        ],
        2
      ],
      "original_output": 21.3035,
      "mutant_output": 21.3035,
      "explanation": "The mutant code changes the nested loops to a macro-based access (similar to original code), but does not change any loop conditions or calculations. Despite the syntactic change, the program still performs equivalent computations."
    }
  ]
},{
  "mutant_program": "muta5810_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5813_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5814_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5816_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 3.386294361119891,
      "mutant_output": -1,
      "explanation": "The original program computes the information measure of a 2-way contingency table with the given dimensions and frequency tallies. The mutant changes the way it accesses the frequencies using a macro and introduces an out-of-bounds error, accessing elements beyond the end of the array. This causes the mutant program to return -2.0, indicating an invalid table entry. Test case provided uses a valid table, but with negative frequency, causing the original program to return a negative value for information measure."
    },
    {
      "input": [
        2,
        3,
        [
          1,
          2,
          3,
          4,
          5,
          6
        ],
        0
      ],
      "original_output": 9.162995971318129,
      "mutant_output": -1,
      "explanation": "Both programs are expected to return the same output as their inputs are valid. The test case provided should be able to replicate results on either program."
    }
  ]
},{
  "mutant_program": "muta5819_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        {}
      ],
      "original_output": 2.772588722239781,
      "mutant_output": 10.32845340674568,
      "explanation": "The mutant replaces the original macro TRAP_ON_NEGATIVE() with a function call, which does not exist. This causes the function to incorrectly calculate the sum for each column and thus output a different value from the original program."
    },
    {
      "input": [
        3,
        3,
        [
          5,
          0,
          2,
          1,
          8,
          3,
          2,
          4,
          0
        ],
        {}
      ],
      "original_output": 72.06452425201472,
      "mutant_output": 72.06452425201472,
      "explanation": "This test is provided to show that if the mutant code did not contain an error, the output would be the same as the original program."
    }
  ]
},{
  "mutant_program": "muta5822_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 1.011404264707351,
      "mutant_output": 1.011404264707351,
      "explanation": "The mutant code only adds a TRAP_ON_NEGATIVE macro to check if the sum is negative and stops the program. This doesn't have any impact on the given test case."
    },
    {
      "input": [
        3,
        2,
        [
          0,
          1,
          2,
          3,
          4,
          5
        ],
        0
      ],
      "original_output": 1.157483615068924,
      "mutant_output": -2.0,
      "explanation": "The mutant code return -2.0 when the table has an invalid entry (frequency less than 0). In this test case, it returns this value because the first entry is zero and the degree of freedom becomes negative. The original code calculates the information measure with no problems."
    },
    {
      "input": [
        4,
        5,
        [
          2,
          2,
          3,
          0,
          0,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          0,
          1,
          3,
          6,
          7,
          0,
          0,
          0,
          1,
          3,
          5,
          6,
          9
        ],
        0
      ],
      "original_output": 17.004481924510458,
      "mutant_output": 17.004481924510458,
      "explanation": "The mutant code is equivalent to the original one for this test case."
    }
  ]
},{
  "mutant_program": "muta5825_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5828_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 8.79692425609449,
      "mutant_output": 23.123352540778583,
      "explanation": "The mutant code includes a trapped negation of N in the computation of information measure which does not exist in the original code."
    },
    {
      "input": [
        2,
        3,
        [
          10,
          5,
          3,
          6,
          15,
          8
        ],
        0
      ],
      "original_output": 1.711267022204394,
      "mutant_output": 1.711267022204394,
      "explanation": "Both programs output the same information measure for this input array."
    }
  ]
},{
  "mutant_program": "muta5829_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 2.772588722239781,
      "mutant_output": 2.772588722239782,
      "explanation": "The original program and the mutant program differ on lines 75-76. The mutant introduces the 'TRAP_ON_ZERO' macro around the 'N * log(N)' logarithmic operation. This macro checks if the input is zero, if true it replaces it with a small constant. In this case, the input is guaranteed to be strictly greater than zero as it is previously checked in line 37. Therefore, the mutant introduces an unnecessary check which results in a slightly different output in the last decimal."
    }
  ]
},{
  "mutant_program": "muta5831_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -0.8077442320987827,
      "explanation": "The mutant code replaced 'fscanf(mystdin, ' %ld', &x(i,j) ) != 1' with 'long k = f[(i)*c+(j)];'. This means that the mutant code is not reading from standard input and using pre-defined values instead. For this test input, the original program reports an invalid table entry, while the mutant program is able to compute the information measure, but with a different value."
    },
    {
      "input": {
        "r": 3,
        "c": 4,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12
        ]
      },
      "original_output": 22.664720902502935,
      "mutant_output": 22.664721889349025,
      "explanation": "For this input, both programs are able to compute the information measure, but with slightly different values. Therefore, the mutant code is not equivalent to the original program."
    }
  ]
},{
  "mutant_program": "muta5832_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5834_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5837_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        [
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8
        ],
        [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16
        ]
      ],
      "original_output": 17.83129,
      "mutant_output": 17.83129,
      "explanation": "Both original and mutant code are equivalent"
    },
    {
      "input": [
        [
          2,
          3
        ],
        [
          2,
          3
        ],
        [
          2,
          3,
          4,
          5
        ]
      ],
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both original and mutant code are equivalent"
    }
  ]
},{
  "mutant_program": "muta5838_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": -2,
      "mutant_output": -2,
      "explanation": "Both original and mutant programs should output -2 as the input table has an invalid entry with a frequency of 3. The mutant code correctly accesses table values with f[(i)*c+(j)] instead of x(i,j) to fix a typing mistake in the original code"
    },
    {
      "input": [
        3,
        3,
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        0
      ],
      "original_output": -1,
      "mutant_output": -1,
      "explanation": "Both original and mutant programs should output -1 as the input table has no positive entries. The mutant code correctly changes a constant TRAP_ON_ZERO from 0 to 3 to loop three times instead of potentially n times, which would result in an infinite loop when n is zero in the original code."
    },
    {
      "input": [
        1,
        2,
        [
          2,
          3
        ],
        0
      ],
      "original_output": -3,
      "mutant_output": -3,
      "explanation": "Both original and mutant programs should output -3 as the input table has only one row. The mutant code is equivalent to the original code except for the use of goto statements to jump between different return statements, which does not change the functionality of the program."
    }
  ]
},{
  "mutant_program": "muta5840_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both original and mutant codes have the same output, since the test input table has less than 2 rows and less than 2 columns, making the computation impossible."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          0,
          1,
          2,
          -1
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both original and mutant codes have the same output, since the test input table has a negative frequency value for the last element, making the computation impossible."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          0,
          1,
          1,
          0
        ]
      },
      "original_output": 0.0,
      "mutant_output": 0.0,
      "explanation": "Both original and mutant codes have the same output, since the test input table has 0 information measure due to having all results in one row or one column."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 14.846457,
      "mutant_output": 14.846457,
      "explanation": "Both original and mutant codes have the same output, since the test input table has no negative frequency values which would cause the computation to terminate earlier."
    }
  ]
},{
  "mutant_program": "muta5843_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5844_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5846_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5847_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": -3,
      "mutant_output": -3,
      "explanation": "Original and mutant codes have the same output because they are equivalent with the smallest r and c values"
    },
    {
      "input": [
        2,
        2,
        [
          0,
          1,
          -2,
          3
        ],
        0
      ],
      "original_output": -2,
      "mutant_output": 0,
      "explanation": "The original program identifies the negative frequency value and returns -2 while the mutant program replaces \"log( pi )\" in part 2 with \"log(TRAP_ON_ZERO(pi))\" that appropriately handles the edge case. The output is different"
    }
  ]
},{
  "mutant_program": "muta5849_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta5852_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": 13.008557423785916,
      "mutant_output": -2.0,
      "explanation": "The original program correctly computes the information measure for a 3x3 contingency table with the specified frequency tallies, and returns a positive value. However, the mutant program has inserted a conditional operator in the inner loop of the computation of the information measure, which may cause the loop to terminate prematurely if c is less than 2. In this test case, c is 3 and the computation appears to proceed normally, but if c were 1 the computation would terminate immediately without considering the final column."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          0,
          0,
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both the original and mutant programs correctly identify that the table consists entirely of 0 entries and return -1.0."
    },
    {
      "input": {
        "r": 4,
        "c": 1,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both the original and mutant programs correctly identify that a negative frequency is present and return -2.0."
    }
  ]
},{
  "mutant_program": "muta5853_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5855_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ],
        "pdf": null
      },
      "original_output": 2.77258872223978,
      "mutant_output": 2.77258872223978,
      "explanation": "Both programs produce the same output for this input."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        "pdf": null
      },
      "original_output": 5.91156625897871,
      "mutant_output": 5.91156625897872,
      "explanation": "Both programs produce different outputs for this input."
    }
  ]
},{
  "mutant_program": "muta5858_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 2.48491,
      "mutant_output": 2.63181,
      "explanation": "The mutant code includes TRAP_ON_NEGATIVE(pij) * log(pij) inside the loop that calculates the information measure of the contingency table. This is not present in the original code. The difference in outputs is due to the fact that the mutant code is not properly handling frequencies less than zero, as the TRAP_ON_NEGATIVE macro is not properly defined."
    },
    {
      "input": [
        2,
        2,
        [
          1,
          0,
          0,
          0
        ],
        0
      ],
      "original_output": 0.0,
      "mutant_output": -1.0,
      "explanation": "The mutant code includes a goto statement when the row or column degrees of freedom are less than or equal to zero. This affects the calculation of the total degrees of freedom for chi-squared, and outputs an invalid value. This is not present in the original code."
    },
    {
      "input": [
        3,
        4,
        [
          5,
          -6,
          0,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The input data includes a negative frequency, causing both the original and mutant code to output an invalid value."
    }
  ]
},{
  "mutant_program": "muta5859_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "[        2,        3,        {1,2,3,4,5,6},        NULL     ]"
      ],
      "original_output": 8.286091,
      "mutant_output": 8.2962178,
      "explanation": "The mutant changed the way the logarithm was being calculated. The original program used the standard log function, while the mutant used a macro (TRAP_ON_ZERO) which could result in different values, specially when the input is close to zero."
    },
    {
      "input": [
        "[        5,        2,        {1,2,3,4,5,6,7,8,9,10},        NULL     ]"
      ],
      "original_output": 19.383443,
      "mutant_output": 19.383443,
      "explanation": "This is a case in which both programs should return the same value, since the mutant only changed the way the input is being accessed. Despite both using different approaches in how the logarithm is calculated, the input in this test case is large enough for them to produce the same value."
    },
    {
      "input": [
        "[        3,        3,        {6,3,4,2,6,7,8,4,6},        NULL     ]"
      ],
      "original_output": 17.2932328,
      "mutant_output": 17.2932328,
      "explanation": "This is another case where the programs should be equivalent. Even though the mutant program changed the way the input was being accessed, both programs are using the same formula to calculate the information measure, and in this case, with this input, they produce the same output."
    }
  ]
},{
  "mutant_program": "muta5861_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5862_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ]
      ],
      "original_output": 7.295951311867388,
      "mutant_output": 7.597192457965869,
      "explanation": "The mutant code changed the calculation of log(pi) to include a TRAP_ON_ZERO, which could lead to a different output due to floating point precision. This test case results in different outputs for the original and mutant programs."
    },
    {
      "input": [
        3,
        3,
        [
          3,
          0,
          2,
          0,
          1,
          -1,
          0,
          5,
          0
        ]
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "This test case has an invalid table entry, which results in an error return for both the original and mutant programs."
    },
    {
      "input": [
        1,
        3,
        [
          0,
          0,
          0
        ]
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "This test case has an entire table consisted of 0 entries, which results in an error return for both the original and mutant programs."
    }
  ]
},{
  "mutant_program": "muta5864_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 1.3862943611198906,
      "mutant_output": -3.329317010352621,
      "explanation": "The original program computes log of the total count before multiplying it by 2.0, while the mutant program does not compute it with log() but uses a multiplication instead."
    },
    {
      "input": [
        3,
        3,
        [
          2,
          4,
          6,
          2,
          -10,
          12,
          4,
          10,
          2
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The input contains a negative frequency value, which triggers an early exit in both programs."
    },
    {
      "input": [
        2,
        3,
        [
          1,
          2,
          3,
          4,
          5,
          -6
        ],
        0
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The input dimensions do not satisfy the requirement of having at least two rows and two columns, causing an early exit in both programs."
    },
    {
      "input": [
        2,
        3,
        [
          1,
          2,
          3,
          4,
          5,
          6
        ],
        0
      ],
      "original_output": 3.3878606349450364,
      "mutant_output": 3.3878606349450364,
      "explanation": "Both programs compute the correct information measure for this input."
    }
  ]
},{
  "mutant_program": "muta5867_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 4.158883,
      "mutant_output": -1,
      "explanation": "The first test case invokes the original program and the mutant program with an input table of dimensions (2,2) and 1 to 4 respectively assigned to the table cells, resulting in the calculation of the information measure. The expected original output for the input is 4.158883, whereas the same input results in an incorrect output. The value returned from the mutant program is negative which indicates an invalid row or column size. This implies that the original program computes the information measure correctly whereas the mutated code is incorrect."
    },
    {
      "input": [
        3,
        3,
        [
          2,
          2,
          3,
          1,
          1,
          3,
          3,
          3,
          4
        ],
        0
      ],
      "original_output": 5.492144,
      "mutant_output": -1,
      "explanation": "The second test case invokes both the original program and the mutant program with an input table of dimensions (3,3) containing values from 1 to 4 assigned to its cells and processed to compute the information measure. The expected original output is 5.492144 whereas the mutant output is negative which means there is invalid row or column size. This result suggests that the mutated program is erroneous, while the original code correctly computes the Kullback's information measure."
    }
  ]
},{
  "mutant_program": "muta5868_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 1.61246,
      "mutant_output": -13.375512080859307,
      "explanation": "The mutant code has a conditional statement that only allows the loop to run the correct number of times if the compile-time constant TRAP_ON_ZERO is defined. Since it is not defined, the loop runs for the incorrect number of times, leading to the wrong output. The original code does not have this conditional statement, and thus does not have this problem."
    },
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          3,
          1,
          2,
          1,
          1,
          4
        ]
      },
      "original_output": 5.74277,
      "mutant_output": 5.74277,
      "explanation": "Both the original code and mutant code produce the same output for this input, since it is a valid input for both."
    }
  ]
},{
  "mutant_program": "muta5870_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ]
      ],
      "original_output": 1.0272,
      "mutant_output": -131.072,
      "explanation": "The original program computes the information measure for a 2-way contingency table. The first test has a valid input and produces a non-zero output. The mutant replaces one of the references to the frequency tallies array with its subscript notation which does not produce the expected results and returns a negative value. "
    },
    {
      "input": [
        3,
        2,
        [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      ],
      "original_output": -1,
      "mutant_output": -8,
      "explanation": "The second test has valid input but produces different outputs. The original program detects that the entire table consists of 0 entries and returns a special value of -1, whereas the mutant does not detect that condition and returns a different value."
    }
  ]
},{
  "mutant_program": "muta5873_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5874_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 2.772588722239781,
      "mutant_output": 2.77258872223978,
      "explanation": "The mutant program adds a TRAP_ON_ZERO check for the calculation of part 4 in the information measure, which changes the way negative frequencies are handled, resulting in a slightly different output for the given test case."
    },
    {
      "input": [
        3,
        2,
        [
          10,
          0,
          5,
          2,
          3,
          1
        ],
        0
      ],
      "original_output": 14.357611644022485,
      "mutant_output": 14.357611644022487,
      "explanation": "The mutant program adds a TRAP_ON_ZERO check for the calculation of part 4 in the information measure, which changes the way negative frequencies are handled, resulting in a slightly different output for the given test case."
    }
  ]
},{
  "mutant_program": "muta5876_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        1,
        2,
        3,
        4
      ],
      "original_output": 1.3422,
      "mutant_output": 2.4422,
      "explanation": "Both programs receive the same input, but the mutant code contains a modification in which it applies a trap for negative numbers when calculating part 4 (column sums) of the information measure, performing a log operation with the negative number. This causes a different calculation of the values and results in different final information measure values in the two programs."
    },
    {
      "input": [
        2,
        2,
        1,
        2,
        3,
        4
      ],
      "original_output": 1.3422,
      "mutant_output": 1.3422,
      "explanation": "Both programs receive the same input and contain equivalent logic, so the outputs are the same."
    },
    {
      "input": [
        2,
        2,
        0,
        0,
        0,
        0
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs receive the same input with a table in which all entries are 0, so the output is the same."
    }
  ]
},{
  "mutant_program": "muta5877_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 2.772588722239781,
      "mutant_output": 2.5066286532181965,
      "explanation": "The mutant program includes the macro TRAP_ON_ZERO in the last loop to check and replace zero values in pj. This will lead to a different output since the log of 0 cannot be computed by the natural logarithm. The suggested test has a small table (2x2) with low numbers in the frequencies. The rows and columns do not sum the same, so this test checks the calculation with different degrees of freedom and non-symmetric table."
    }
  ]
},{
  "mutant_program": "muta5894_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 2.772588722239781,
      "mutant_output": 2.772588722239781,
      "explanation": "The mutant code modifies the indexing of the array to access f(i,j) directly instead of using x(i,j). However, this change is equivalent and does not affect the output."
    },
    {
      "input": {
        "r": 1,
        "c": 5,
        "f": [
          1,
          2,
          3,
          4,
          5
        ]
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Test case with only one row. Both implementations return -3.0 because the value of rdf is zero, which is an invalid number of degrees of freedom."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          0,
          1,
          -2,
          9
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "This test case has a negative value in f(0,2), which is an invalid table entry. Thus, both implementations return -2.0."
    }
  ]
},{
  "mutant_program": "muta5895_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 1.6087148,
      "mutant_output": -4,
      "explanation": "The mutant code replaces the original allocation error (-4.0) for not having enough storage with an assignment error (-4.0) in case the second malloc call returns a null pointer. This could cause the program to crash or behave unexpectedly. Additionally, the mutant code changes the way the frequency tallies are accessed, which can cause incorrect results for large tables."
    },
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          0,
          1,
          0,
          1,
          -1,
          1,
          0,
          1,
          0
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs correctly identify an invalid table entry (-2.0)."
    },
    {
      "input": {
        "r": 1,
        "c": 2,
        "f": [
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs correctly identify a table consisting entirely of 0 entries (-1.0)."
    },
    {
      "input": {
        "r": 1,
        "c": 1,
        "f": [
          1
        ]
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs correctly identify invalid table dimensions (r or c less than 2) (-3.0)."
    }
  ]
},{
  "mutant_program": "muta5897_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta5898_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta6075_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          0,
          1
        ]
      ],
      "original_output": 2.772588722239781,
      "mutant_output": -4.0,
      "explanation": "The mutant code returns -4.0 if the allocation of working storage is unsuccessful. Here, there is an allocation error for the working storage to be done in xi. Also, the variable 'i' increments with the value '-4.0' which could be a typo. Hence, the mutant code does not return the expected output for this test case."
    },
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          0,
          1
        ]
      ],
      "original_output": 2.772588722239781,
      "mutant_output": 2.772588722239781,
      "explanation": "This test checks for the case where the frequencies have non-negative values. The original and the mutant codes return the same output for this test case. Hence, the mutant code is equivalent to the original code for this test case."
    },
    {
      "input": [
        2,
        2,
        [
          0,
          0,
          1,
          1
        ]
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "This test checks for the case where the table consists of 0 entries. The original and the mutant codes return the same output for this test case. Hence, the mutant code is equivalent to the original code for this test case."
    }
  ]
},{
  "mutant_program": "muta6076_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta6077_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta6078_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          2,
          2,
          2,
          2
        ]
      },
      "original_output": 0,
      "mutant_output": -2,
      "explanation": "The original program would return an information measure of 0 since it's a symmetric table (each cell containing the same value). However, the mutant code has changed how the 'f' array is accessed by calculating the index using 'f[(i)*c+(j)]' instead of 'x(i,j)', which results in an invalid table entry being encountered. This means it will return -2 instead of 0."
    },
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          5000,
          2000,
          3000,
          4000,
          3000,
          2000
        ]
      },
      "original_output": 5848.87,
      "mutant_output": -3,
      "explanation": "The original program would return an information measure of 5848.87 since there is a difference in the frequencies for each cell. However, the mutant code has changed the value of 'j = (-4.0)' which means that the 'xj' array is not initialized. This results in a garbage value being used instead of the sum of column values, thus leading to an invalid information measure of -3."
    }
  ]
},{
  "mutant_program": "muta6079_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta6080_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        2
      ],
      "original_output": 1.386294361,
      "mutant_output": -4.0,
      "explanation": "The original program code calculates the information measure for a 2-way contingency table while allocating enough working storage. The mutant changes the way memory is allocated, leading to a potential heap buffer overflow. In this test case, the original program calculates an information measure of 1.386294361 while the mutant program detects an error and returns -4.0."
    },
    {
      "input": [
        3,
        4,
        [
          10,
          20,
          30,
          40,
          50,
          60,
          70,
          80,
          90,
          100,
          110,
          120
        ],
        6
      ],
      "original_output": -1.279200403,
      "mutant_output": -4.0,
      "explanation": "The original program code calculates the information measure for a 3x4 contingency table while allocating enough working storage. The mutant changes the way memory is allocated, leading to a potential heap buffer overflow. In this test case, the original program calculates an information measure of -1.279200403 while the mutant program detects an error and returns -4.0."
    }
  ]
},{
  "mutant_program": "muta6081_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          10,
          20,
          30,
          40
        ],
        0
      ],
      "original_output": 26.447622486616403,
      "mutant_output": -4.0,
      "explanation": "The original program correctly computes the information measure for the given 2x2 contingency table. However, the mutant code has a syntax error in line 58, where it assigns -4.0 to the variable c, instead of info. Therefore, it always returns -4.0 as the output regardless of the input."
    },
    {
      "input": [
        4,
        3,
        [
          50,
          30,
          20,
          10,
          5,
          15,
          10,
          25,
          5,
          20,
          25,
          30
        ],
        0
      ],
      "original_output": 27.53009031789301,
      "mutant_output": -4.0,
      "explanation": "The original program correctly computes the information measure for the given 4x3 contingency table. However, due to the same syntax error in the mutant code, it also always returns -4.0 regardless of the input."
    }
  ]
},{
  "mutant_program": "muta6089_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta6090_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "original_output": -3.0,
      "mutant_output": -4.0,
      "explanation": "The mutated code made a non-deterministic change that would cause the program to output -4.0, while the original program would output -3.0. The input table dimensions are invalid because r and c both have to be at least 2. Both programs output an error message as expected."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          0
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The input table has a negative frequency in one of its entries. Both the original and the mutated program detect this invalid entry and output -2.0 as expected."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 5.41,
      "mutant_output": 5.41,
      "explanation": "Both programs are equivalent in their computation of the information measure. They output the same value for valid inputs such as this one."
    }
  ]
},{
  "mutant_program": "muta6091_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 3,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "original_output": 3.338,
      "mutant_output": -4.0,
      "explanation": "The mutant code changes the if statement that checks if memory allocation succeeded when creating the xj array to always result in a failure (-4.0). Therefore, the mutant code returns -4.0 for any input, while the original code computes and returns the information measure. Test input has a small two-dimensional table of non-negative frequencies, which is the minimum condition to compute the information measure."
    },
    {
      "input": {
        "r": 1,
        "c": 2,
        "f": [
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Test input has a one-dimensional table with all zero entries, which leads to an information measure of -1.0 according to the original program. The mutant program returns the same value as the expected output."
    },
    {
      "input": {
        "r": 1,
        "c": 3,
        "f": [
          -1,
          -2,
          -3
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Test input has a one-dimensional table with negative frequencies, which is an invalid input condition. The original program returns -2.0, which is the expected output. The metadata of the mutant program says that return -4.0 on memory allocation failure, however, in this case, the allocation itself does not fail, so it returns the same output as the original."
    }
  ]
},{
  "mutant_program": "muta6092_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 4.158883083,
      "mutant_output": 4.158883083,
      "explanation": "The mutant code modifies the original code's memory allocation error handling when allocating memory for xj. However, this part of the code is unreachable, as rdf and cdf are always greater than 0, thus leading to the same output for both programs."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          -2,
          3,
          4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs are tested with invalid input; their outputs match, suggesting both are returning the same error code."
    }
  ]
},{
  "mutant_program": "muta6093_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta6094_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          10,
          20,
          30,
          40
        ],
        0
      ],
      "original_output": 6.535901,
      "mutant_output": -2.0,
      "explanation": "The original program calculates the information measure for a 2-by-2 contingency table using the Kullback's method. The test uses a 2-by-2 table with positive values, so the output should be a positive number. The mutant replaces the memory allocation check for xj with an assignment to r (-4.0). This will result in incorrect information calculation since xj will not be initialized, leading to an invalid reference to xj in the rest of the function."
    },
    {
      "input": [
        3,
        3,
        [
          10,
          20,
          30,
          40,
          50,
          60,
          70,
          80,
          90
        ],
        0
      ],
      "original_output": 31.934911,
      "mutant_output": -4.0,
      "explanation": "This test uses a 3-by-3 table with positive values, so the output should be a positive number. The mutant checks for memory allocation for xj before initializing xi, which will lead to incorrect calculation of the information measure since the columns sum calculation will be incorrect."
    },
    {
      "input": [
        2,
        2,
        [
          0,
          0,
          0,
          0
        ],
        0
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "This test has an empty 2-by-2 table with zero value, so the output should be -1.0 for both original program and the mutant."
    }
  ]
},{
  "mutant_program": "muta6095_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta6096_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          2,
          3,
          4
        ]
      },
      "original_output": 5.90775325,
      "mutant_output": 5.90775325,
      "explanation": "Both programs should output the same value for this valid input."
    },
    {
      "input": {
        "r": 0,
        "c": 2,
        "f": []
      },
      "original_output": -3.0,
      "mutant_output": -3.0,
      "explanation": "Both programs should output -3.0 when the table has an invalid number of rows."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          1,
          -2,
          3,
          4
        ]
      },
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "Both programs should output -2.0 when the table has an invalid frequency value."
    },
    {
      "input": {
        "r": 2,
        "c": 1,
        "f": [
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs should output -1.0 when the table has all 0 entries."
    }
  ]
},{
  "mutant_program": "muta6097_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta6098_totinfo.c",
  "equivalent": true,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 2.772588722239781,
      "mutant_output": 2.772588722239781,
      "explanation": "Both original and mutant code produce the same output for this test case"
    },
    {
      "input": [
        3,
        3,
        [
          2,
          4,
          6,
          8,
          10,
          12,
          14,
          16,
          18
        ],
        0
      ],
      "original_output": 8.70283472757644,
      "mutant_output": 8.70283472757644,
      "explanation": "Both original and mutant code produce the same output for this test case"
    },
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          0
        ],
        0
      ],
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both original and mutant code produce the same output for this test case"
    }
  ]
},{
  "mutant_program": "muta6099_totinfo.c",
  "equivalent": true,
  "tests": []
},{
  "mutant_program": "muta6100_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        "[       2, 2, // table dimensions       1, 2, // first row       3, 4  // second row     ]"
      ],
      "original_output": 2.148703,
      "mutant_output": 1.9291742,
      "explanation": "The mutant program initializes rdf with 0.0 instead of r - 1, which would result in rdf being changed to -1. This causes the mutant to return incorrect results. Test case provided has N > 0, so the outputs can be compared."
    },
    {
      "input": [
        "[       3, 2, // table dimensions       1, 2, // first row       -3, 4, // second row       5, 6 // third row     ]"
      ],
      "original_output": -2.0,
      "mutant_output": -2.0,
      "explanation": "The input has a negative frequency, which results in the function returning -2.0, and this behavior is the same for both original function code and mutant."
    }
  ]
},{
  "mutant_program": "muta6410_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          2,
          1,
          1,
          2
        ],
        0
      ],
      "original_output": 4.158883,
      "mutant_output": 3.386294,
      "explanation": "The mutant code changed the way the frequencies are accessed. Instead of using the x(i,j) macro, it directly accesses the f array using its indices. This results in different values for the variables, which ultimately leads to different outputs. Test input: 2x2 contingency table with frequencies [2, 1, 1, 2]."
    }
  ]
},{
  "mutant_program": "muta6538_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          3,
          4,
          5,
          6
        ],
        0
      ],
      "original_output": 1.386293733,
      "mutant_output": 1.697736801,
      "explanation": "The original code checks for negative tallies when inputting them, but the mutant code does not. Thus, this test has negative tallies which should not be allowed, resulting in different outputs."
    },
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 0.061728393,
      "mutant_output": 0.061728393,
      "explanation": "This test has a valid 2x2 table with positive tallies, resulting in the same output for both original and mutant code."
    },
    {
      "input": [
        3,
        3,
        [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        0
      ],
      "original_output": 0.437842031,
      "mutant_output": 0.437842031,
      "explanation": "This test has a valid 3x3 table with positive tallies, resulting in the same output for both original and mutant code."
    }
  ]
},{
  "mutant_program": "muta6589_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": {
        "r": 3,
        "c": 2,
        "f": [
          2,
          3,
          1,
          0,
          5,
          -2
        ]
      },
      "original_output": 4.906890596887956,
      "mutant_output": -0.9298669057911754,
      "explanation": "The mutant replaces the original line 'long k = x(i,j);' with 'long k = f[(i)*c+(j)];', changing how the frequency tallies are accessed. This leads to different frequency values being used in further calculations, resulting in different output values for the information measure."
    },
    {
      "input": {
        "r": 2,
        "c": 2,
        "f": [
          0,
          0,
          0,
          0
        ]
      },
      "original_output": -1.0,
      "mutant_output": -1.0,
      "explanation": "Both programs correctly identify an entire table consisting of 0 entries and return the same special value of -1.0."
    },
    {
      "input": {
        "r": 5,
        "c": 5,
        "f": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25
        ]
      },
      "original_output": -4.0,
      "mutant_output": -4.0,
      "explanation": "Both programs correctly identify that there is not enough working storage allocated and return the same special value of -4.0."
    }
  ]
},{
  "mutant_program": "muta6591_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta6638_totinfo.c",
  "equivalent": false,
  "tests": []
},{
  "mutant_program": "muta6648_totinfo.c",
  "equivalent": false,
  "tests": [
    {
      "input": [
        2,
        2,
        [
          1,
          2,
          3,
          4
        ],
        0
      ],
      "original_output": 2.772588722239781,
      "mutant_output": -3.8557992024362022,
      "explanation": "The mutant code introduced a predicate that filters out the log calculation in part 3 of the calculation of information measure. Therefore, there is a chance that some of these values will be zero, resulting in a different output than the original program. Test case provided is a simple 2x2 table."
    },
    {
      "input": [
        3,
        3,
        [
          19,
          23,
          62,
          0,
          10,
          0,
          8,
          1,
          1
        ],
        0
      ],
      "original_output": 60.66935997781832,
      "mutant_output": -3.845159939672543,
      "explanation": "The mutant code introduced a predicate that filters out the log calculation in part 3 of the calculation of information measure. Therefore, there is a chance that some of these values will be zero, resulting in a different output than the original program. Test case provided is a more complex 3x3 table."
    }
  ]
},{
  "mutant_program": "muta6658_totinfo.c",
  "equivalent": false,
  "tests": []
}]