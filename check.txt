Given this original program code: 

/* Introduction to Software Testing
*  Authors: Paul Ammann & Jeff Offutt
*  Chapter 5, section 5.2, page 189 */
#include <stdio.h>

int sum(int x[], int size)
{
	int s = 0;
	int i;
	
	for (i = 0; i < size; i++) {
		s = s + x[i];
	} 
	return s;
}

int inArr[100];

/*Driver function for sum*/
int main (int argc, char* argv[])
{
int i;
    
   
	for (i = 1; i < argc; i++) {
		inArr[i - 1] = atoi(argv[i]);
	}
	                  
	printf("The result is: %d\n", sum(inArr, argc - 1));
	return 0;
}

And this mutant code: 
int sum(int x[], int size)
{
 int s = 0;
 int i;
 for (i = 0;   (0 < size) ;  i++) {
  s = s + x[i];
 }
 return s;
}
int inArr[100];
int main (int argc, char* argv[])
{
int i;
 for (i = 1; i < argc; i++) {
  inArr[i - 1] = atoi(argv[i]);
 }
 printf("The result is: %d\n", sum(inArr, argc - 1));
 return 0;
}

Return me in a JSON format, only, the name of the mutant program being the name of the function; identify if the mutant code is equivalent to the original program code; provide test set for both programs to run; provide the output of the original program according to the suggested test set and the output of the mutated program; NO explanations!!

If you identify that it is not equivalent, provide a test that results in different outputs.

Follow an example
{ 
 "mutant_program": "sum",
 "equivalent": true,
 "tests":[
   {
     "input": [1,2,3],
     "original_output": 0,
     "mutant_output": 1
   },
   {
     "input": [4,5,6],
     "original_output": 10,
     "mutant_output": 7
   },
   {
     "input": [7,8,9],
     "original_output": 12,
     "mutant_output": 16
   }
 ]
}
